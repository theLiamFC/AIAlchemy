{
    "class": [
      {
        "name": "motor",
        "description": "a class that allows access to spike prime motors",
        "initialization": "none",
        "required imports": "import motor \n from hub import port",
        "function": {
          "name": "Run motor for degrees",
          "syntax": "motor.run_for_degrees(port.B, 360, 75)",
          "parameters": {
            "parameter": [
              {
                "name": "Port",
                "description": "Port of spike prime to which motor is connected",
                "values": "port.A,port.B,port.C,port.D,port.E,port.F"
              },
              {
                "name": "Degrees",
                "description": "Degrees for which the motor should turn.",
                "values": "any integer"
              },
              {
                "name": "Speed",
                "description": "Speed at which the motor should run in degrees per second.",
                "values": "any integer"
              }
            ]
          }
        }
      },
      {
        "name": "color_sensor",
        "description": "a class that allows access to spike prime color sensors",
        "initialization": "none",
        "required imports": "from hub import color_sensor \n from hub import port",
        "function": [
          {
            "name": "color",
            "syntax": "color_sensor.color(port.A)",
            "parameters": {
              "parameter": {
                "name": "Port",
                "description": "Port of spike prime to which color sensor is connected",
                "values": "port.A,port.B,port.C,port.D,port.E,port.F"
              }
            },
            "returns": {
              "name": "the color sensed by the color sensor",
              "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"
            }
          },
          {
            "name": "reflection",
            "syntax": "color_sensor.reflection(port.A)",
            "initialization": "none",
            "parameters": {
              "parameter": {
                "name": "Port",
                "description": "Port of spike prime to which color sensor is connected",
                "values": "port.A,port.B,port.C,port.D,port.E,port.F"
              }
            },
            "returns": {
              "name": "the intensity of light sensed by the color sensor",
              "values": "integer 1:100"
            }
          }
        ]
      },
      {
        "name": "motor_pair",
        "description": "a class that allows controlling two spike prime motors together",
        "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)",
        "required imports": "import motor_pair \n from hub import port",
        "function": [
          {
            "name": "move motor pair for degrees",
            "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
            "parameters": {
              "parameter": [
                {
                  "name": "motor pair",
                  "description": "Specification of which motor pair to move",
                  "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"
                },
                {
                  "name": "degrees",
                  "description": "Degrees for which the motor pair should turn.",
                  "values": "any integer"
                },
                {
                  "name": "steering",
                  "description": "How much the motor pair should alter motor speeds to turn",
                  "values": "an integer -100:100"
                },
                {
                  "name": "velocity",
                  "description": "Speed at which the motors should run in degrees per second.",
                  "values": "any integer"
                }
              ]
            }
          },
          {
            "name": "move motor pair for time",
            "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
            "parameters": [
                {
                  "name": "motor Pair",
                  "description": "Specification of which motor pair to move",
                  "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"
                },
                {
                  "name": "time",
                  "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)",
                  "values": "any integer"
                },
                {
                  "name": "steering",
                  "description": "How much the motor pair should alter motor speeds to turn",
                  "values": "an integer -100:100"
                },
                {
                  "name": "velocity",
                  "description": "Speed at which the motors should run in degrees per second.",
                  "values": "any integer"
                }
              ]
          }
        ]
      },
      {
        "name": "distance_sensor",
        "description": "a class that allows access to spike prime distance sensors",
        "initialization": "none",
        "required imports": "from hub import distance_sensor \n from hub import port",
        "function": {
          "name": "get distance",
          "syntax": "distance_sensor.distance(port.A)",
          "parameters": {
            "parameter": {
              "name": "Port",
              "description": "Port of spike prime to which distance sensor is connected",
              "values": "port.A,port.B,port.C,port.D,port.E,port.F"
            }
          },
          "returns": {
            "name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1",
            "values": "integer"
          }
        }
      },
      {
        "name": "motion_sensor",
        "description": "a class that allows access to spike prime motion sensors",
        "initialization": "none",
        "required imports": "from hub import motion_sensor \n from hub import port",
        "function": [
          {
            "name": "acceleration",
            "syntax": "motion_sensor.acceleration()",
            "parameters": "none",
            "returns": {
              "name": "a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G",
              "values": "[int, int, int]"
            }
          },
          {
            "name": "tilt angles",
            "syntax": "motion_sensor.tilt_angles()",
            "parameters": "none",
            "returns": {
              "name": "a tuple containing yaw pitch and roll values as integers. Values are decidegrees",
              "values": "[int, int, int]"
            }
          },
          {
            "name": "angular velocity",
            "syntax": "motion_sensor.angular_velocity()",
            "parameters": "none",
            "returns": {
              "name": "a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second",
              "values": "[int, int, int]"
            }
          }
        ]
      },
      {
        "name": "sound",
        "description": "a class that enables control of built in SPIKE Prime speakers",
        "initialization": "none",
        "required imports": "from hub import sound \n from hub import port",
        "function": [
          {
            "name": "beep",
            "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)",
            "parameters": [
              {
                "name": "freq",
                "description": "Frequency of beep",
                "values": "positive integer"
              },
              {
                "name": "duration",
                "description": "length of beep in milliseconds",
                "values": "positive integer"
              },
              {
                "name": "volume",
                "description": "volume of beep",
                "values": "integer 1:100"
              }
            ],
            "returns": "none"
          }
        ]
      },
      {
        "name": "light_matrix",
        "description": "a class that enables control of built in SPIKE Prime led matrix",
        "initialization": "none",
        "required imports": "from hub import light_matrix",
        "function": [
          {
            "name": "clear",
            "syntax": "color_matrix.clear()",
            "parameters": "none",
            "returns": "none"
          },
          {
            "name":"set_pixel",
            "syntax":"light_matrix.set_pixel(2,2,100)",
            "parameters":[
              {
                "name":"x value",
                "description":"the x position of led on the matrix",
                "values":"integer 0:4"
              },
              {
                "name":"y value",
                "description":"the y position of led on the matrix",
                "values":"integer 0:4"
              },
              {
                "name":"brightness",
                "description":"the light intensity of the pixel",
                "values":"integer 1:100"
              }
            ]
          },
          {
            "name":"show",
            "syntax":"light_matrix.show(list[int])",
            "parameters":[
              {
                "name":"pixel list",
                "description":"a list of length 25 corresponding to each pixel in the 5x5 led matrix",
                "values":"legnth 25 list of integers with values 1:100"
              }
            ],
            "example":"# Create a list with 25 identical intensity values \r\n pixels = [100] * 25 \r\n # Update all pixels to show same intensity \r\n light_matrix.show(pixels)"
          },
          {
            "name":"show_image",
            "syntax":"light_matrix.show_image(light_matrix.IMAGE_HAPPY)",
            "parameters":[
              {
                "name":"image id",
                "description":"The id of the image to show. The range of available images is 1 to 67. There are consts on the light_matrix module for these.",
                "values":"int 1:67"
              }
            ]
          },
          {
            "name":"write",
            "syntax":"light_matrix.write(text: str, intensity: int = 100, time_per_character: int = 500)",
            "parameters":[
              {
                "name":"text",
                "description":"the text to display on the matrix",
                "values":"string"
              },
              {
                "name":"intensity",
                "description":"the brightness of the leds",
                "values":"integer 1:100"
              },
              {
                "name":"time per character",
                "description":"How long to show each character on the display in milliseconds",
                "values":"positive integer"
              }
            ]
          }
        ]
      }
    ]
}