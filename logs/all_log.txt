



PROGRAM OUTPUT FROM 1709435227.7006817

THREAD_ID: thread_xz2ihzziNfkoM23RPBeqal0I
Adding message
Creating new run
Run in progress
Status: completed



PROGRAM OUTPUT FROM 2024-03-02 22:09:45

THREAD_ID: thread_FuKUNPZn2NKwVKOUpH2rG5QP
Adding message
Creating new run
Run in progress
Status: requires_action
Managing functions
{"query":"sound"}
Querying documentation for: sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_zovccB2X0kRAoy6aNe4ft86C', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
Done submitting outputs
Using existing run
Run in progress
Status: completed
Adding message
Creating new run
Run in progress
Status: requires_action
Managing functions
{"query":"motor_pair"}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_BLWzCK61OOPeSQzo86fcePg1', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
Done submitting outputs
Using existing run
Run in progress
Status: requires_action
Managing functions
{"code":"from hub import sound\nfrom hub import port\nimport motor_pair\n\n# Initialize Motor Pair\nm_pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Beep\nsound.beep()\n\n# Move Forward\nm_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)","runtime":"5"}

==================== RUNNING CODE ====================
        from hub import sound

from hub import port

import motor_pair



# Initialize Motor Pair

m_pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)



# Beep

sound.beep()



# Move Forward

m_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)
==================== end ====================

==================== SERIAL OUTPUT ====================
        from hub import sound

>>> from hub import port

>>> import motor_pair

>>> 

>>> # Initialize Motor Pair

>>> m_pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ValueError: PORTA is assigned to PAIR_1

>>> 

>>> # Beep

>>> sound.beep()

<awaitable>

>>> 

>>> # Move Forward

>>> m_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'm_pair' isn't defined

>>> 
==================== end ====================
Ending program
Program successfully ended
Submitting tool outputs: [{'tool_call_id': 'call_qrAb4SLDBw8u9EsLjvYH2rpU', 'output': 'from hub import sound\r\n>>> from hub import port\r\n>>> import motor_pair\r\n>>> \r\n>>> # Initialize Motor Pair\r\n>>> m_pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> \r\n>>> # Beep\r\n>>> sound.beep()\r\n<awaitable>\r\n>>> \r\n>>> # Move Forward\r\n>>> m_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'m_pair\' isn\'t defined\r\n>>> '}]
Done submitting outputs
Using existing run
Run in progress
Longer than normal runtime: requires_action
Status: requires_action
Managing functions
{"code":"from hub import sound\nimport hub\nimport motor_pair\n\n# Beep\nsound.beep()\n\n# Initialize Motor Pair and Move Forward\ndef initialize_and_move():\n    m_pair = motor_pair.Pair(hub.port.A, hub.port.B)\n    m_pair.move(20,0)\n\ninitialize_and_move()","runtime":"5"}

==================== RUNNING CODE ====================
        from hub import sound

import hub

import motor_pair



# Beep

sound.beep()



# Initialize Motor Pair and Move Forward

def initialize_and_move():

   m_pair = motor_pair.Pair(hub.port.A, hub.port.B)

   m_pair.move(20,0)



initialize_and_move()
==================== end ====================

==================== SERIAL OUTPUT ====================
        from hub import sound

>>> import hub

>>> import motor_pair

>>> 

>>> # Beep

>>> sound.beep()

<awaitable>

>>> 

>>> # Initialize Motor Pair and Move Forward

>>> def initialize_and_move():

...        m_pair = motor_pair.Pair(hub.port.A, hub.port.B)

...        m_pair.move(20,0)

...     

...     initialize_and_move()

...     
==================== end ====================
Ending program
Program successfully ended
Submitting tool outputs: [{'tool_call_id': 'call_Ly5AXkKpBbLB2iG0UABRw01s', 'output': 'from hub import sound\r\n>>> import hub\r\n>>> import motor_pair\r\n>>> \r\n>>> # Beep\r\n>>> sound.beep()\r\n<awaitable>\r\n>>> \r\n>>> # Initialize Motor Pair and Move Forward\r\n>>> def initialize_and_move():\r\n...        m_pair = motor_pair.Pair(hub.port.A, hub.port.B)\r\n...        m_pair.move(20,0)\r\n...     \r\n...     initialize_and_move()\r\n...     '}]
Done submitting outputs
Using existing run
Run in progress
Status: requires_action
Managing functions
{"prompt":"Did the robot beep and then move forward successfully?"}



PROGRAM OUTPUT FROM 2024-03-02 22:42:39

THREAD_ID: thread_EN8dhu7NPHnjkUa17fSkCKnw
Adding message
Creating new run
Run in progress
Status: requires_action
Managing functions
{"query":"motor_pair"}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_DAGTys6jZ4q5Myv2FO70EFbL', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
Done submitting outputs
Using existing run
Run in progress
Status: requires_action
Managing functions
{"code":"import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)","runtime":"3"}

================== RUNNING CODE ==================
        import motor_pair

from hub import port

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)
==================== END ====================

================== SERIAL OUTPUT ==================
        

>>> import motor_pair

>>> from hub import port

>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ValueError: PORTA is assigned to PAIR_1

>>> motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)

<awaitable>

>>> 
==================== END ====================
Ending program
Program successfully ended
Submitting tool outputs: [{'tool_call_id': 'call_z8n4tg7D5NDk7QDMllll1ec3', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)\r\n<awaitable>\r\n>>> '}]
Done submitting outputs
Using existing run
Run in progress
Status: requires_action
Managing functions
{"prompt":"Did the robot move forward correctly?"}
Hey Human, Did the robot move forward correctly?
Submitting tool outputs: [{'tool_call_id': 'call_bcc6SGWjIa7CABxSdLd3iggB', 'output': 'yes'}]
Done submitting outputs
Using existing run
Run in progress
Status: completed
Closing



PROGRAM OUTPUT FROM 2024-03-02 22:47:52

 - Status: THREAD_ID: thread_6mEsAFU3S3lZaD8rJIGiVDL9
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"force_sensor"}
 - Status: Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_UGp3fB7UnSmhZpL2Z1AE5AWc', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"sound"}
 - Status: Querying documentation for: sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_9KJXaqzrQe5jNP4WCsGrFADk', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"Which port is the force sensor connected to?"}
Hey Human, Which port is the force sensor connected to?
Submitting tool outputs: [{'tool_call_id': 'call_VdlklnnoprMeMqbeMlQnIJII', 'output': 'C'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port\nimport force_sensor\nfrom hub import sound\n\nwhile True:\n    force = force_sensor.force(port.C)\n    if force:\n        sound.beep(volume=int(force))","runtime":"10"}

================== RUNNING CODE ==================
        from hub import port

import force_sensor

from hub import sound



while True:

   force = force_sensor.force(port.C)

   if force:

       sound.beep(volume=int(force))
==================== END ====================

================== SERIAL OUTPUT ==================
        

>>> from hub import port

>>> import force_sensor

>>> from hub import sound

>>> 

>>> while True:

...        force = force_sensor.force(port.C)

...        if force:

...                sound.beep(volume=int(force))

...             
==================== END ====================
 - Status: Ending program
 - Status: Program successfully ended
Submitting tool outputs: [{'tool_call_id': 'call_HAoNXvlydCiQePvnHKRoLTKw', 'output': '\r\n>>> from hub import port\r\n>>> import force_sensor\r\n>>> from hub import sound\r\n>>> \r\n>>> while True:\r\n...        force = force_sensor.force(port.C)\r\n...        if force:\r\n...                sound.beep(volume=int(force))\r\n...             '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"Is the beep noise playing louder depending on how hard the force sensor is pressed, and does it stop when the sensor is not pressed at all?"}
Hey Human, Is the beep noise playing louder depending on how hard the force sensor is pressed, and does it stop when the sensor is not pressed at all?
Submitting tool outputs: [{'tool_call_id': 'call_iIeRGfKp0RVUxlh6NO0VDiPz', 'output': "no I didn't hear anything when I pressed the force sensor"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"Can you confirm the force sensor is functioning and the robot's volume is not set to mute?"}
Hey Human, Can you confirm the force sensor is functioning and the robot's volume is not set to mute?
Submitting tool outputs: [{'tool_call_id': 'call_zRJSg7E9wq7eMfMrA5jM5LPP', 'output': 'yes I confirm'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port\nimport force_sensor\nfrom hub import sound\n\nwhile True:\n    force = force_sensor.get_force(port.C)\n    if force > 10: # Setting a minimal threshold for sound to play.\n        sound.beep(volume=min(int(force), 100)) # Ensuring volume doesn't exceed 100.","runtime":"10"}

================== RUNNING CODE ==================
        from hub import port

import force_sensor

from hub import sound



while True:

   force = force_sensor.get_force(port.C)

   if force > 10: # Setting a minimal threshold for sound to play.

       sound.beep(volume=min(int(force), 100)) # Ensuring volume doesn't exceed 100.
==================== END ====================

================== SERIAL OUTPUT ==================
        from hub import port

>>> import force_sensor

>>> from hub import sound

>>> 

>>> while True:

...        force = force_sensor.get_force(port.C)

...        if force > 10: # Setting a minimal threshold for sound to play.

...            sound.beep(volume=min(int(force), 100)) # Ensuring volume doesn't exceed 100.

...         
==================== END ====================
 - Status: Ending program
 - Status: Program successfully ended
Submitting tool outputs: [{'tool_call_id': 'call_IvPy8w4tM4yn6u6MW5y0b826', 'output': "from hub import port\r\n>>> import force_sensor\r\n>>> from hub import sound\r\n>>> \r\n>>> while True:\r\n...        force = force_sensor.get_force(port.C)\r\n...        if force > 10: # Setting a minimal threshold for sound to play.\r\n...            sound.beep(volume=min(int(force), 100)) # Ensuring volume doesn't exceed 100.\r\n...         "}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"Is the beep noise now playing louder depending on how hard the force sensor is pressed, with no sound when the sensor is not pressed at all?"}
Hey Human, Is the beep noise now playing louder depending on how hard the force sensor is pressed, with no sound when the sensor is not pressed at all?
Submitting tool outputs: [{'tool_call_id': 'call_R3aUhprwYddXMmoLxnkYMuxg', 'output': "hmm still didn't work, can you just print out the force sensor readings to help debug"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port\nimport force_sensor\nfrom hub import sound\n\nwhile True:\n    force = force_sensor.get_force(port.C)\n    print(force)","runtime":"10"}

================== RUNNING CODE ==================
        from hub import port

import force_sensor

from hub import sound



while True:

   force = force_sensor.get_force(port.C)

   print(force)
==================== END ====================

================== SERIAL OUTPUT ==================
        from hub import port

>>> import force_sensor

>>> from hub import sound

>>> 

>>> while True:

...        force = force_sensor.get_force(port.C)

...        print(force)

...     
==================== END ====================
 - Status: Ending program
 - Status: Program successfully ended
Submitting tool outputs: [{'tool_call_id': 'call_Jljid8jswiRTXLy4p0X0DUnX', 'output': 'from hub import port\r\n>>> import force_sensor\r\n>>> from hub import sound\r\n>>> \r\n>>> while True:\r\n...        force = force_sensor.get_force(port.C)\r\n...        print(force)\r\n...     '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"What force sensor readings are being output when pressing the sensor at different intensities?"}
Hey Human, What force sensor readings are being output when pressing the sensor at different intensities?
Submitting tool outputs: [{'tool_call_id': 'call_jIaRD070iqlxu7ZCSnypUig3', 'output': 'hmm nothing output, try again?'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port\nimport force_sensor\n\nwhile True:\n    force = force_sensor.get_force(port.C)\n    print('Force:', force)","runtime":"10"}

================== RUNNING CODE ==================
        from hub import port

import force_sensor



while True:

   force = force_sensor.get_force(port.C)

   print('Force:', force)
==================== END ====================

================== SERIAL OUTPUT ==================
        from hub import port

>>> import force_sensor

>>> 

>>> while True:

...        force = force_sensor.get_force(port.C)

...        print('Force:', force)

...     
==================== END ====================
 - Status: Ending program
 - Status: Program successfully ended
Submitting tool outputs: [{'tool_call_id': 'call_1brwiXfe8ZpR4mjOmNEyO8lT', 'output': "from hub import port\r\n>>> import force_sensor\r\n>>> \r\n>>> while True:\r\n...        force = force_sensor.get_force(port.C)\r\n...        print('Force:', force)\r\n...     "}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"print('Hello World')\nimport time\ntime.sleep(5)\nprint('Hello Galaxy')","runtime":"10"}

================== RUNNING CODE ==================
        print('Hello World')

import time

time.sleep(5)

print('Hello Galaxy')
==================== END ====================

================== SERIAL OUTPUT ==================
        print('Hello World')

Hello World

>>> import time

>>> time.sleep(5)


==================== END ====================
 - Status: Ending program
 - Status: Program successfully ended
Submitting tool outputs: [{'tool_call_id': 'call_WiBSB8s35M4VFIlEmqZAWwaN', 'output': "print('Hello World')\r\nHello World\r\n>>> import time\r\n>>> time.sleep(5)\r\n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"print('Hello World')\nimport time\ntime.sleep(5)\nprint('Hello Galaxy')","runtime":"10"}

================== RUNNING CODE ==================
        print('Hello World')

import time

time.sleep(5)

print('Hello Galaxy')
==================== END ====================

================== SERIAL OUTPUT ==================
        print('Hello World')

Hello World

>>> import time

>>> time.sleep(5)


==================== END ====================
 - Status: Ending program
 - Status: Program successfully ended
Submitting tool outputs: [{'tool_call_id': 'call_Ux34ILcClXzVJxDDUCNQ2mIP', 'output': "print('Hello World')\r\nHello World\r\n>>> import time\r\n>>> time.sleep(5)\r\n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:00:11

 - Status: THREAD_ID: thread_9E85MkAdfnIVseWfYgScJmmB
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:00:28

 - Status: THREAD_ID: thread_951mSSgleUfy0MsglCcwGRYI
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:01:04

 - Status: THREAD_ID: thread_vxyRCbsqOcYiwR6ISAJO25Lu
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:01:16

 - Status: THREAD_ID: thread_lnWurJ28sWm4fq50RTiWSk0V
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import PrimeHub\nhub = PrimeHub()\n\nhub.speaker.beep(72, 0.5)\nhub.display.show('Hello World')\nimport time\ntime.sleep(5)\nhub.speaker.beep(72, 0.5)\nhub.display.show('Hello Galaxy')","runtime":"10"}

================== RUNNING CODE ==================
        from spike import PrimeHub

hub = PrimeHub()



hub.speaker.beep(72, 0.5)

hub.display.show('Hello World')

import time

time.sleep(5)

hub.speaker.beep(72, 0.5)

hub.display.show('Hello Galaxy')
==================== END ====================

================== SERIAL OUTPUT ==================
        

>>> from spike import PrimeHub

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ImportError: no module named 'spike'

>>> hub = PrimeHub()

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'PrimeHub' isn't defined

>>> 

>>> hub.speaker.beep(72, 0.5)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

AttributeError: 'module' object has no attribute 'speaker'

>>> hub.display.show('Hello World')

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

AttributeError: 'module' object has no attribute 'display'

>>> import time

>>> time.sleep(5)


==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_RODx0MGYrx3KQ9QNG58rGi26', 'output': '\r\n>>> from spike import PrimeHub\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> hub = PrimeHub()\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'PrimeHub\' isn\'t defined\r\n>>> \r\n>>> hub.speaker.beep(72, 0.5)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'speaker\'\r\n>>> hub.display.show(\'Hello World\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'display\'\r\n>>> import time\r\n>>> time.sleep(5)\r\n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"PrimeHub"}
 - Status: Querying documentation for: primehub
No available information on primehub. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help.
Submitting tool outputs: [{'tool_call_id': 'call_RA0g6XgTFhNi20cdoxeAwobl', 'output': '"No available information on primehub. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"display"}
 - Status: Querying documentation for: display
No available information on display. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help.
Submitting tool outputs: [{'tool_call_id': 'call_CDTlekA3KoVLVS7k2IW9BnWk', 'output': '"No available information on display. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import PrimeHub\nhub = PrimeHub()\n\nhub.light_matrix.show_image('HAPPY')\nimport time\ntime.sleep(5)\nhub.light_matrix.show_image('ASLEEP')","runtime":"10"}

================== RUNNING CODE ==================
        from spike import PrimeHub

hub = PrimeHub()



hub.light_matrix.show_image('HAPPY')

import time

time.sleep(5)

hub.light_matrix.show_image('ASLEEP')
==================== END ====================

================== SERIAL OUTPUT ==================
        from spike import PrimeHub

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ImportError: no module named 'spike'

>>> hub = PrimeHub()

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'PrimeHub' isn't defined

>>> 

>>> hub.light_matrix.show_image('HAPPY')

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

TypeError: can't convert str to int

>>> import time

>>> time.sleep(5)


==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_fWTsgeoc1GSL40ppLdwlLnpM', 'output': 'from spike import PrimeHub\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> hub = PrimeHub()\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'PrimeHub\' isn\'t defined\r\n>>> \r\n>>> hub.light_matrix.show_image(\'HAPPY\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nTypeError: can\'t convert str to int\r\n>>> import time\r\n>>> time.sleep(5)\r\n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"What is the correct import statement and method to display text on the light matrix for the SPIKE Prime in MicroPython?"}
Hey Human, What is the correct import statement and method to display text on the light matrix for the SPIKE Prime in MicroPython?
Submitting tool outputs: [{'tool_call_id': 'call_9ESaG915eQlVLb90VZF4SHuG', 'output': 'no, i mean just print to serial using print("text")'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"print('Hello World')\nimport time\ntime.sleep(5)\nprint('Hello Galaxy')","runtime":"10"}

================== RUNNING CODE ==================
        print('Hello World')

import time

time.sleep(5)

print('Hello Galaxy')
==================== END ====================

================== SERIAL OUTPUT ==================
        print('Hello World')

Hello World

>>> import time

>>> time.sleep(5)


==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_c5oIF1tK8n7J2TQ7ii6CFVM3', 'output': "print('Hello World')\r\nHello World\r\n>>> import time\r\n>>> time.sleep(5)\r\n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: completed
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:10:14

 - Status: THREAD_ID: thread_pivW4gCO23aq8TzxqzPIig7o
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"print('hello world')\nimport time\ntime.sleep(5)\nprint('hello galaxy')","runtime":"10"}

================== RUNNING CODE ==================
        print('hello world')

import time

time.sleep(5)

print('hello galaxy')
==================== END ====================

================== SERIAL OUPUT ==================
 - Status: 

>>> print('hello world')

hello world

>>> import time

>>> time.sleep(5)


 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:12:26

 - Status: THREAD_ID: thread_NulJDJ3xF3udBJv7aWq21pjp
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import time\nprint('hello world')\ntime.sleep(5)\nprint('hello galaxy')","runtime":"10"}

================== RUNNING CODE ==================
        
import time

print('hello world')

time.sleep(5)

print('hello galaxy')
==================== END ====================

================== SERIAL OUPUT ==================
 - Status: >>> print('hello galaxy')

hello galaxy

>>> 

>>> import time

>>> print('hello world')

hello world

>>> time.sleep(5)


 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b">>> print('hello galaxy')\r\nhello galaxy\r\n>>> "
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
 - Status: b''
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_u5Lr3d1sPftyTRphpON8xdlf', 'output': '>>> print(\'hello galaxy\')\r\nhello galaxy\r\n>>> \r\n>>> import time\r\n>>> print(\'hello world\')\r\nhello world\r\n>>> time.sleep(5)\r\n\nb\'\'\nb\'\'\nb\'\'\nb\'\'\nb\'\'\nb\'\'\nb\'\'\nb\'\'\nb\'\'\nb\'\'\nb">>> print(\'hello galaxy\')\\r\\nhello galaxy\\r\\n>>> "\nb\'\'\nb\'\'\nb\'\'\nb\'\'\nb\'\'\nb\'\'\nb\'\'\nb\'\'\nb\'\''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:13:39

 - Status: THREAD_ID: thread_dGyHXOsSR7AwI6jSmuUIFzjE
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import PrimeHub\nhub = PrimeHub()\nhub.speaker.beep(76, 0.1)\nprint('hello world')\nimport time\ntime.sleep(5)\nprint('hello galaxy')","runtime":"10"}

================== RUNNING CODE ==================
        
from spike import PrimeHub

hub = PrimeHub()

hub.speaker.beep(76, 0.1)

print('hello world')

import time

time.sleep(5)

print('hello galaxy')
==================== END ====================

================== SERIAL OUPUT ==================
 - Status: 

>>> from spike import PrimeHub

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ImportError: no module named 'spike'

>>> hub = PrimeHub()

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'PrimeHub' isn't defined

>>> hub.speaker.beep(76, 0.1)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

AttributeError: 'module' object has no attribute 'speaker'

>>> print('hello world')

hello world

>>> import time

>>> time.sleep(5)


 - Status: >>> print('hello galaxy')

hello galaxy

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_dXJnCjrorm5Be9xucNyZahTi', 'output': '\r\n>>> from spike import PrimeHub\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> hub = PrimeHub()\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'PrimeHub\' isn\'t defined\r\n>>> hub.speaker.beep(76, 0.1)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'speaker\'\r\n>>> print(\'hello world\')\r\nhello world\r\n>>> import time\r\n>>> time.sleep(5)\r\n\n>>> print(\'hello galaxy\')\r\nhello galaxy\r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:17:23

 - Status: THREAD_ID: thread_kriogBmVJGFL19EPeNTxEqaD
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import time\nprint(\"hello world\")\ntime.sleep(5)\nprint(\"hello galaxy\")","runtime":"10"}
 - Status: 
================== RUNNING CODE ==================
        
import time

print("hello world")

time.sleep(5)

print("hello galaxy")
==================== END ====================
 - Status: 
================== SERIAL OUPUT ==================
 - Status: import time

>>> print("hello world")

hello world

>>> time.sleep(5)


 - Status: >>> print("hello galaxy")

hello galaxy

>>> 
 - Status: ==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_mBCUAfa30Rbn3crS29YCvPlZ', 'output': 'import time\r\n>>> print("hello world")\r\nhello world\r\n>>> time.sleep(5)\r\n\n>>> print("hello galaxy")\r\nhello galaxy\r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import time\nprint(\"hello world\")\ntime.sleep(5)\nprint(\"hello galaxy\")","runtime":"10"}
 - Status: 
================== RUNNING CODE ==================
        
import time

print("hello world")

time.sleep(5)

print("hello galaxy")
==================== END ====================
 - Status: 
================== SERIAL OUPUT ==================
 - Status: import time

>>> print("hello world")

hello world

>>> time.sleep(5)


 - Status: >>> print("hello galaxy")

hello galaxy

>>> 
 - Status: ==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_rIJdkvrnH9WROozooToKMdpA', 'output': 'import time\r\n>>> print("hello world")\r\nhello world\r\n>>> time.sleep(5)\r\n\n>>> print("hello galaxy")\r\nhello galaxy\r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import ForceSensor\nimport time\nforce_sensor = ForceSensor('C')\nstart_time = time.time()\nwhile time.time() - start_time < 10:\n    print(force_sensor.get_force_newton())\n    time.sleep(1)","runtime":"15"}
 - Status: 
================== RUNNING CODE ==================
        
from spike import ForceSensor

import time

force_sensor = ForceSensor('C')

start_time = time.time()

while time.time() - start_time < 10:

   print(force_sensor.get_force_newton())

   time.sleep(1)
==================== END ====================
 - Status: 
================== SERIAL OUPUT ==================
 - Status: from spike import ForceSensor

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ImportError: no module named 'spike'

>>> import time

>>> force_sensor = ForceSensor('C')

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'ForceSensor' isn't defined

>>> start_time = time.time()

>>> while time.time() - start_time < 10:

...        print(force_sensor.get_force_newton())

...        time.sleep(1)

...     
 - Status: ==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_sD0dGetsPfVuaXbiFfFHAg85', 'output': 'from spike import ForceSensor\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> import time\r\n>>> force_sensor = ForceSensor(\'C\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'ForceSensor\' isn\'t defined\r\n>>> start_time = time.time()\r\n>>> while time.time() - start_time < 10:\r\n...        print(force_sensor.get_force_newton())\r\n...        time.sleep(1)\r\n...     '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"force_sensor"}
 - Status: Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_gGJ2ZyGeM3ZjNOMhgehZcLb6', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port\nimport force_sensor\nimport time\n\nfsensor = force_sensor.force(port.C)\nstart_time = time.time()\nwhile time.time() - start_time < 10:\n    print(fsensor())\n    time.sleep(1)","runtime":"15"}
 - Status: 
================== RUNNING CODE ==================
        
from hub import port

import force_sensor

import time



fsensor = force_sensor.force(port.C)

start_time = time.time()

while time.time() - start_time < 10:

   print(fsensor())

   time.sleep(1)
==================== END ====================
 - Status: 
================== SERIAL OUPUT ==================
 - Status: from hub import port

>>> import force_sensor

>>> import time

>>> 

>>> fsensor = force_sensor.force(port.C)

>>> start_time = time.time()

>>> while time.time() - start_time < 10:

...        print(fsensor())

...        time.sleep(1)

...     
 - Status: ==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_vICj9ObNs2RGI8jOPFDlpWih', 'output': 'from hub import port\r\n>>> import force_sensor\r\n>>> import time\r\n>>> \r\n>>> fsensor = force_sensor.force(port.C)\r\n>>> start_time = time.time()\r\n>>> while time.time() - start_time < 10:\r\n...        print(fsensor())\r\n...        time.sleep(1)\r\n...     '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port\nimport force_sensor\nimport time\n\nfsensor = force_sensor.force(port.C)\nstart_time = time.time()\nwhile time.time() - start_time < 10:\n    print(fsensor())\n    time.sleep(1)\n\n\n","runtime":"15"}
 - Status: 
================== RUNNING CODE ==================
        
from hub import port

import force_sensor

import time



fsensor = force_sensor.force(port.C)

start_time = time.time()

while time.time() - start_time < 10:

   print(fsensor())

   time.sleep(1)






==================== END ====================
 - Status: 
================== SERIAL OUPUT ==================
 - Status: from hub import port

>>> import force_sensor

>>> import time

>>> 

>>> fsensor = force_sensor.force(port.C)

>>> start_time = time.time()

>>> while time.time() - start_time < 10:

...        print(fsensor())

...        time.sleep(1)

...     

...     

... 

Traceback (most recent call last):

  File "<stdin>", line 2, in <module>

TypeError: 'int' object isn't callable

>>> 
 - Status: ==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_3pazJKGARlYaIJUL4HNsiJXw', 'output': 'from hub import port\r\n>>> import force_sensor\r\n>>> import time\r\n>>> \r\n>>> fsensor = force_sensor.force(port.C)\r\n>>> start_time = time.time()\r\n>>> while time.time() - start_time < 10:\r\n...        print(fsensor())\r\n...        time.sleep(1)\r\n...     \r\n...     \r\n... \r\nTraceback (most recent call last):\r\n  File "<stdin>", line 2, in <module>\r\nTypeError: \'int\' object isn\'t callable\r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port\nimport force_sensor\nimport time\n\nsensor_force = force_sensor.force(port.C)\nstart_time = time.time()\nwhile time.time() - start_time < 10:\n    print(sensor_force)\n    time.sleep(1)\n\n\n","runtime":"15"}
 - Status: 
================== RUNNING CODE ==================
        
from hub import port

import force_sensor

import time



sensor_force = force_sensor.force(port.C)

start_time = time.time()

while time.time() - start_time < 10:

   print(sensor_force)

   time.sleep(1)






==================== END ====================
 - Status: 
================== SERIAL OUPUT ==================
 - Status: from hub import port

>>> import force_sensor

>>> import time

>>> 

>>> sensor_force = force_sensor.force(port.C)

>>> start_time = time.time()

>>> while time.time() - start_time < 10:

...        print(sensor_force)

...        time.sleep(1)

...     

...     

... 

0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: ==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_POJPrVm0RQpCvLw4CbCxZwfM', 'output': 'from hub import port\r\n>>> import force_sensor\r\n>>> import time\r\n>>> \r\n>>> sensor_force = force_sensor.force(port.C)\r\n>>> start_time = time.time()\r\n>>> while time.time() - start_time < 10:\r\n...        print(sensor_force)\r\n...        time.sleep(1)\r\n...     \r\n...     \r\n... \r\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port\nimport force_sensor\nimport time\n\nstart_time = time.time()\nwhile time.time() - start_time < 10:\n    print(force_sensor.force(port.C))\n    time.sleep(1)\n\n\n","runtime":"15"}
 - Status: 
================== RUNNING CODE ==================
        
from hub import port

import force_sensor

import time



start_time = time.time()

while time.time() - start_time < 10:

   print(force_sensor.force(port.C))

   time.sleep(1)






==================== END ====================
 - Status: 
================== SERIAL OUPUT ==================
 - Status: from hub import port

>>> import force_sensor

>>> import time

>>> 

>>> start_time = time.time()

>>> while time.time() - start_time < 10:

...        print(force_sensor.force(port.C))

...        time.sleep(1)

...     

...     

... 

0


 - Status: 0


 - Status: 0


 - Status: 25


 - Status: 70


 - Status: 100


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 92


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: 0


 - Status: ==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_fFjDXq6jmACzwjU45vhnjF92', 'output': 'from hub import port\r\n>>> import force_sensor\r\n>>> import time\r\n>>> \r\n>>> start_time = time.time()\r\n>>> while time.time() - start_time < 10:\r\n...        print(force_sensor.force(port.C))\r\n...        time.sleep(1)\r\n...     \r\n...     \r\n... \r\n0\r\n\n0\r\n\n0\r\n\n25\r\n\n70\r\n\n100\r\n\n0\r\n\n0\r\n\n0\r\n\n92\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n\n0\r\n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: completed
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"sound"}
 - Status: Querying documentation for: sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_nlsoUJvZmp0Y0UltR1V0IJI0', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port, sound\nimport force_sensor\nimport time\n\nwhile True:\n    force_value = force_sensor.force(port.C)\n    if force_value > 0:\n        sound.beep(440, 100, force_value)\n    time.sleep(0.1)","runtime":"20"}
 - Status: 
================== RUNNING CODE ==================
        
from hub import port, sound

import force_sensor

import time



while True:

   force_value = force_sensor.force(port.C)

   if force_value > 0:

       sound.beep(440, 100, force_value)

   time.sleep(0.1)
==================== END ====================
 - Status: 
================== SERIAL OUPUT ==================
 - Status: from hub import port, sound

>>> import force_sensor

>>> import time

>>> 

>>> while True:

...        force_value = force_sensor.force(port.C)

...        if force_value > 0:

...                sound.beep(440, 100, force_value)

...                time.sleep(0.1)

...             
 - Status: ==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_nnlJdW7cpbFGCRAqcneCgXKT', 'output': 'from hub import port, sound\r\n>>> import force_sensor\r\n>>> import time\r\n>>> \r\n>>> while True:\r\n...        force_value = force_sensor.force(port.C)\r\n...        if force_value > 0:\r\n...                sound.beep(440, 100, force_value)\r\n...                time.sleep(0.1)\r\n...             '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port, sound\nimport force_sensor\nimport time\n\nwhile True:\n    force_value = force_sensor.force(port.C)\n    if force_value > 0:\n        sound.beep(440, 100, force_value)\n    time.sleep(0.1)\n\n","runtime":"20"}
 - Status: 
================== RUNNING CODE ==================
        
from hub import port, sound

import force_sensor

import time



while True:

   force_value = force_sensor.force(port.C)

   if force_value > 0:

       sound.beep(440, 100, force_value)

   time.sleep(0.1)




==================== END ====================
 - Status: 
================== SERIAL OUPUT ==================
 - Status: from hub import port, sound

>>> import force_sensor

>>> import time

>>> 

>>> while True:

...        force_value = force_sensor.force(port.C)

...        if force_value > 0:

...                sound.beep(440, 100, force_value)

...                time.sleep(0.1)

...             

...             

... 
 - Status: ==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_QoOc677puILxq4JH6JXOaEtw', 'output': 'from hub import port, sound\r\n>>> import force_sensor\r\n>>> import time\r\n>>> \r\n>>> while True:\r\n...        force_value = force_sensor.force(port.C)\r\n...        if force_value > 0:\r\n...                sound.beep(440, 100, force_value)\r\n...                time.sleep(0.1)\r\n...             \r\n...             \r\n... '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port, sound\nimport force_sensor\nimport time\n\nwhile True:\n    force_value = force_sensor.force(port.C)\n    if force_value > 0:\n        sound.beep(440, 100, force_value)\n    time.sleep(0.1)\n\n\n\n\n\n","runtime":"20"}
 - Status: 
================== RUNNING CODE ==================
        
from hub import port, sound

import force_sensor

import time



while True:

   force_value = force_sensor.force(port.C)

   if force_value > 0:

       sound.beep(440, 100, force_value)

   time.sleep(0.1)












==================== END ====================
 - Status: 
================== SERIAL OUPUT ==================
 - Status: from hub import port, sound

>>> import force_sensor

>>> import time

>>> 

>>> while True:

...        force_value = force_sensor.force(port.C)

...        if force_value > 0:

...                sound.beep(440, 100, force_value)

...                time.sleep(0.1)

...             

...             

... 


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: ==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_qArUhknlu1P6BDXjo39oaq84', 'output': 'from hub import port, sound\r\n>>> import force_sensor\r\n>>> import time\r\n>>> \r\n>>> while True:\r\n...        force_value = force_sensor.force(port.C)\r\n...        if force_value > 0:\r\n...                sound.beep(440, 100, force_value)\r\n...                time.sleep(0.1)\r\n...             \r\n...             \r\n... \r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:36:03

 - Status: THREAD_ID: thread_IBgqzkuJmxobDrJZTvaCXMfm
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:38:54

 - Status: THREAD_ID: thread_ID9KTrXhshZzq2XAAudc1Gjd
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query": "force_sensor"}
 - Status: Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
{"query": "sound"}
 - Status: Querying documentation for: sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_875tvCMgnFPZBMFNZANmudYt', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}, {'tool_call_id': 'call_ERHcTudxbwboCMHYtndFV2cp', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"Which port is the force sensor connected to?"}
Hey Human, Which port is the force sensor connected to?
Submitting tool outputs: [{'tool_call_id': 'call_Yn2cysjEYzGliWAX9bTNNXfX', 'output': 'C'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import sound, port\nimport force_sensor\n\nwhile True:\n    force = force_sensor.get_force(port.C)\n    if force > 0:\n        volume = min(max(int(force * 1.5), 1), 100)  # Ensure volume is within [1, 100] range\n        sound.beep(440, 100, volume)\n    else:\n        sound.beep(440, 100, 0)  # No sound","runtime":"10"}

================== RUNNING CODE ==================
        
from hub import sound, port

import force_sensor



while True:

   force = force_sensor.get_force(port.C)

   if force > 0:

       volume = min(max(int(force * 1.5), 1), 100)  # Ensure volume is within [1, 100] range

       sound.beep(440, 100, volume)

   else:

       sound.beep(440, 100, 0)  # No sound
==================== END ====================

================== SERIAL OUPUT ==================

from hub import sound, port

=== 
import force_sensor

=== 


=== 
while True:

=== 
   force = force_sensor.get_force(port.C)

=== 
   if force > 0:

=== 
       volume = min(max(int(force * 1.5), 1), 100)  # Ensure volume is within [1, 100] range

=== 
       sound.beep(440, 100, volume)

=== 
   else:

=== 
       sound.beep(440, 100, 0)  # No sound

=== 

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_q2xVQXdhaeU3FYDEL88pWkZm', 'output': '\nfrom hub import sound, port\r\n=== \nimport force_sensor\r\n=== \n\r\n=== \nwhile True:\r\n=== \n   force = force_sensor.get_force(port.C)\r\n=== \n   if force > 0:\r\n=== \n       volume = min(max(int(force * 1.5), 1), 100)  # Ensure volume is within [1, 100] range\r\n=== \n       sound.beep(440, 100, volume)\r\n=== \n   else:\r\n=== \n       sound.beep(440, 100, 0)  # No sound\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"Did the beep noise play louder depending on how hard the force sensor was pressed, and did it stop making noise when the force sensor was not pressed at all?"}
Hey Human, Did the beep noise play louder depending on how hard the force sensor was pressed, and did it stop making noise when the force sensor was not pressed at all?
Submitting tool outputs: [{'tool_call_id': 'call_b9KsUioPuE7V1USWXqSx3XOb', 'output': "it didn't"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import sound, port\nimport force_sensor\n\nwhile True:\n    force = force_sensor.get_force(port.C)\n    if force > 0:\n        volume = min(max(int(force * 1.5), 1), 100)  # Ensure volume is within [1, 100] range\n        sound.beep(440, 100, volume)\n    hub.sleep(100)  # Added sleep to avoid continuous beeping when not pressed","runtime":"10"}

================== RUNNING CODE ==================
        
from hub import sound, port

import force_sensor



while True:

   force = force_sensor.get_force(port.C)

   if force > 0:

       volume = min(max(int(force * 1.5), 1), 100)  # Ensure volume is within [1, 100] range

       sound.beep(440, 100, volume)

   hub.sleep(100)  # Added sleep to avoid continuous beeping when not pressed
==================== END ====================

================== SERIAL OUPUT ==================
from hub import sound, port

>>> import force_sensor

>>> 

>>> while True:

...        force = force_sensor.get_force(port.C)

...        if force > 0:

...                volume = min(max(int(force * 1.5), 1), 100)  # Ensure volume is within [1, 100] range

...                    sound.beep(440, 100, volume)

...                    hub.sleep(100)  # Added sleep to avoid continuous beeping when not pressed

...                 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_rJHOlQU6o5O1kdh3YzwDVCkp', 'output': 'from hub import sound, port\r\n>>> import force_sensor\r\n>>> \r\n>>> while True:\r\n...        force = force_sensor.get_force(port.C)\r\n...        if force > 0:\r\n...                volume = min(max(int(force * 1.5), 1), 100)  # Ensure volume is within [1, 100] range\r\n...                    sound.beep(440, 100, volume)\r\n...                    hub.sleep(100)  # Added sleep to avoid continuous beeping when not pressed\r\n...                 '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import sound, port\nimport force_sensor\nfrom utime import sleep_ms\n\nwhile True:\n    force = force_sensor.get_force(port.C)\n    if force > 0:\n        volume = min(max(int(force), 1), 100) # Ensure volume is within [1, 100] range\n        sound.beep(440, 100, volume)\n    sleep_ms(100) # Added sleep to throttle checking rate","runtime":"10"}

================== RUNNING CODE ==================
        
from hub import sound, port

import force_sensor

from utime import sleep_ms



while True:

   force = force_sensor.get_force(port.C)

   if force > 0:

       volume = min(max(int(force), 1), 100) # Ensure volume is within [1, 100] range

       sound.beep(440, 100, volume)

   sleep_ms(100) # Added sleep to throttle checking rate
==================== END ====================

================== SERIAL OUPUT ==================
from hub import sound, port

>>> import force_sensor

>>> from utime import sleep_ms

>>> 

>>> while True:

...        force = force_sensor.get_force(port.C)

...        if force > 0:

...                volume = min(max(int(force), 1), 100) # Ensure volume is within [1, 100] range

...                    sound.beep(440, 100, volume)

...                    sleep_ms(100) # Added sleep to throttle checking rate

...                 
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:42:19

 - Status: THREAD_ID: thread_gtcY5Bgq88vgzrLsPelP3dF7
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"motor_pair"}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_egSdW2yUbr0slWWiMmOo34n4', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)","runtime":"5"}

================== RUNNING CODE ==================
        
import motor_pair

from hub import port

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)
==================== END ====================

================== SERIAL OUPUT ==================

import motor_pair

=== 
from hub import port

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)

=== 

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_4QyxOdTaWIshrUjEfeLPeSfq', 'output': '\nimport motor_pair\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"Did the robot move forward successfully?"}
Hey Human, Did the robot move forward successfully?
Submitting tool outputs: [{'tool_call_id': 'call_ZBN7Yip9nxUa9vaDODSyZozg', 'output': 'exit'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:47:46

 - Status: THREAD_ID: thread_kmzwU6JLpVUaKack7dosAO5Z
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"force_sensor"}
 - Status: Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_b7p1kt135b79OPQ0J0qKQodK', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import hub\nimport force_sensor\nfrom hub import port\n\nfor _ in range(10):\n  print(force_sensor.force(port.C))\n  hub.sleep(1000)","runtime":"12"}

================== RUNNING CODE ==================
        
import hub

import force_sensor

from hub import port



for _ in range(10):

 print(force_sensor.force(port.C))

 hub.sleep(1000)
==================== END ====================

================== SERIAL OUPUT ==================

import hub

=== 
import force_sensor

=== 
from hub import port

=== 


=== 
for _ in range(10):

=== 
 print(force_sensor.force(port.C))

=== 
 hub.sleep(1000)

=== 

 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:48:34

 - Status: THREAD_ID: thread_5NxcrdUggUEx6ZRCN6cNfvLJ
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"force_sensor"}
 - Status: Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_3oL3wy9rNMUiAis1oiiVnkOH', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import force_sensor\nfrom hub import port\nimport time\n\nfor _ in range(10):\n  force_value = force_sensor.force(port.C)\n  print(force_value)\n  time.sleep(1)","runtime":"12"}

================== RUNNING CODE ==================
        
import force_sensor

from hub import port

import time



for _ in range(10):

 force_value = force_sensor.force(port.C)

 print(force_value)

 time.sleep(1)
==================== END ====================

================== SERIAL OUPUT ==================

import force_sensor

=== 
from hub import port

=== 
import time

=== 


=== 
for _ in range(10):

=== 
 force_value = force_sensor.force(port.C)

=== 
 print(force_value)

=== 
 time.sleep(1)

=== 

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_m6tPVjbVRlkTDAQ60k6fIFWC', 'output': '\nimport force_sensor\r\n=== \nfrom hub import port\r\n=== \nimport time\r\n=== \n\r\n=== \nfor _ in range(10):\r\n=== \n force_value = force_sensor.force(port.C)\r\n=== \n print(force_value)\r\n=== \n time.sleep(1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:49:14

 - Status: THREAD_ID: thread_9USHUGBhFz0gge4Pit758CGQ
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"force_sensor"}
 - Status: Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_qJjoBCNLbjTYlTk7HRlLDxWk', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import hub\nimport utime\n\nfrom hub import port\nimport force_sensor\n\nfor i in range(10):\n  print(force_sensor.force(port.C))\n  utime.sleep(1)","runtime":"12"}

================== RUNNING CODE ==================
        
import hub

import utime



from hub import port

import force_sensor



for i in range(10):

 print(force_sensor.force(port.C))

 utime.sleep(1)
==================== END ====================

================== SERIAL OUPUT ==================


>>> import hub

>>> import utime

>>> 

>>> from hub import port

>>> import force_sensor

>>> 

>>> for i in range(10):

...      print(force_sensor.force(port.C))

...      utime.sleep(1)

...     
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_WqfKWzkSJSoKIrmjcDkvfbpC', 'output': '\r\n>>> import hub\r\n>>> import utime\r\n>>> \r\n>>> from hub import port\r\n>>> import force_sensor\r\n>>> \r\n>>> for i in range(10):\r\n...      print(force_sensor.force(port.C))\r\n...      utime.sleep(1)\r\n...     '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import hub\nimport utime\n\nfrom hub import port\nimport force_sensor\n\nfor i in range(10):\n  print(force_sensor.force(port.C))\n  utime.sleep(1)\n","runtime":"12"}

================== RUNNING CODE ==================
        
import hub

import utime



from hub import port

import force_sensor



for i in range(10):

 print(force_sensor.force(port.C))

 utime.sleep(1)


==================== END ====================

================== SERIAL OUPUT ==================
import hub

>>> import utime

>>> 

>>> from hub import port

>>> import force_sensor

>>> 

>>> for i in range(10):

...      print(force_sensor.force(port.C))

...      utime.sleep(1)

...     

...     
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_EY9J0s0phmAFSg24jp2m0ZpL', 'output': 'import hub\r\n>>> import utime\r\n>>> \r\n>>> from hub import port\r\n>>> import force_sensor\r\n>>> \r\n>>> for i in range(10):\r\n...      print(force_sensor.force(port.C))\r\n...      utime.sleep(1)\r\n...     \r\n...     '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-02 23:50:16

 - Status: THREAD_ID: thread_WEaTCNjPqFakE3cryifTmqTa
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"force_sensor"}
 - Status: Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_0enXh8HOsunsezLI7zWc9Np3', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import force_sensor\nfrom hub import port\nfrom utime import sleep\n\nfor _ in range(10):\n  print(force_sensor.force(port.C))\n  sleep(1)","runtime":"12"}

================== RUNNING CODE ==================
        

import force_sensor

from hub import port

from utime import sleep



for _ in range(10):

 print(force_sensor.force(port.C))

 sleep(1)




==================== END ====================

================== SERIAL OUPUT ==================


>>> import force_sensor

>>> from hub import port

>>> from utime import sleep

>>> 

>>> for _ in range(10):

...      print(force_sensor.force(port.C))

...      sleep(1)

...     

...     

... 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_4lAjopJDIJyvs6bGtvR2CUMx', 'output': '\r\n>>> import force_sensor\r\n>>> from hub import port\r\n>>> from utime import sleep\r\n>>> \r\n>>> for _ in range(10):\r\n...      print(force_sensor.force(port.C))\r\n...      sleep(1)\r\n...     \r\n...     \r\n... '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 10:35:55

 - Status: THREAD_ID: thread_LWq4ehqFzBEkgleokG570GT7
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"motor_pair"}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_fVDeLS18hDMDgkUmDEI5Ll3Y', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 10:38:01

 - Status: THREAD_ID: thread_wYOCN4j1fDETzNrQ3amQrsHv
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import Motor\n\nmotor_A = Motor('A')\nmotor_B = Motor('B')\n\nmotor_A.start(50)\nmotor_B.start(50)","runtime":"5"}

================== RUNNING CODE ==================
        

from spike import Motor



motor_A = Motor('A')

motor_B = Motor('B')



motor_A.start(50)

motor_B.start(50)




==================== END ====================

================== SERIAL OUPUT ==================


>>> 

>>> from spike import Motor

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ImportError: no module named 'spike'

>>> 

>>> motor_A = Motor('A')

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> motor_B = Motor('B')

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> 

>>> motor_A.start(50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_A' isn't defined

>>> motor_B.start(50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_B' isn't defined

>>> 

>>> 

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_rT7XXFhUQtVb8UtO5jmbSE8C', 'output': '\r\n>>> \r\n>>> from spike import Motor\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> \r\n>>> motor_A = Motor(\'A\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> motor_B = Motor(\'B\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> \r\n>>> motor_A.start(50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_A\' isn\'t defined\r\n>>> motor_B.start(50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_B\' isn\'t defined\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"Motor"}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_CEfdnfpZpAA8MaITTluSdHwd', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import Motor\n\nmotor_A = Motor('A')\nmotor_B = Motor('B')\n\nmotor_A.run_for_degrees(360, 50)\nmotor_B.run_for_degrees(360, 50)","runtime":"5"}

================== RUNNING CODE ==================
        

from spike import Motor



motor_A = Motor('A')

motor_B = Motor('B')



motor_A.run_for_degrees(360, 50)

motor_B.run_for_degrees(360, 50)




==================== END ====================

================== SERIAL OUPUT ==================


>>> from spike import Motor

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ImportError: no module named 'spike'

>>> 

>>> motor_A = Motor('A')

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> motor_B = Motor('B')

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> 

>>> motor_A.run_for_degrees(360, 50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_A' isn't defined

>>> motor_B.run_for_degrees(360, 50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_B' isn't defined

>>> 

>>> 

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ynLZng4DrkVhVggciZLd0QKl', 'output': '\r\n>>> from spike import Motor\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> \r\n>>> motor_A = Motor(\'A\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> motor_B = Motor(\'B\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> \r\n>>> motor_A.run_for_degrees(360, 50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_A\' isn\'t defined\r\n>>> motor_B.run_for_degrees(360, 50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_B\' isn\'t defined\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"port"}
 - Status: Querying documentation for: port
No available information on port. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help.
Submitting tool outputs: [{'tool_call_id': 'call_I3eGf3BVX9Fst7TRM6IvOZWA', 'output': '"No available information on port. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import Motor, port\n\nmotor_A = Motor(port.B)\nmotor_B = Motor(port.C)\n\nmotor_A.run_for_degrees(360, 50)\nmotor_B.run_for_degrees(360, 50)","runtime":"5"}

================== RUNNING CODE ==================
        

from spike import Motor, port



motor_A = Motor(port.B)

motor_B = Motor(port.C)



motor_A.run_for_degrees(360, 50)

motor_B.run_for_degrees(360, 50)




==================== END ====================

================== SERIAL OUPUT ==================


>>> from spike import Motor, port

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ImportError: no module named 'spike'

>>> 

>>> motor_A = Motor(port.B)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> motor_B = Motor(port.C)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> 

>>> motor_A.run_for_degrees(360, 50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_A' isn't defined

>>> motor_B.run_for_degrees(360, 50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_B' isn't defined

>>> 

>>> 

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_PityZ6c7XWljG7w8ReJrMKln', 'output': '\r\n>>> from spike import Motor, port\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> \r\n>>> motor_A = Motor(port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> motor_B = Motor(port.C)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> \r\n>>> motor_A.run_for_degrees(360, 50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_A\' isn\'t defined\r\n>>> motor_B.run_for_degrees(360, 50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_B\' isn\'t defined\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"port"}
 - Status: Querying documentation for: port
No available information on port. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help.
Submitting tool outputs: [{'tool_call_id': 'call_oKhb4aO9YxkM9QDkhER7HrGq', 'output': '"No available information on port. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"port.B"}
 - Status: Querying documentation for: port.b
No available information on port.b. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help.
Submitting tool outputs: [{'tool_call_id': 'call_qUdoChGPvRVvQDFrMb0jvMuL', 'output': '"No available information on port.b. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import Motor, Port\n\nmotor_A = Motor(Port.B)\nmotor_B = Motor(Port.C)\n\nmotor_A.run_for_degrees(360, 50)\nmotor_B.run_for_degrees(360, 50)","runtime":"5"}

================== RUNNING CODE ==================
        

from spike import Motor, Port



motor_A = Motor(Port.B)

motor_B = Motor(Port.C)



motor_A.run_for_degrees(360, 50)

motor_B.run_for_degrees(360, 50)




==================== END ====================

================== SERIAL OUPUT ==================


>>> from spike import Motor, Port

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ImportError: no module named 'spike'

>>> 

>>> motor_A = Motor(Port.B)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> motor_B = Motor(Port.C)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> 

>>> motor_A.run_for_degrees(360, 50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_A' isn't defined

>>> motor_B.run_for_degrees(360, 50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_B' isn't defined

>>> 

>>> 

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_tQq6j3fZFYm4XuXxbLku9fKq', 'output': '\r\n>>> from spike import Motor, Port\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> \r\n>>> motor_A = Motor(Port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> motor_B = Motor(Port.C)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> \r\n>>> motor_A.run_for_degrees(360, 50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_A\' isn\'t defined\r\n>>> motor_B.run_for_degrees(360, 50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_B\' isn\'t defined\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"Motor"}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_mPIexCfxbKG7iTql8YZr6x0o', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import Motor, Port\n\nmotor_A = Motor(Port.B)\nmotor_B = Motor(Port.C)\n\nmotor_A.run_for_degrees(360, 50)\nmotor_B.run_for_degrees(360, 50)","runtime":"5"}

================== RUNNING CODE ==================
        

from spike import Motor, Port



motor_A = Motor(Port.B)

motor_B = Motor(Port.C)



motor_A.run_for_degrees(360, 50)

motor_B.run_for_degrees(360, 50)




==================== END ====================

================== SERIAL OUPUT ==================


>>> from spike import Motor, Port

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ImportError: no module named 'spike'

>>> 

>>> motor_A = Motor(Port.B)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> motor_B = Motor(Port.C)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> 

>>> motor_A.run_for_degrees(360, 50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_A' isn't defined

>>> motor_B.run_for_degrees(360, 50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_B' isn't defined

>>> 

>>> 

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_LctgYWpUoUh0SameVAYFRFrP', 'output': '\r\n>>> from spike import Motor, Port\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> \r\n>>> motor_A = Motor(Port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> motor_B = Motor(Port.C)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> \r\n>>> motor_A.run_for_degrees(360, 50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_A\' isn\'t defined\r\n>>> motor_B.run_for_degrees(360, 50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_B\' isn\'t defined\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"Motor"}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_ar9jvQ3O2z3yimn9lu2ijcDd', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import Motor, Port\n\nmotor_A = Motor(Port.B)\nmotor_B = Motor(Port.C)\n\nmotor_A.run_for_degrees(360, 50)\nmotor_B.run_for_degrees(360, 50)","runtime":"5"}

================== RUNNING CODE ==================
        

from spike import Motor, Port



motor_A = Motor(Port.B)

motor_B = Motor(Port.C)



motor_A.run_for_degrees(360, 50)

motor_B.run_for_degrees(360, 50)




==================== END ====================

================== SERIAL OUPUT ==================


>>> from spike import Motor, Port

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ImportError: no module named 'spike'

>>> 

>>> motor_A = Motor(Port.B)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> motor_B = Motor(Port.C)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> 

>>> motor_A.run_for_degrees(360, 50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_A' isn't defined

>>> motor_B.run_for_degrees(360, 50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_B' isn't defined

>>> 

>>> 

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_aDFQbfAyIo6otCjnKMCNRjCt', 'output': '\r\n>>> from spike import Motor, Port\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> \r\n>>> motor_A = Motor(Port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> motor_B = Motor(Port.C)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> \r\n>>> motor_A.run_for_degrees(360, 50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_A\' isn\'t defined\r\n>>> motor_B.run_for_degrees(360, 50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_B\' isn\'t defined\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import Motor\n\nmotor_A = Motor('A')\nmotor_B = Motor('B')\n\nmotor_A.run_for_degrees(360, 50)\nmotor_B.run_for_degrees(360, 50)","runtime":"5"}

================== RUNNING CODE ==================
        

from spike import Motor



motor_A = Motor('A')

motor_B = Motor('B')



motor_A.run_for_degrees(360, 50)

motor_B.run_for_degrees(360, 50)




==================== END ====================

================== SERIAL OUPUT ==================


>>> from spike import Motor

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ImportError: no module named 'spike'

>>> 

>>> motor_A = Motor('A')

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> motor_B = Motor('B')

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'Motor' isn't defined

>>> 

>>> motor_A.run_for_degrees(360, 50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_A' isn't defined

>>> motor_B.run_for_degrees(360, 50)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

NameError: name 'motor_B' isn't defined

>>> 

>>> 

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_YIpKlLSSHNqAUurNUn3SdHVs', 'output': '\r\n>>> from spike import Motor\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> \r\n>>> motor_A = Motor(\'A\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> motor_B = Motor(\'B\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'Motor\' isn\'t defined\r\n>>> \r\n>>> motor_A.run_for_degrees(360, 50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_A\' isn\'t defined\r\n>>> motor_B.run_for_degrees(360, 50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'motor_B\' isn\'t defined\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"movement","image_num":"3","interval":"1"}
 - Status: Getting visual feedback for: movement
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, I cannot assist with this request.
Submitting tool outputs: [{'tool_call_id': 'call_Ealz9GaMViuylRC5aKNSPFF4', 'output': '"I\'m sorry, I cannot assist with this request."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"Please verify the issue with running the code to move the bot forward. Specifically, check if the motors are functioning properly."}
Hey Human, Please verify the issue with running the code to move the bot forward. Specifically, check if the motors are functioning properly.
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 10:49:32

 - Status: THREAD_ID: thread_KEGnLeaG6dF6lkuzaSQpp2Bz
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"motor_pair"}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_2n2n320hbtxjMKTrhjRtrATc', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 10:55:39

 - Status: THREAD_ID: thread_yldHgfVzfHKnptVZ9k7xZWLH
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"Inspect the movement of the robot","image_num":"3","interval":"1"}
 - Status: Getting visual feedback for: inspect the movement of the robot
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, I can't provide real-time analysis or commentary on sequential events or movements that occur in images since my capabilities are based on static information available up until April 2023, and I can't view or interpret changes across multiple images. However, if you're looking to analyze the movement of an object across multiple images, you'd generally compare the positions of the object in question within each frame and note any differences. If you're referring to a specific object in the image, please point it out, and I can help you understand how you might analyze such movement in a general sense.
Submitting tool outputs: [{'tool_call_id': 'call_gr6bJNZ3n3z36zUneKWiXlpu', 'output': '"I\'m sorry, I can\'t provide real-time analysis or commentary on sequential events or movements that occur in images since my capabilities are based on static information available up until April 2023, and I can\'t view or interpret changes across multiple images. However, if you\'re looking to analyze the movement of an object across multiple images, you\'d generally compare the positions of the object in question within each frame and note any differences. If you\'re referring to a specific object in the image, please point it out, and I can help you understand how you might analyze such movement in a general sense."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import Motor\n\ndef move_forward(speed_percent):\n    motor_A = Motor('A')\n    motor_B = Motor('B')\n    \n    motor_A.start(speed_percent)\n    motor_B.start(speed_percent)\n    \nmove_forward(50)","runtime":"10"}

================== RUNNING CODE ==================
        

from spike import Motor



def move_forward(speed_percent):

   motor_A = Motor('A')

   motor_B = Motor('B')

   

   motor_A.start(speed_percent)

   motor_B.start(speed_percent)

   

move_forward(50)




==================== END ====================

================== SERIAL OUPUT ==================


>>> 

>>> from spike import Motor

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ImportError: no module named 'spike'

>>> 

>>> def move_forward(speed_percent):

...        motor_A = Motor('A')

...        motor_B = Motor('B')

...        

...        motor_A.start(speed_percent)

...        motor_B.start(speed_percent)

...        

...     move_forward(50)

...     

...     

... 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_AwvGMr7eFBkWUjX4QukrFEMN', 'output': '\r\n>>> \r\n>>> from spike import Motor\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> \r\n>>> def move_forward(speed_percent):\r\n...        motor_A = Motor(\'A\')\r\n...        motor_B = Motor(\'B\')\r\n...        \r\n...        motor_A.start(speed_percent)\r\n...        motor_B.start(speed_percent)\r\n...        \r\n...     move_forward(50)\r\n...     \r\n...     \r\n... '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"I encountered an error with the Motor import. Can you provide guidance on the correct way to import and use the Motor class in MicroPython for SPIKE Prime?"}
Hey Human, I encountered an error with the Motor import. Can you provide guidance on the correct way to import and use the Motor class in MicroPython for SPIKE Prime?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 11:08:08

 - Status: THREAD_ID: thread_5wIknnQYUS2APzX4ZwWBxZkv
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 11:21:37

 - Status: THREAD_ID: thread_dUJNV2HawoTCMurSS2C5VTCi
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"What ports are the motors for driving connected to?"}
Hey Human, What ports are the motors for driving connected to?
Submitting tool outputs: [{'tool_call_id': 'call_udoSbS2DfhUvRY3PPtL0KKWH', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "from spike import MotorPair\nmotor_pair = MotorPair('A', 'B')\nmotor_pair.start(50)", "runtime": "3"}

================== RUNNING CODE ==================
        
from spike import MotorPair
motor_pair = MotorPair('A', 'B')
motor_pair.start(50)


==================== END ====================

================== SERIAL OUPUT ==================

>>> 
>>> from spike import MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> motor_pair = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motor_pair.start(50)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'start'
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
{"query": "if the robot is moving forward", "image_num": "3", "interval": "1"}
 - Status: Getting visual feedback for: if the robot is moving forward
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code
 - Status: Say cheese!
 - Status: Sent photos
 - Status: The images show a close-up of a tabletop with a robotic device featuring colorful components, wheels, and cables. The code snippet provided appears to be for controlling the movement of the robot using a pair of motors connected to ports 'A' and 'B'. However, given that the images are static and identical, they don't provide any information about the robot's movement or changes in its position over time. To observe the effects of the code, one would need to run the robot and see it in motion, or have a series of images showing the robot at different stages of its movement path. If you are attempting to demonstrate the robot's movement with the given code, you might want to capture images showing the robot at different locations or take a video instead.
Submitting tool outputs: [{'tool_call_id': 'call_fizlgvM7Hlz2uqGeENF1H873', 'output': '\r\n>>> \r\n>>> from spike import MotorPair\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> motor_pair = MotorPair(\'A\', \'B\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'MotorPair\' isn\'t defined\r\n>>> motor_pair.start(50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'start\'\r\n>>> \r\n>>> \r\n>>> '}, {'tool_call_id': 'call_XsuvM61qD8o6lVV7MtFA7qkv', 'output': '"The images show a close-up of a tabletop with a robotic device featuring colorful components, wheels, and cables. The code snippet provided appears to be for controlling the movement of the robot using a pair of motors connected to ports \'A\' and \'B\'. However, given that the images are static and identical, they don\'t provide any information about the robot\'s movement or changes in its position over time. To observe the effects of the code, one would need to run the robot and see it in motion, or have a series of images showing the robot at different stages of its movement path. If you are attempting to demonstrate the robot\'s movement with the given code, you might want to capture images showing the robot at different locations or take a video instead."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "from spike_prime import MotorPair\nmotor_pair = MotorPair('A', 'B')\nmotor_pair.start(50)\n", "runtime": "3"}

================== RUNNING CODE ==================
        
from spike_prime import MotorPair
motor_pair = MotorPair('A', 'B')
motor_pair.start(50)



==================== END ====================

================== SERIAL OUPUT ==================

Traceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>>> from spike_prime import MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike_prime'
>>> motor_pair = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motor_pair.start(50)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'start'
>>> 
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
{"query": "if the robot is moving forward", "image_num": "3", "interval": "1"}
 - Status: Getting visual feedback for: if the robot is moving forward
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code
 - Status: Say cheese!
 - Status: Sent photos
 - Status: It appears that you’ve shared three images of a robotic device on a wooden surface. The images all seem to be identical, indicating that either the robot did not move between the shots or the movement was too subtle to notice a difference within the one-second intervals.

Based on the code snippet you provided, it seems you are using the LEGO SPIKE Prime robotics platform, which is often used for education and hobbyist robotics projects. This platform typically includes programmable hubs, motors, sensors, and LEGO building elements.

The code snippet is written in Python and shows the initialization of a `MotorPair` object using ports 'A' and 'B', which likely corresponds to two motors on the robot. The `motor_pair.start(50)` command is supposed to start the motors at a speed value of 50, which suggests the intent for the robot to move.

If the robot did not move as expected between the shots, you may want to check that the motors are connected properly to the ports specified in the code, ensure that the hub is powered on, and that there is nothing obstructing the robot's movement. Additionally, ensure that the code is actually being run on the robot's control hub. If you continue to face issues, troubleshooting steps may include inspecting the hardware setup, checking battery levels, or verifying the software and firmware versions are up to date.
Submitting tool outputs: [{'tool_call_id': 'call_N7vIvmc5mn2Nop3fQYAasDn4', 'output': '\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1\r\nSyntaxError: invalid syntax\r\n>>> from spike_prime import MotorPair\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike_prime\'\r\n>>> motor_pair = MotorPair(\'A\', \'B\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'MotorPair\' isn\'t defined\r\n>>> motor_pair.start(50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'start\'\r\n>>> \r\n>>> \r\n>>> \r\n>>> '}, {'tool_call_id': 'call_Kk5WRgYCbDjftDyduyVc8UT8', 'output': '"It appears that you\\u2019ve shared three images of a robotic device on a wooden surface. The images all seem to be identical, indicating that either the robot did not move between the shots or the movement was too subtle to notice a difference within the one-second intervals.\\n\\nBased on the code snippet you provided, it seems you are using the LEGO SPIKE Prime robotics platform, which is often used for education and hobbyist robotics projects. This platform typically includes programmable hubs, motors, sensors, and LEGO building elements.\\n\\nThe code snippet is written in Python and shows the initialization of a `MotorPair` object using ports \'A\' and \'B\', which likely corresponds to two motors on the robot. The `motor_pair.start(50)` command is supposed to start the motors at a speed value of 50, which suggests the intent for the robot to move.\\n\\nIf the robot did not move as expected between the shots, you may want to check that the motors are connected properly to the ports specified in the code, ensure that the hub is powered on, and that there is nothing obstructing the robot\'s movement. Additionally, ensure that the code is actually being run on the robot\'s control hub. If you continue to face issues, troubleshooting steps may include inspecting the hardware setup, checking battery levels, or verifying the software and firmware versions are up to date."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"motor_pair"}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_TxCqpi3rKUBrFpNXpablJ5hU', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=50)", "runtime": "3"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=50)


==================== END ====================

================== SERIAL OUPUT ==================

Traceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=50)
<awaitable>
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
{"query": "if the robot is moving forward", "image_num": "3", "interval": "1"}
 - Status: Getting visual feedback for: if the robot is moving forward
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code
 - Status: Say cheese!
 - Status: Sent photos
 - Status: It seems you've shared three images that look identical, each showing an educational robotics kit, possibly a LEGO or similar brand, configured with various sensors, motors, and wires. These images were likely meant to show the robot in action, possibly executing the code provided. However, there is no discernible movement between the images, making them appear static and indistinguishable from one another.

The code snippet you've shared is written in a Python-like syntax and appears to be for programming a pair of motors connected to ports A and B on a robotics hub. It's intended to move the paired motors for 3000 milliseconds (or 3 seconds) at a velocity setting of 50, with '0' suggesting straight line motion rather than turning.

If the intent was to capture the robot's movement caused by this code, the images do not reflect any changes in the robot's position, implying that either the robot did not move in the time between the images taken or the motion is too subtle to be detected within the 1-second intervals of the snapshot sequence.
Submitting tool outputs: [{'tool_call_id': 'call_1cqQ6KZdKp20SAFcJ7FL3hfo', 'output': '\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1\r\nSyntaxError: invalid syntax\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=50)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}, {'tool_call_id': 'call_0qPvN4LkCVOG6cceWzfFM4to', 'output': '"It seems you\'ve shared three images that look identical, each showing an educational robotics kit, possibly a LEGO or similar brand, configured with various sensors, motors, and wires. These images were likely meant to show the robot in action, possibly executing the code provided. However, there is no discernible movement between the images, making them appear static and indistinguishable from one another.\\n\\nThe code snippet you\'ve shared is written in a Python-like syntax and appears to be for programming a pair of motors connected to ports A and B on a robotics hub. It\'s intended to move the paired motors for 3000 milliseconds (or 3 seconds) at a velocity setting of 50, with \'0\' suggesting straight line motion rather than turning.\\n\\nIf the intent was to capture the robot\'s movement caused by this code, the images do not reflect any changes in the robot\'s position, implying that either the robot did not move in the time between the images taken or the motion is too subtle to be detected within the 1-second intervals of the snapshot sequence."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=50)","runtime":"3"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=50)


==================== END ====================

================== SERIAL OUPUT ==================

Traceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=50)
<awaitable>
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_WNV1lEUt9BC6ECTnHLg3fUkE', 'output': '\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1\r\nSyntaxError: invalid syntax\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=50)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"motor"}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_Vo3QYP0Q0W5EL6PmXgHMQLg6', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor\nfrom hub import port\nmotor.run_for_degrees(port.A, 720, 50)\nmotor.run_for_degrees(port.B, 720, 50)","runtime":"5"}

================== RUNNING CODE ==================
        
import motor
from hub import port
motor.run_for_degrees(port.A, 720, 50)
motor.run_for_degrees(port.B, 720, 50)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor
>>> from hub import port
>>> motor.run_for_degrees(port.A, 720, 50)
<awaitable>
>>> motor.run_for_degrees(port.B, 720, 50)
<awaitable>
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_z6ydxnNNwBga4XDhK0lhCOIc', 'output': '\r\n>>> import motor\r\n>>> from hub import port\r\n>>> motor.run_for_degrees(port.A, 720, 50)\r\n<awaitable>\r\n>>> motor.run_for_degrees(port.B, 720, 50)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"if the robot has moved forward","image_num":"3","interval":"1"}
 - Status: Getting visual feedback for: if the robot has moved forward
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code
 - Status: Say cheese!
 - Status: Sent photos
 - Status: It appears that you've shared three photos that look almost identical, suggesting they were taken in quick succession, possibly about a second apart as you mentioned. The images feature a cluttered arrangement of power strips and various cords on a wooden surface. There are no notable differences between the images, which implies that there was no movement or change in the scene during the short time interval between each shot.
Submitting tool outputs: [{'tool_call_id': 'call_Hg19jDzl9MECTseMXtcOagkn', 'output': '"It appears that you\'ve shared three photos that look almost identical, suggesting they were taken in quick succession, possibly about a second apart as you mentioned. The images feature a cluttered arrangement of power strips and various cords on a wooden surface. There are no notable differences between the images, which implies that there was no movement or change in the scene during the short time interval between each shot."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 11:27:52

 - Status: THREAD_ID: thread_td59ed5O2eVM9BDljgYvkUbl
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"Which ports are connected to the driving motors of the robot?"}
Hey Human, Which ports are connected to the driving motors of the robot?
Submitting tool outputs: [{'tool_call_id': 'call_yqCc2Z20QErX2Z5d3QlItDjK', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"motor_pair"}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_s9T45ktaF2K6CPlcoLxNAKLC', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)","runtime":"3"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)


==================== END ====================

================== SERIAL OUPUT ==================

>>> 
>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)
<awaitable>
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_xBmSgcsUcxhKu4cL0mynVGdh', 'output': '\r\n>>> \r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"Did the robot move forward?","image_num":"2","interval":"1"}
 - Status: Getting visual feedback for: did the robot move forward?
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: Did the robot move forward?
REPL response: Did the robot move forward?
Traceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: The two images you have provided appear to be identical. They show a desk with various items, including a power strip with multiple plug adapters connected, a laptop charger, and other cables. The images seem to be taken from the same angle with just seconds apart, as you mentioned, and no noticeable differences can be discerned from these images. If there is a specific detail or aspect of the images you would like to discuss or inquire about, please let me know!
Submitting tool outputs: [{'tool_call_id': 'call_RAHbRHuqs3ESxvT2E8DuHXqp', 'output': '"The two images you have provided appear to be identical. They show a desk with various items, including a power strip with multiple plug adapters connected, a laptop charger, and other cables. The images seem to be taken from the same angle with just seconds apart, as you mentioned, and no noticeable differences can be discerned from these images. If there is a specific detail or aspect of the images you would like to discuss or inquire about, please let me know!"'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 11:29:18

 - Status: THREAD_ID: thread_FZhipInlZTItd3Xlx9vZMFqy
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 11:29:33

 - Status: THREAD_ID: thread_ZZGr0fKNbHzSNJTzJsaFUApp
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"Please let me know which motor is connected to port A and which one is connected to port B. Are they both used for movement?"}
Hey Human, Please let me know which motor is connected to port A and which one is connected to port B. Are they both used for movement?
Submitting tool outputs: [{'tool_call_id': 'call_TzoGWnqC9UPh3yPt6O3JHXpF', 'output': 'yes they are both for movement, the left motor is a and the right motor is b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "from spike import MotorPair\nmotor_pair = MotorPair('A', 'B')\nmotor_pair.start(50)\n", "runtime": "5"}

================== RUNNING CODE ==================
        
from spike import MotorPair
motor_pair = MotorPair('A', 'B')
motor_pair.start(50)



==================== END ====================

================== SERIAL OUPUT ==================

>>> 
>>> from spike import MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> motor_pair = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motor_pair.start(50)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'start'
>>> 
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
{"query": "Is the robot moving forward?", "image_num": "2", "interval": "2"}
 - Status: Getting visual feedback for: is the robot moving forward?
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
from spike import MotorPair
motor_pair = MotorPair('A', 'B')
motor_pair.start(50)



REPL response: 
>>> from spike import MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> motor_pair = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motor_pair.start(50)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'start'
>>> 
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, I cannot assist with these requests.
Submitting tool outputs: [{'tool_call_id': 'call_CvrsKw09N3k0JrIl8tvfkgKD', 'output': '\r\n>>> \r\n>>> from spike import MotorPair\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> motor_pair = MotorPair(\'A\', \'B\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'MotorPair\' isn\'t defined\r\n>>> motor_pair.start(50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'start\'\r\n>>> \r\n>>> \r\n>>> \r\n>>> '}, {'tool_call_id': 'call_2HjiEgevSd78LUhJSPSnmQdj', 'output': '"I\'m sorry, I cannot assist with these requests."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"motor_pair"}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_rACCOZ4uwSxQTi3WIWBnV8AP', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=100)\n", "runtime": "3"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=100)



==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=100)
<awaitable>
>>> 
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
{"query": "Is the robot moving forward?", "image_num": "2", "interval": "1.5"}
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 11:32:53

 - Status: THREAD_ID: thread_GvrhW3hDSJ4opfBbnHRygXsN
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "from spike import MotorPair\nmotor_pair = MotorPair('A', 'B')\nmotor_pair.start(50, 0)", "runtime": "3"}

================== RUNNING CODE ==================
        
from spike import MotorPair
motor_pair = MotorPair('A', 'B')
motor_pair.start(50, 0)


==================== END ====================

================== SERIAL OUPUT ==================

>>> 
>>> from spike import MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> motor_pair = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motor_pair.start(50, 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'start'
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
{"query": "if the robot is moving forward", "image_num": "2", "interval": "1.5"}
 - Status: Getting visual feedback for: if the robot is moving forward
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
from spike import MotorPair
motor_pair = MotorPair('A', 'B')
motor_pair.start(50, 0)


REPL response: 
>>> from spike import MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> motor_pair = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motor_pair.start(50, 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'start'
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, I cannot assist with these requests.
Submitting tool outputs: [{'tool_call_id': 'call_qzzvMGpqBzCmiDP1c1Xh5h6O', 'output': '\r\n>>> \r\n>>> from spike import MotorPair\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> motor_pair = MotorPair(\'A\', \'B\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'MotorPair\' isn\'t defined\r\n>>> motor_pair.start(50, 0)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'start\'\r\n>>> \r\n>>> \r\n>>> '}, {'tool_call_id': 'call_jAqdzJOW7HtLhnbDw4bbyUjX', 'output': '"I\'m sorry, I cannot assist with these requests."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"motor_pair"}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_6WruQ35aRkVkeXFNMooJGgmC', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "import motor_pair \n from hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=200)", "runtime": "3"}

================== RUNNING CODE ==================
        
import motor_pair 
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=200)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair 
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=200)
<awaitable>
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
{"query": "if the robot is moving forward", "image_num": "2", "interval": "1.5"}
 - Status: Getting visual feedback for: if the robot is moving forward
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor_pair 
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=200)


REPL response: 
>>> import motor_pair 
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=200)
<awaitable>
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: It appears that the robot has moved forward between the two images. The positioning of the robot and the cable layout in the second image suggests that it has advanced slightly relative to its position in the first image. However, without additional context like markers or a reference point in both photos, it is impossible to provide an exact measure of the distance moved. The difference in the cable positions around the robot can give an indication that the robot has indeed moved.
Submitting tool outputs: [{'tool_call_id': 'call_1xRBcm2TZcZyseZMW4yYI3tD', 'output': '\r\n>>> import motor_pair \r\n>>> from hub import port\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_1, 3000, 0, velocity=200)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}, {'tool_call_id': 'call_4cLnWGYGjyQ8tC6XzpQNKfna', 'output': '"It appears that the robot has moved forward between the two images. The positioning of the robot and the cable layout in the second image suggests that it has advanced slightly relative to its position in the first image. However, without additional context like markers or a reference point in both photos, it is impossible to provide an exact measure of the distance moved. The difference in the cable positions around the robot can give an indication that the robot has indeed moved."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: completed
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "import motor_pair\nfrom hub import port\nimport force\nforce_sensor = force.Force(port.C)\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Continuously move forward until the force sensor is activated\nwhile force_sensor.get_force_newton() < 10:\n    motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\n", "runtime": "10"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
import force
force_sensor = force.Force(port.C)
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Continuously move forward until the force sensor is activated
while force_sensor.get_force_newton() < 10:
   motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)



==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> import force
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'force'
>>> force_sensor = force.Force(port.C)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'force' isn't defined
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> 
>>> # Continuously move forward until the force sensor is activated
>>> while force_sensor.get_force_newton() < 10:
...        motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
...     
...     
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: name 'force_sensor' isn't defined
>>> 
==================== END ====================
 - Status: Program ended
{"query": "if the robot moves and stops after bumping into something", "image_num": "5", "interval": "2"}
 - Status: Getting visual feedback for: if the robot moves and stops after bumping into something
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor_pair
from hub import port
import force
force_sensor = force.Force(port.C)
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Continuously move forward until the force sensor is activated
while force_sensor.get_force_newton() < 10:
   motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)



REPL response: 
>>> import motor_pair
>>> from hub import port
>>> import force
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'force'
>>> force_sensor = force.Force(port.C)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'force' isn't defined
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> 
>>> # Continuously move forward until the force sensor is activated
>>> while force_sensor.get_force_newton() < 10:
...        motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
...     
...     
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: name 'force_sensor' isn't defined
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, but I cannot assist with this request as the images provided are identical and do not show any movement or change in position over time. If you want to analyze the movement of a robot or any other object, you'll need to provide a sequence of images where changes in position are visible between the frames.
Submitting tool outputs: [{'tool_call_id': 'call_W4gfSbwvn6asvh0WKNdom6Lb', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> import force\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'force\'\r\n>>> force_sensor = force.Force(port.C)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'force\' isn\'t defined\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> \r\n>>> # Continuously move forward until the force sensor is activated\r\n>>> while force_sensor.get_force_newton() < 10:\r\n...        motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\r\n...     \r\n...     \r\n... \r\nTraceback (most recent call last):\r\n  File "<stdin>", line 2, in <module>\r\nNameError: name \'force_sensor\' isn\'t defined\r\n>>> '}, {'tool_call_id': 'call_QppjMYszVV4UmJR4djij8Xkm', 'output': '"I\'m sorry, but I cannot assist with this request as the images provided are identical and do not show any movement or change in position over time. If you want to analyze the movement of a robot or any other object, you\'ll need to provide a sequence of images where changes in position are visible between the frames."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"force_sensor"}
 - Status: Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_nSlbk40zX9QN4caayF4xUgdc', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "import motor_pair\nfrom hub import port\nimport force_sensor\n\nsensor = force_sensor.force(port.C)\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Continuously move forward until the force sensor is activated\nwhile not force_sensor.pressed(port.C):\n    motor_pair.move_for_time(motor_pair.PAIR_1, 100, 0, velocity=200)", "runtime": "10"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
import force_sensor

sensor = force_sensor.force(port.C)
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Continuously move forward until the force sensor is activated
while not force_sensor.pressed(port.C):
   motor_pair.move_for_time(motor_pair.PAIR_1, 100, 0, velocity=200)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> import force_sensor
>>> 
>>> sensor = force_sensor.force(port.C)
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> 
>>> # Continuously move forward until the force sensor is activated
>>> while not force_sensor.pressed(port.C):
...        motor_pair.move_for_time(motor_pair.PAIR_1, 100, 0, velocity=200)
...     
...     
... 
==================== END ====================
 - Status: Program ended
{"query": "if the robot moves and stops after bumping into something", "image_num": "5", "interval": "2"}
 - Status: Getting visual feedback for: if the robot moves and stops after bumping into something
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor_pair
from hub import port
import force_sensor

sensor = force_sensor.force(port.C)
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Continuously move forward until the force sensor is activated
while not force_sensor.pressed(port.C):
   motor_pair.move_for_time(motor_pair.PAIR_1, 100, 0, velocity=200)


REPL response: 
>>> import motor_pair
>>> from hub import port
>>> import force_sensor
>>> 
>>> sensor = force_sensor.force(port.C)
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> 
>>> # Continuously move forward until the force sensor is activated
>>> while not force_sensor.pressed(port.C):
...        motor_pair.move_for_time(motor_pair.PAIR_1, 100, 0, velocity=200)
...     
...     
... 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, but I'm not able to provide assistance as the content you've provided does not contain enough details or context for me to provide a meaningful answer. If you need information or help regarding a specific topic or question related to the images or the robot you've mentioned, please provide more details so I can assist you better.
Submitting tool outputs: [{'tool_call_id': 'call_9efh0Wp8mVP8eO0mfiNDoy5i', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> import force_sensor\r\n>>> \r\n>>> sensor = force_sensor.force(port.C)\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> \r\n>>> # Continuously move forward until the force sensor is activated\r\n>>> while not force_sensor.pressed(port.C):\r\n...        motor_pair.move_for_time(motor_pair.PAIR_1, 100, 0, velocity=200)\r\n...     \r\n...     \r\n... '}, {'tool_call_id': 'call_tvEE8qvTcwwhu15vnF6XcROM', 'output': '"I\'m sorry, but I\'m not able to provide assistance as the content you\'ve provided does not contain enough details or context for me to provide a meaningful answer. If you need information or help regarding a specific topic or question related to the images or the robot you\'ve mentioned, please provide more details so I can assist you better."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port\nimport force_sensor\nimport motor_pair\n\n# Initialize the force sensor and motor pair\nsensor = force_sensor.force(port.C)\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Continuously move forward until the force sensor is activated\nwhile not force_sensor.pressed(port.C):\n    motor_pair.move_for_time(motor_pair.PAIR_1, 100, 0, velocity=200)\n","runtime":"10"}

================== RUNNING CODE ==================
        
from hub import port
import force_sensor
import motor_pair

# Initialize the force sensor and motor pair
sensor = force_sensor.force(port.C)
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Continuously move forward until the force sensor is activated
while not force_sensor.pressed(port.C):
   motor_pair.move_for_time(motor_pair.PAIR_1, 100, 0, velocity=200)



==================== END ====================

================== SERIAL OUPUT ==================

<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
>>> from hub import port
>>> import force_sensor
>>> import motor_pair
>>> 
>>> # Initialize the force sensor and motor pair
>>> sensor = force_sensor.force(port.C)
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> 
>>> # Continuously move forward until the force sensor is activated
>>> while not force_sensor.pressed(port.C):
...        motor_pair.move_for_time(motor_pair.PAIR_1, 100, 0, velocity=200)
...     
...     
... 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Ly8NbxZRBEedBPeOagmUOK7F', 'output': '\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n>>> from hub import port\r\n>>> import force_sensor\r\n>>> import motor_pair\r\n>>> \r\n>>> # Initialize the force sensor and motor pair\r\n>>> sensor = force_sensor.force(port.C)\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> \r\n>>> # Continuously move forward until the force sensor is activated\r\n>>> while not force_sensor.pressed(port.C):\r\n...        motor_pair.move_for_time(motor_pair.PAIR_1, 100, 0, velocity=200)\r\n...     \r\n...     \r\n... \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"if the robot moves and stops after bumping into something","image_num":"5","interval":"2"}
 - Status: Getting visual feedback for: if the robot moves and stops after bumping into something
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
REPL response: 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, I cannot assist with that request.
Submitting tool outputs: [{'tool_call_id': 'call_QlZX7x8Ee8neRqdvbAUq9Vsj', 'output': '"I\'m sorry, I cannot assist with that request."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: completed
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 11:41:38

 - Status: THREAD_ID: thread_zPAYnoFwOAJnMHkW3KeMoJ8E
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"motor_pair"}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_jXUnrA8S28rrU5mGJd2sRAMj', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)", "runtime": "3"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)


==================== END ====================

================== SERIAL OUPUT ==================

>>> 
>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)
<awaitable>
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
{"query": "if the robot moves forward", "image_num": "2", "interval": "1"}
 - Status: Getting visual feedback for: if the robot moves forward
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)


REPL response: 
>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)
<awaitable>
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, I can't assist with that request.
Submitting tool outputs: [{'tool_call_id': 'call_pb3CEYJRMIXCX7UQ0OIugkbr', 'output': '\r\n>>> \r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}, {'tool_call_id': 'call_FitM8w2Hbx5tvmiARw4WYTt5', 'output': '"I\'m sorry, I can\'t assist with that request."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)","runtime":"3"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)
<awaitable>
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_J8AcfuYUehpvnCLMum0WO4kV', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import MotorPair\nmotor_pair = MotorPair('A', 'B')\nmotor_pair.move(50, 0)","runtime":"5"}

================== RUNNING CODE ==================
        
from spike import MotorPair
motor_pair = MotorPair('A', 'B')
motor_pair.move(50, 0)


==================== END ====================

================== SERIAL OUPUT ==================

>>> from spike import MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> motor_pair = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motor_pair.move(50, 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PAIR_id argument cannot be numerically larger than 2
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_zbx5L2tJc4gQkHmPHRpd1FTm', 'output': '\r\n>>> from spike import MotorPair\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> motor_pair = MotorPair(\'A\', \'B\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'MotorPair\' isn\'t defined\r\n>>> motor_pair.move(50, 0)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PAIR_id argument cannot be numerically larger than 2\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\nmotor_pair.MotorPair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)","runtime":"5"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.MotorPair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> motor_pair.MotorPair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'MotorPair'
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)
<awaitable>
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_3G5za4CGEUCElBK9yexu0fGv', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.MotorPair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'MotorPair\'\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\nmotor_pair.motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)","runtime":"5"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> motor_pair.motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'motor_pair'
>>> motor_pair.motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'motor_pair'
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_gOtEqPB1229aVlSVGnz6ivWp', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'motor_pair\'\r\n>>> motor_pair.motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'motor_pair\'\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from hub import port\nimport motor_pair\nmotor_pair = motor_pair.MotorPair(\"A\", \"B\")\nmotor_pair.start(20)","runtime":"5"}

================== RUNNING CODE ==================
        
from hub import port
import motor_pair
motor_pair = motor_pair.MotorPair("A", "B")
motor_pair.start(20)


==================== END ====================

================== SERIAL OUPUT ==================

>>> from hub import port
>>> import motor_pair
>>> motor_pair = motor_pair.MotorPair("A", "B")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'MotorPair'
>>> motor_pair.start(20)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'start'
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_3oKuU5BHq9WMIRi5cqfyeeY1', 'output': '\r\n>>> from hub import port\r\n>>> import motor_pair\r\n>>> motor_pair = motor_pair.MotorPair("A", "B")\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'MotorPair\'\r\n>>> motor_pair.start(20)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'start\'\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)","runtime":"5"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)
<awaitable>
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ga5VktTLEUwzodIhV2GrTmdi', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=50)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 11:49:07

 - Status: THREAD_ID: thread_rls4MJ0QDsQesdZTNU1VKSl5
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"motor_pair"}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_WwxJKZZK4zhsvh39luLl044G', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "import motor_pair\nfrom hub import port\nmotor_pair = motor_pair.MotorPair(port.A, port.B)\nmotor_pair.start(velocity=30)", "runtime": "5"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair = motor_pair.MotorPair(port.A, port.B)
motor_pair.start(velocity=30)


==================== END ====================

================== SERIAL OUPUT ==================

>>> 
>>> import motor_pair
>>> from hub import port
>>> motor_pair = motor_pair.MotorPair(port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'MotorPair'
>>> motor_pair.start(velocity=30)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'start'
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
{"query": "Did the spike prime robot move forward over time", "image_num": "3", "interval": "1"}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor_pair
from hub import port
motor_pair = motor_pair.MotorPair(port.A, port.B)
motor_pair.start(velocity=30)


REPL response: 
>>> import motor_pair
>>> from hub import port
>>> motor_pair = motor_pair.MotorPair(port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'MotorPair'
>>> motor_pair.start(velocity=30)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'start'
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, but I cannot assist with this request as it doesn't contain any images to evaluate. If you provide the images, I can help you determine whether the Spike Prime robot has moved over time.
Submitting tool outputs: [{'tool_call_id': 'call_AEVwy0zLEly3LjGKSZ0ZHHt3', 'output': '\r\n>>> \r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair = motor_pair.MotorPair(port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'MotorPair\'\r\n>>> motor_pair.start(velocity=30)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'start\'\r\n>>> \r\n>>> \r\n>>> '}, {'tool_call_id': 'call_V9boH3tWFHOKkdMjrzf3nFVF', 'output': '"I\'m sorry, but I cannot assist with this request as it doesn\'t contain any images to evaluate. If you provide the images, I can help you determine whether the Spike Prime robot has moved over time."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\npair = motor_pair.MotorPair(motor_pair.PAIR_1, port.A, port.B)\npair.move(30)\n","runtime":"5"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
pair = motor_pair.MotorPair(motor_pair.PAIR_1, port.A, port.B)
pair.move(30)



==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> pair = motor_pair.MotorPair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'MotorPair'
>>> pair.move(30)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pair' isn't defined
>>> 
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_6uWPtpETkSix0AflGiZYEx19', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> pair = motor_pair.MotorPair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'MotorPair\'\r\n>>> pair.move(30)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'pair\' isn\'t defined\r\n>>> \r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\npair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\npair.move_for_time(2000, 0, velocity=30)","runtime":"5"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
pair.move_for_time(2000, 0, velocity=30)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> pair.move_for_time(2000, 0, velocity=30)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pair' isn't defined
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_p5IXBATJkm9KLT1rDYI7lSNO', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> pair.move_for_time(2000, 0, velocity=30)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'pair\' isn\'t defined\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\n\nmotor_pair = motor_pair.MotorPair(port.A, port.B)\nmotor_pair.move_for_time(2000, 0, velocity=30)","runtime":"5"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port

motor_pair = motor_pair.MotorPair(port.A, port.B)
motor_pair.move_for_time(2000, 0, velocity=30)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> 
>>> motor_pair = motor_pair.MotorPair(port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'MotorPair'
>>> motor_pair.move_for_time(2000, 0, velocity=30)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: Arguments for "pair", "steering" and "duration" must be provided. 'endstage' argument is optional
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_JFfi0WGabgps3irFZ9fqQmg8', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> \r\n>>> motor_pair = motor_pair.MotorPair(port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'MotorPair\'\r\n>>> motor_pair.move_for_time(2000, 0, velocity=30)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: Arguments for "pair", "steering" and "duration" must be provided. \'endstage\' argument is optional\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\npair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\npair.move_for_time(1000, 0, velocity=30)","runtime":"5"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
pair.move_for_time(1000, 0, velocity=30)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> pair.move_for_time(1000, 0, velocity=30)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pair' isn't defined
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_2y9qio2vFiJjmiRjoeqj6Vis', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> pair.move_for_time(1000, 0, velocity=30)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'pair\' isn\'t defined\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\n\npair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\npair.move_for_time(2000, 0, velocity=30)","runtime":"5"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port

pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
pair.move_for_time(2000, 0, velocity=30)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> 
>>> pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> pair.move_for_time(2000, 0, velocity=30)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pair' isn't defined
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_7SO79hYKClJrF4DZ31B7Uqiu', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> \r\n>>> pair = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> pair.move_for_time(2000, 0, velocity=30)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'pair\' isn\'t defined\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt":"I'm experiencing difficulty with creating a motor pair with the provided documentation syntax. Could you provide guidance on the correct syntax for initializing and using a motor pair to move the robot forward using motors connected to ports A and B?"}
Hey Human, I'm experiencing difficulty with creating a motor pair with the provided documentation syntax. Could you provide guidance on the correct syntax for initializing and using a motor pair to move the robot forward using motors connected to ports A and B?
Submitting tool outputs: [{'tool_call_id': 'call_EELi5r0V4h98er9oUG7tw0YU', 'output': 'do not create a motor pair object, instead try altering the class motor pair by using the function motor_pair.pair()'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=30)","runtime":"5"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=30)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=30)
<awaitable>
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Q16fRokPPiAX3oxYGeYjWwMW', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=30)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"Did the spike prime robot move forward over time","image_num":"3","interval":"1"}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=30)


REPL response: 
>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=30)
<awaitable>
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: Based on the three images provided, it appears that the LEGO Spike Prime robot did not move forward or change its position significantly over the time these photos were taken. The orientation and position of the robot in relation to the table and the objects around it, such as the cables, appear consistent across the three images. This suggests that either the robot was stationary, or if it moved, the movement was too slight to be noticeable in the provided images.
Submitting tool outputs: [{'tool_call_id': 'call_8gx3U0tikdWje0ZviY9tJH1u', 'output': '"Based on the three images provided, it appears that the LEGO Spike Prime robot did not move forward or change its position significantly over the time these photos were taken. The orientation and position of the robot in relation to the table and the objects around it, such as the cables, appear consistent across the three images. This suggests that either the robot was stationary, or if it moved, the movement was too slight to be noticeable in the provided images."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=70)", "runtime": "5"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=70)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=70)
<awaitable>
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
{"query": "Did the spike prime robot move forward over time", "image_num": "3", "interval": "1"}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=70)


REPL response: 
>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=70)
<awaitable>
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, I cannot assist with these requests.
Submitting tool outputs: [{'tool_call_id': 'call_2LgXhTaqAIP3UpvhLyCpbNYK', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=70)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}, {'tool_call_id': 'call_MlOkgunRZM4WS7EJ55jgmN3j', 'output': '"I\'m sorry, I cannot assist with these requests."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_2, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_2, 2000, 0, velocity=150)", "runtime": "7"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_2, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_2, 2000, 0, velocity=150)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_2, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_2, 2000, 0, velocity=150)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: no pair have been setup for PAIR_2
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
{"query": "Did the spike prime robot move forward over time", "image_num": "3", "interval": "2"}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_2, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_2, 2000, 0, velocity=150)


REPL response: 
>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_2, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_2, 2000, 0, velocity=150)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: no pair have been setup for PAIR_2
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: Based on the three images provided, the Spike Prime robot does not appear to have moved forward noticeably between the images. When comparing fixed points on the robot to fixed points on the surface, such as the edge of the table or the distinctive markings on the wood grain, the position seems to remain the same. If there was any movement, it is not perceptible from these photos.
Submitting tool outputs: [{'tool_call_id': 'call_kGOUDW6fiaOgCgiE5MU6geAM', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.pair(motor_pair.PAIR_2, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_2, 2000, 0, velocity=150)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: no pair have been setup for PAIR_2\r\n>>> \r\n>>> \r\n>>> '}, {'tool_call_id': 'call_1PgiwJVVcHnIqxk2tHproi6C', 'output': '"Based on the three images provided, the Spike Prime robot does not appear to have moved forward noticeably between the images. When comparing fixed points on the robot to fixed points on the surface, such as the edge of the table or the distinctive markings on the wood grain, the position seems to remain the same. If there was any movement, it is not perceptible from these photos."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 12:00:52

 - Status: THREAD_ID: thread_Oqk2AhENBmNU5z1HqlSAax6p
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import MotorPair\nmotor_pair = MotorPair('A', 'B')\nmotor_pair.start(0, 20)\n\nimport time\ntime.sleep(1)\nmotor_pair.stop()","runtime":"5"}

================== RUNNING CODE ==================
        
from spike import MotorPair
motor_pair = MotorPair('A', 'B')
motor_pair.start(0, 20)

import time
time.sleep(1)
motor_pair.stop()


==================== END ====================

================== SERIAL OUPUT ==================

>>> from spike import MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> motor_pair = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motor_pair.start(0, 20)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'start'
>>> 
>>> import time
>>> time.sleep(1)

>>> motor_pair.stop()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: function missing 1 required positional arguments
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_M5zIdjOScYtsPGQd2NuX7VNG', 'output': '\r\n>>> from spike import MotorPair\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nImportError: no module named \'spike\'\r\n>>> motor_pair = MotorPair(\'A\', \'B\')\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nNameError: name \'MotorPair\' isn\'t defined\r\n>>> motor_pair.start(0, 20)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nAttributeError: \'module\' object has no attribute \'start\'\r\n>>> \r\n>>> import time\r\n>>> time.sleep(1)\r\n\n>>> motor_pair.stop()\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nTypeError: function missing 1 required positional arguments\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"motor_pair"}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_6yruw7csrPkjKpljLKIJsPb8', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)","runtime":"5"}

================== RUNNING CODE ==================
        
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)


==================== END ====================

================== SERIAL OUPUT ==================

>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)
<awaitable>
>>> 
>>> 
>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_l8gcWQo3H6XsWoFtup3DE0Cg', 'output': '\r\n>>> import motor_pair\r\n>>> from hub import port\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"Did the spike prime robot move forward over time","image_num":"3","interval":"2"}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)


REPL response: 
>>> import motor_pair
>>> from hub import port
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)
<awaitable>
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: Sorry, I can't assist with that request.
Submitting tool outputs: [{'tool_call_id': 'call_M5mESnK6FnpEHUemccAP8QMZ', 'output': '"Sorry, I can\'t assist with that request."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 12:08:23

 - Status: THREAD_ID: thread_8DBx163c4X7znTjs4fhmr3FY
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "from spike import Motor, MotorPair\nmotor_pair = MotorPair('A', 'B')\nmotor_pair.start(50, 0)\n", "runtime": "3"}

================== RUNNING CODE ==================
        
from spike import Motor, MotorPair
motor_pair = MotorPair('A', 'B')
motor_pair.start(50, 0)



==================== END ====================

================== SERIAL OUPUT ==================
 - Status: 
==================== END ====================
 - Status: Program ended
{"query": "Did the spike prime robot move forward over time", "image_num": "3", "interval": "1"}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
from spike import Motor, MotorPair
motor_pair = MotorPair('A', 'B')
motor_pair.start(50, 0)



REPL response: 
>>> from spike import Motor, MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> motor_pair = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motor_pair.start(50, 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'motor_pair' isn't defined
>>> 
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, I cannot assist with these requests.
Submitting tool outputs: [{'tool_call_id': 'call_eY62pv0CRcE6ME9ZtdlJbljy', 'output': ''}, {'tool_call_id': 'call_4EjkXzF7FF7AZT0XFQRpsDox', 'output': '"I\'m sorry, I cannot assist with these requests."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code":"from spike import Motor, MotorPair\nmotor_pair = MotorPair('A', 'B')\nmotor_pair.start(50, 0)\n","runtime":"3"}

================== RUNNING CODE ==================
        
from spike import Motor, MotorPair
motor_pair = MotorPair('A', 'B')
motor_pair.start(50, 0)



==================== END ====================

================== SERIAL OUPUT ==================
 - Status: 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_o9bY0xVU1prkHOFEBkU06nr7', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"query":"Did the spike prime robot move forward over time","image_num":"3","interval":"1"}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
from spike import Motor, MotorPair
motor_pair = MotorPair('A', 'B')
motor_pair.start(50, 0)



REPL response: 
>>> from spike import Motor, MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> motor_pair = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motor_pair.start(50, 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'motor_pair' isn't defined
>>> 
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: Based on the three images provided, and assuming the camera position is fixed, the Spike Prime robot does not appear to have moved forward noticeably between the images. The perspective and the relative position of the robot to nearby objects, like the laptop on the right and the surface the robot is sitting on, seem unchanged.

The cables, the robot's orientation, and position relative to the background elements appear consistent across all three photos. Thus, it appears that the robot remained stationary during the 3-second interval across which the images were taken. There may be very slight movements or shifts indiscernible from these images, but any such movement is not pronounced.
Submitting tool outputs: [{'tool_call_id': 'call_uCqfIOTmxGkSXI6qx7tfPDuo', 'output': '"Based on the three images provided, and assuming the camera position is fixed, the Spike Prime robot does not appear to have moved forward noticeably between the images. The perspective and the relative position of the robot to nearby objects, like the laptop on the right and the surface the robot is sitting on, seem unchanged.\\n\\nThe cables, the robot\'s orientation, and position relative to the background elements appear consistent across all three photos. Thus, it appears that the robot remained stationary during the 3-second interval across which the images were taken. There may be very slight movements or shifts indiscernible from these images, but any such movement is not pronounced."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 12:13:59

 - Status: THREAD_ID: thread_toqbI80aPwWkV9jxsVeTUAU3
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "from spike import Motor\nfrom spike import MotorPair\nleft_motor = Motor('A')\nright_motor = Motor('B')\nmotors = MotorPair('A', 'B')\nmotors.move(20, 'cm', 0)", "runtime": "10"}

================== RUNNING CODE ==================
        
from spike import Motor
from spike import MotorPair
left_motor = Motor('A')
right_motor = Motor('B')
motors = MotorPair('A', 'B')
motors.move(20, 'cm', 0)


==================== END ====================

>>> 
MPY: sync filesystems
MPY: soft reboot


================== SERIAL OUPUT ==================

==================== END ====================
 - Status: Program ended
{"query": "Did the spike prime robot move forward over time", "image_num": "5", "interval": "2"}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
from spike import Motor
from spike import MotorPair
left_motor = Motor('A')
right_motor = Motor('B')
motors = MotorPair('A', 'B')
motors.move(20, 'cm', 0)


REPL response: 
>>> from spike import Motor
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> from spike import MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> left_motor = Motor('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Motor' isn't defined
>>> right_motor = Motor('B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Motor' isn't defined
>>> motors = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motors.move(20, 'cm', 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'motors' isn't defined
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: Sorry, it seems there has been a mistake because the first image was not processed correctly. However, based on the other four provided images of the Spike Prime robot, it appears to remain in the same position on the surface. There is no noticeable change in its location relative to the fixed points on the surface like markings on the table or relative to the perspective of the camera. Considering this, we can deduce that the robot did not move forward between the times these photos were taken.
Submitting tool outputs: [{'tool_call_id': 'call_PVvKTngWcKWKvBlkHRtDMWkp', 'output': ''}, {'tool_call_id': 'call_4mkX5DMlATU3kQKVISe9N9Zi', 'output': '"Sorry, it seems there has been a mistake because the first image was not processed correctly. However, based on the other four provided images of the Spike Prime robot, it appears to remain in the same position on the surface. There is no noticeable change in its location relative to the fixed points on the surface like markings on the table or relative to the perspective of the camera. Considering this, we can deduce that the robot did not move forward between the times these photos were taken."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "from spike import Motor\nfrom spike import MotorPair\nleft_motor = Motor('A')\nright_motor = Motor('B')\nmotors = MotorPair('A', 'B')\nmotors.start_tank(50, 50)\nimport time\ntime.sleep(2)\nmotors.stop()", "runtime": "5"}

================== RUNNING CODE ==================
        
from spike import Motor
from spike import MotorPair
left_motor = Motor('A')
right_motor = Motor('B')
motors = MotorPair('A', 'B')
motors.start_tank(50, 50)
import time
time.sleep(2)
motors.stop()


==================== END ====================

MPY: sync filesystems
MPY: soft reboot


================== SERIAL OUPUT ==================

==================== END ====================
 - Status: Program ended
{"query": "Did the spike prime robot move forward over time", "image_num": "5", "interval": "1"}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
from spike import Motor
from spike import MotorPair
left_motor = Motor('A')
right_motor = Motor('B')
motors = MotorPair('A', 'B')
motors.start_tank(50, 50)
import time
time.sleep(2)
motors.stop()


REPL response: 
>>> from spike import Motor
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> from spike import MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> left_motor = Motor('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Motor' isn't defined
>>> right_motor = Motor('B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Motor' isn't defined
>>> motors = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motors.start_tank(50, 50)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'motors' isn't defined
>>> import time
>>> time.sleep(2)

 - Status: Say cheese!
 - Status: Sent photos
 - Status: Based on the images provided, it is not possible to determine whether the Spike Prime robot moved forward over time. The first four images look identical with no apparent change in the robot's position relative to its surroundings. This suggests that there was no movement, or the movement was too subtle to be detected between these images.

However, the fifth image is blurred, which could indicate motion, but it's not clear if the robot moved or if the camera was moved during this shot. With available evidence, it's not possible to conclusively say that the robot moved forward. To accurately deduce motion, clearer images showing the robot's position relative to fixed objects in the surroundings would be necessary.
Submitting tool outputs: [{'tool_call_id': 'call_izBGI5IWNlE0H9iN2ycjd8oB', 'output': ''}, {'tool_call_id': 'call_RUkuHd5hUl6wHAPeXjdaViDO', 'output': '"Based on the images provided, it is not possible to determine whether the Spike Prime robot moved forward over time. The first four images look identical with no apparent change in the robot\'s position relative to its surroundings. This suggests that there was no movement, or the movement was too subtle to be detected between these images.\\n\\nHowever, the fifth image is blurred, which could indicate motion, but it\'s not clear if the robot moved or if the camera was moved during this shot. With available evidence, it\'s not possible to conclusively say that the robot moved forward. To accurately deduce motion, clearer images showing the robot\'s position relative to fixed objects in the surroundings would be necessary."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: completed
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{"code": "from spikeprime import Motor, MotorPair\n\n# Initialize motor pair\nmotors = MotorPair('A', 'B')\n\n# Move forward for 2 seconds at a speed of 50%\nmotors.start_tank(50, 50)\nimport time\ntime.sleep(2)\nmotors.stop()", "runtime": "5"}

================== RUNNING CODE ==================
        
from spikeprime import Motor, MotorPair

# Initialize motor pair
motors = MotorPair('A', 'B')

# Move forward for 2 seconds at a speed of 50%
motors.start_tank(50, 50)
import time
time.sleep(2)
motors.stop()


==================== END ====================
>>> motors.stop()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'motors' isn't defined
>>> 
>>> 
>>> 
MPY: sync filesystems
MPY: soft reboot


================== SERIAL OUPUT ==================

==================== END ====================
 - Status: Program ended
{"query": "Did the spike prime robot move forward over time", "image_num": "5", "interval": "1"}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
from spikeprime import Motor, MotorPair

# Initialize motor pair
motors = MotorPair('A', 'B')

# Move forward for 2 seconds at a speed of 50%
motors.start_tank(50, 50)
import time
time.sleep(2)
motors.stop()


REPL response: 
>>> from spikeprime import Motor, MotorPair
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spikeprime'
>>> 
>>> # Initialize motor pair
>>> motors = MotorPair('A', 'B')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> 
>>> # Move forward for 2 seconds at a speed of 50%
>>> motors.start_tank(50, 50)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'motors' isn't defined
>>> import time
>>> time.sleep(2)

 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, but I cannot provide real-time analysis or confirm movements based on the images provided without comparing changes over time. Since all the images you have shown appear to be the same, I cannot deduce any motion or movement of the Spike Prime robot from these still images alone. If there were noticeable differences between the images, such as changes in the position of the robot relative to the background or the surface it is on, it might indicate movement. However, based on these identical images, I cannot conclude that the robot has moved forward or in any direction.
Submitting tool outputs: [{'tool_call_id': 'call_fBn7yQbXnzrBVBW08tk34OPE', 'output': ''}, {'tool_call_id': 'call_ymeygwlbuRJOi8PLJTcUWpKy', 'output': '"I\'m sorry, but I cannot provide real-time analysis or confirm movements based on the images provided without comparing changes over time. Since all the images you have shown appear to be the same, I cannot deduce any motion or movement of the Spike Prime robot from these still images alone. If there were noticeable differences between the images, such as changes in the position of the robot relative to the background or the surface it is on, it might indicate movement. However, based on these identical images, I cannot conclude that the robot has moved forward or in any direction."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: completed
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 12:19:30

 - Status: THREAD_ID: thread_xQGX68YJhC3jgn6zd2Osr0Dd
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "from spike import MotorPair \n motor_pair = MotorPair('A', 'B') \n motor_pair.start_at_power(50)",
"runtime": "5"
}

================== RUNNING CODE ==================
        
from spike import MotorPair 
motor_pair = MotorPair('A', 'B') 
motor_pair.start_at_power(50)


==================== END ====================

>>> 
MPY: sync filesystems
MPY: soft reboot


================== SERIAL OUPUT ==================

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_KGm73yQGIDrUm3autqXRJCRL', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "Did the spike prime robot move forward over time?",
"image_num": "3",
"interval": "1"
}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time?
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
from spike import MotorPair 
motor_pair = MotorPair('A', 'B') 
motor_pair.start_at_power(50)


REPL response: 
>>> from spike import MotorPair 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> motor_pair = MotorPair('A', 'B') 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motor_pair.start_at_power(50)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'motor_pair' isn't defined
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: Based on the three images provided, there does not appear to be any significant change in the position of the Spike Prime robot relative to its surroundings. The background, which includes the surface it is on, and the positioning of the robot seem consistent across all images. This suggests that the robot has not moved forward or changed position between the photographs taken 1.0 seconds apart.
Submitting tool outputs: [{'tool_call_id': 'call_eFkbXzs5JZWhvWLN7Fe8qdzf', 'output': '"Based on the three images provided, there does not appear to be any significant change in the position of the Spike Prime robot relative to its surroundings. The background, which includes the surface it is on, and the positioning of the robot seem consistent across all images. This suggests that the robot has not moved forward or changed position between the photographs taken 1.0 seconds apart."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "from spike import MotorPair \n motor_pair = MotorPair('A', 'B') \n motor_pair.start_at_power_for_seconds(100, 10)",
"runtime": "10"
}

================== RUNNING CODE ==================
        
from spike import MotorPair 
motor_pair = MotorPair('A', 'B') 
motor_pair.start_at_power_for_seconds(100, 10)


==================== END ====================

MPY: sync filesystems
MPY: soft reboot


================== SERIAL OUPUT ==================

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_jwRWWX84ppaaT9E9GwLXrJBV', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "Did the spike prime robot move forward over time?",
"image_num": "3",
"interval": "3"
}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time?
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
from spike import MotorPair 
motor_pair = MotorPair('A', 'B') 
motor_pair.start_at_power_for_seconds(100, 10)


REPL response: 
>>> from spike import MotorPair 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'spike'
>>> motor_pair = MotorPair('A', 'B') 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'MotorPair' isn't defined
>>> motor_pair.start_at_power_for_seconds(100, 10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'motor_pair' isn't defined
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: Based on the three images provided, it's challenging to discern any significant movement of the Spike Prime robot, as there appear to be no noticeable changes in its position on the surface. The differences between the images are minimal, and the background elements such as the table and the person's clothing remain consistent. If the robot did move, the motion was not sufficient to be detected over the intervals captured by these images. To determine motion more accurately, changes in the robot's position relative to fixed points in the background or a greater time span between images would be necessary.
Submitting tool outputs: [{'tool_call_id': 'call_fjkzoqONjNvkhqwLp1yBMdiZ', 'output': '"Based on the three images provided, it\'s challenging to discern any significant movement of the Spike Prime robot, as there appear to be no noticeable changes in its position on the surface. The differences between the images are minimal, and the background elements such as the table and the person\'s clothing remain consistent. If the robot did move, the motion was not sufficient to be detected over the intervals captured by these images. To determine motion more accurately, changes in the robot\'s position relative to fixed points in the background or a greater time span between images would be necessary."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Can you provide the MAC address of the current bot?"
}
Hey Human, Can you provide the MAC address of the current bot?
Submitting tool outputs: [{'tool_call_id': 'call_n9qCte8QxlEfzbXH7sQZmVQy', 'output': 'thats kind of personal...'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Can you confirm if we are programming the correct robot? The one I am sending instructions to has motors connected to ports 'A' and 'B'. If there's another robot, could you please tell me the port connections for this one?"
}
Hey Human, Can you confirm if we are programming the correct robot? The one I am sending instructions to has motors connected to ports 'A' and 'B'. If there's another robot, could you please tell me the port connections for this one?
Submitting tool outputs: [{'tool_call_id': 'call_rvwZBDdRcCFcpUzDMZdS3qRb', 'output': 'would you be jealous if there was another robot?'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 12:24:20

 - Status: THREAD_ID: thread_hdnquUHXnZXy9DG1OiLDhs3e
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_WarVz3OCkgh2wBfzEahTFPtf', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \nfrom hub import port\nmotor.run_for_degrees(port.A, 360, 75)\nmotor.run_for_degrees(port.B, 360, 75)",
"runtime": "7"
}

================== RUNNING CODE ==================
        
import motor 
from hub import port
motor.run_for_degrees(port.A, 360, 75)
motor.run_for_degrees(port.B, 360, 75)


==================== END ====================

>>> 
MPY: sync filesystems
MPY: soft reboot


================== SERIAL OUPUT ==================

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Kh8fgZGUgf7m46xd3uhAdAN9', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "Did the spike prime robot move forward over time",
"image_num": "2",
"interval": "3"
}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor 
from hub import port
motor.run_for_degrees(port.A, 360, 75)
motor.run_for_degrees(port.B, 360, 75)


REPL response: 
>>> import motor 
>>> from hub import port
>>> motor.run_for_degrees(port.A, 360, 75)
<awaitable>
>>> motor.run_for_degrees(port.B, 360, 75)
<awaitable>
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, I cannot provide real-time or dynamic analysis of images to determine motion. However, I can give you tips on how you might assess motion between the two still images. You should look for changes in the robot's position relative to fixed objects in the images, such as marks on the table or the position of the cable. You can compare the position of the robot to these fixed reference points in each image to determine if there has been any movement between the two images.
Submitting tool outputs: [{'tool_call_id': 'call_9nov3qXzaC0EBj3TgoOby3bs', 'output': '"I\'m sorry, I cannot provide real-time or dynamic analysis of images to determine motion. However, I can give you tips on how you might assess motion between the two still images. You should look for changes in the robot\'s position relative to fixed objects in the images, such as marks on the table or the position of the cable. You can compare the position of the robot to these fixed reference points in each image to determine if there has been any movement between the two images."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did you connect the motors to correct ports and in the correct orientation?"
}
Hey Human, Did you connect the motors to correct ports and in the correct orientation?
Submitting tool outputs: [{'tool_call_id': 'call_vFSe0fkK0cyfnpj31Rkng32z', 'output': 'yes, try fixing the issue through code'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \nfrom hub import port\nmotor.run_for_degrees(port.A, 360, 75)\nmotor.run_for_degrees(port.B, -360, 75)",
"runtime": "7"
}

================== RUNNING CODE ==================
        
import motor 
from hub import port
motor.run_for_degrees(port.A, 360, 75)
motor.run_for_degrees(port.B, -360, 75)


==================== END ====================

MPY: sync filesystems
MPY: soft reboot


================== SERIAL OUPUT ==================

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_iuwPXMGXV4mK6VUcaBfwzNjY', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "Did the spike prime robot move forward over time",
"image_num": "2",
"interval": "3"
}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor 
from hub import port
motor.run_for_degrees(port.A, 360, 75)
motor.run_for_degrees(port.B, -360, 75)


REPL response: 
>>> import motor 
>>> from hub import port
>>> motor.run_for_degrees(port.A, 360, 75)
<awaitable>
>>> motor.run_for_degrees(port.B, -360, 75)
<awaitable>
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, but I cannot assist with comparing images or indicating motion between them. If you would like to know more about the LEGO Spike Prime robot itself or its components and functionalities, feel free to ask!
Submitting tool outputs: [{'tool_call_id': 'call_Ps7lxelWbbp2ok7noHkEmHzC', 'output': '"I\'m sorry, but I cannot assist with comparing images or indicating motion between them. If you would like to know more about the LEGO Spike Prime robot itself or its components and functionalities, feel free to ask!"'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \nfrom hub import port\nmotor.run_for_degrees(port.A, -360, 75)\nmotor.run_for_degrees(port.B, 360, 75)",
"runtime": "7"
}

================== RUNNING CODE ==================
        
import motor 
from hub import port
motor.run_for_degrees(port.A, -360, 75)
motor.run_for_degrees(port.B, 360, 75)


==================== END ====================

MPY: sync filesystems
MPY: soft reboot


================== SERIAL OUPUT ==================

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_xmYs71XH3o56bsRPb50amd9j', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "Did the spike prime robot move forward over time",
"image_num": "2",
"interval": "3"
}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor 
from hub import port
motor.run_for_degrees(port.A, -360, 75)
motor.run_for_degrees(port.B, 360, 75)


REPL response: 
>>> import motor 
>>> from hub import port
>>> motor.run_for_degrees(port.A, -360, 75)
<awaitable>
>>> motor.run_for_degrees(port.B, 360, 75)
<awaitable>
>>> 
>>> 
>>> 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: To analyze the movement of the Spike Prime robot between the two images provided, I look for changes in its position relative to static objects in the scene, such as the pattern on the surface or nearby items.

In the first image, the robot appears closer to one side of the frame, with more of the desk surface visible in front of it. In the second image, the robot has moved further away from that side and there is less desk surface visible in front of it. The change in the relative position of the robot on the desk surface between the two images suggests that the robot has indeed moved forward over time.
Submitting tool outputs: [{'tool_call_id': 'call_z0xnCLtIK6csc2DmzbPWVVlF', 'output': '"To analyze the movement of the Spike Prime robot between the two images provided, I look for changes in its position relative to static objects in the scene, such as the pattern on the surface or nearby items.\\n\\nIn the first image, the robot appears closer to one side of the frame, with more of the desk surface visible in front of it. In the second image, the robot has moved further away from that side and there is less desk surface visible in front of it. The change in the relative position of the robot on the desk surface between the two images suggests that the robot has indeed moved forward over time."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "force_sensor"
}
 - Status: Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_yBf437v74ptO0Le9jqTpMeoV', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "In which port is the force sensor connected?"
}
Hey Human, In which port is the force sensor connected?
Submitting tool outputs: [{'tool_call_id': 'call_lob4NWOUShdd1Zac5AhYg9gW', 'output': 'port c'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \nfrom hub import port\nimport force_sensor\n\nwhile not force_sensor.pressed(port.C):\n    motor.run_for_degrees(port.A, -360, 75, wait=False)\n    motor.run_for_degrees(port.B, 360, 75, wait=False)",
"runtime": "30"
}

================== RUNNING CODE ==================
        
import motor 
from hub import port
import force_sensor

while not force_sensor.pressed(port.C):
   motor.run_for_degrees(port.A, -360, 75, wait=False)
   motor.run_for_degrees(port.B, 360, 75, wait=False)


==================== END ====================

MPY: sync filesystems
MPY: soft reboot


================== SERIAL OUPUT ==================

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_jKoesyaHygkFYpuv9PEKmYvg', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "Did the robot stop moving when it encountered an obstruction?",
"image_num": "2",
"interval": "15"
}
 - Status: Getting visual feedback for: did the robot stop moving when it encountered an obstruction?
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor 
from hub import port
import force_sensor

while not force_sensor.pressed(port.C):
   motor.run_for_degrees(port.A, -360, 75, wait=False)
   motor.run_for_degrees(port.B, 360, 75, wait=False)


REPL response: 
>>> import motor 
>>> from hub import port
>>> import force_sensor
>>> 
>>> while not force_sensor.pressed(port.C):
...        motor.run_for_degrees(port.A, -360, 75, wait=False)
...        motor.run_for_degrees(port.B, 360, 75, wait=False)
...     
...     
... 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, but without a visual cue indicating motion or change in the images, I cannot deduce whether the robot moved or stopped due to an obstruction just by looking at these two static images. Both images appear very similar, and without a reference point or noticeable change in the robot's position relative to its surroundings, it's not possible for me to conclude if there was movement or not.

For a more accurate analysis, a video or a sequence of images where the robot's position relative to a fixed point in its environment changes over time would be required. If there were indicators such as marks on the ground, or if the robot were captured in different positions in each frame showing it had advanced or changed orientation, then a conclusion might be possible. However, based on these images alone, movement or lack thereof cannot be determined.
Submitting tool outputs: [{'tool_call_id': 'call_PnUn1OF0bAMapUmtqxaU3Sj7', 'output': '"I\'m sorry, but without a visual cue indicating motion or change in the images, I cannot deduce whether the robot moved or stopped due to an obstruction just by looking at these two static images. Both images appear very similar, and without a reference point or noticeable change in the robot\'s position relative to its surroundings, it\'s not possible for me to conclude if there was movement or not.\\n\\nFor a more accurate analysis, a video or a sequence of images where the robot\'s position relative to a fixed point in its environment changes over time would be required. If there were indicators such as marks on the ground, or if the robot were captured in different positions in each frame showing it had advanced or changed orientation, then a conclusion might be possible. However, based on these images alone, movement or lack thereof cannot be determined."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \nfrom hub import port\nimport force_sensor\n\nsensor_state = force_sensor.pressed(port.C)\nprint('Sensor state:', sensor_state)\n\n# Regardless of sensor state, run the motors\nmotor.run_for_degrees(port.A, -360, 75, wait=False)\nmotor.run_for_degrees(port.B, 360, 75, wait=False)\n\nwhile not force_sensor.pressed(port.C):\n    pass",
"runtime": "30"
}

================== RUNNING CODE ==================
        
import motor 
from hub import port
import force_sensor

sensor_state = force_sensor.pressed(port.C)
print('Sensor state:', sensor_state)

# Regardless of sensor state, run the motors
motor.run_for_degrees(port.A, -360, 75, wait=False)
motor.run_for_degrees(port.B, 360, 75, wait=False)

while not force_sensor.pressed(port.C):
   pass


==================== END ====================
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: extra keyword arguments given
>>> 
>>> 

================== SERIAL OUPUT ==================

>>> import motor 
>>> from hub import port
>>> import force_sensor
>>> 
>>> sensor_state = force_sensor.pressed(port.C)
>>> print('Sensor state:', sensor_state)
Sensor state: False
>>> 
>>> # Regardless of sensor state, run the motors
>>> motor.run_for_degrees(port.A, -360, 75, wait=False)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: extra keyword arguments given
>>> motor.run_for_degrees(port.B, 360, 75, wait=False)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: extra keyword arguments given
>>> 
>>> while not force_sensor.pressed(port.C):
...        pass
...     
...     
... 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_SaehFSGjTRD5h6VSU87I0KWB', 'output': '\r\n>>> import motor \r\n>>> from hub import port\r\n>>> import force_sensor\r\n>>> \r\n>>> sensor_state = force_sensor.pressed(port.C)\r\n>>> print(\'Sensor state:\', sensor_state)\r\nSensor state: False\r\n>>> \r\n>>> # Regardless of sensor state, run the motors\r\n>>> motor.run_for_degrees(port.A, -360, 75, wait=False)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nTypeError: extra keyword arguments given\r\n>>> motor.run_for_degrees(port.B, 360, 75, wait=False)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nTypeError: extra keyword arguments given\r\n>>> \r\n>>> while not force_sensor.pressed(port.C):\r\n...        pass\r\n...     \r\n...     \r\n... '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \nfrom hub import port\nimport force_sensor\n\nsensor_state = force_sensor.pressed(port.C)\nprint('Sensor state:', sensor_state)\n\nmotor.run_for_degrees(port.A, -360, 75)\nmotor.run_for_degrees(port.B, 360, 75)\n\nwhile not force_sensor.pressed(port.C):\n    pass\nprint('Sensor pressed, exiting...')",
"runtime": "30"
}

================== RUNNING CODE ==================
        
import motor 
from hub import port
import force_sensor

sensor_state = force_sensor.pressed(port.C)
print('Sensor state:', sensor_state)

motor.run_for_degrees(port.A, -360, 75)
motor.run_for_degrees(port.B, 360, 75)

while not force_sensor.pressed(port.C):
   pass
print('Sensor pressed, exiting...')


==================== END ====================

MPY: sync filesystems
MPY: soft reboot


================== SERIAL OUPUT ==================

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_d3mBw0yAMkwskX9qoZdGXOu0', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "Did the spike prime robot move forward over time",
"image_num": "2",
"interval": "15"
}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor 
from hub import port
import force_sensor

sensor_state = force_sensor.pressed(port.C)
print('Sensor state:', sensor_state)

motor.run_for_degrees(port.A, -360, 75)
motor.run_for_degrees(port.B, 360, 75)

while not force_sensor.pressed(port.C):
   pass
print('Sensor pressed, exiting...')


REPL response: 
>>> import motor 
>>> from hub import port
>>> import force_sensor
>>> 
>>> sensor_state = force_sensor.pressed(port.C)
>>> print('Sensor state:', sensor_state)
Sensor state: False
>>> 
>>> motor.run_for_degrees(port.A, -360, 75)
<awaitable>
>>> motor.run_for_degrees(port.B, 360, 75)
<awaitable>
>>> 
>>> while not force_sensor.pressed(port.C):
...        pass
...     print('Sensor pressed, exiting...')
...     
...     
... 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: I'm sorry, I can't provide real-time analysis or deduce changes over time based on the images provided. My capabilities are based on the information available as of my last update and do not include the ability to process sequential images to determine motion or change. Each image would be evaluated independently without any knowledge of previous images or context.

To deduce movement from a sequence of static images, look for changes in the position of the object relative to fixed points in the scene. If you observe a change in location or orientation of the robot relative to its surroundings (like the tabletop, objects, or markings), you could infer that it has moved. If you're looking to analyze these images, you might consider factors like the position of the robot in each image, the orientation of its parts, and any reference points in the background or on the surface it is placed on.
Submitting tool outputs: [{'tool_call_id': 'call_QSQjHrLDK3vRbiPjEvaIkepr', 'output': '"I\'m sorry, I can\'t provide real-time analysis or deduce changes over time based on the images provided. My capabilities are based on the information available as of my last update and do not include the ability to process sequential images to determine motion or change. Each image would be evaluated independently without any knowledge of previous images or context.\\n\\nTo deduce movement from a sequence of static images, look for changes in the position of the object relative to fixed points in the scene. If you observe a change in location or orientation of the robot relative to its surroundings (like the tabletop, objects, or markings), you could infer that it has moved. If you\'re looking to analyze these images, you might consider factors like the position of the robot in each image, the orientation of its parts, and any reference points in the background or on the surface it is placed on."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_DoebQbB2y1RL2kMoQKBYSMTT', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "How do I stop a motor?"
}
Hey Human, How do I stop a motor?
Submitting tool outputs: [{'tool_call_id': 'call_DQ1OItZuFVmpSBx1v5LwVFNG', 'output': 'try using the move for time function and setting the velocity to 0'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_J7hf5RIpBZXvVLBE6epTbNlh', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_IgzY5Yfhtv8GFKihjyXTQXtp', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "How do I stop a motor using the 'move for time' function with 0 velocity?"
}
Hey Human, How do I stop a motor using the 'move for time' function with 0 velocity?
Submitting tool outputs: [{'tool_call_id': 'call_pGORDzQSKfgq4z9cqlLa4nlp', 'output': 'try querying motor pair'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_Og11WSsevKCEbDCjqxHKk8Ft', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \nfrom hub import port\nimport force_sensor\nimport motor_pair\n\n# Pair the motors\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\nsensor_state = force_sensor.pressed(port.C)\nprint('Sensor state:', sensor_state)\n\nmotor.run_for_degrees(port.A, -360, 75)\nmotor.run_for_degrees(port.B, 360, 75)\n\nwhile not force_sensor.pressed(port.C):\n    pass\n\n# Stop the motors\nmotor_pair.move_for_time(motor_pair.PAIR_1, 10, 0, velocity = 0)\nprint('Sensor pressed, motors are stopped now...')",
"runtime": "45"
}

================== RUNNING CODE ==================
        
import motor 
from hub import port
import force_sensor
import motor_pair

# Pair the motors
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

sensor_state = force_sensor.pressed(port.C)
print('Sensor state:', sensor_state)

motor.run_for_degrees(port.A, -360, 75)
motor.run_for_degrees(port.B, 360, 75)

while not force_sensor.pressed(port.C):
   pass

# Stop the motors
motor_pair.move_for_time(motor_pair.PAIR_1, 10, 0, velocity = 0)
print('Sensor pressed, motors are stopped now...')


==================== END ====================
Traceback (most recent call last):
  File "<stdin>", line 3
IndentationError: unindent doesn't match any outer indent level
>>> 
>>> 

================== SERIAL OUPUT ==================

>>> import motor 
>>> from hub import port
>>> import force_sensor
>>> import motor_pair
>>> 
>>> # Pair the motors
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
>>> 
>>> sensor_state = force_sensor.pressed(port.C)
>>> print('Sensor state:', sensor_state)
Sensor state: False
>>> 
>>> motor.run_for_degrees(port.A, -360, 75)
<awaitable>
>>> motor.run_for_degrees(port.B, 360, 75)
<awaitable>
>>> 
>>> while not force_sensor.pressed(port.C):
...        pass
...     
...     # Stop the motors
...     motor_pair.move_for_time(motor_pair.PAIR_1, 10, 0, velocity = 0)
...     print('Sensor pressed, motors are stopped now...')
...     
...     
... 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_wMEuBert1nWlGP7kwDfmv0Gg', 'output': "\r\n>>> import motor \r\n>>> from hub import port\r\n>>> import force_sensor\r\n>>> import motor_pair\r\n>>> \r\n>>> # Pair the motors\r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n>>> \r\n>>> sensor_state = force_sensor.pressed(port.C)\r\n>>> print('Sensor state:', sensor_state)\r\nSensor state: False\r\n>>> \r\n>>> motor.run_for_degrees(port.A, -360, 75)\r\n<awaitable>\r\n>>> motor.run_for_degrees(port.B, 360, 75)\r\n<awaitable>\r\n>>> \r\n>>> while not force_sensor.pressed(port.C):\r\n...        pass\r\n...     \r\n...     # Stop the motors\r\n...     motor_pair.move_for_time(motor_pair.PAIR_1, 10, 0, velocity = 0)\r\n...     print('Sensor pressed, motors are stopped now...')\r\n...     \r\n...     \r\n... "}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "Did the spike prime robot move forward and then stop when it encountered an obstruction?",
"image_num": "3",
"interval": "15"
}
 - Status: Getting visual feedback for: did the spike prime robot move forward and then stop when it encountered an obstruction?
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 
import motor 
from hub import port
import force_sensor
import motor_pair

# Pair the motors
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

sensor_state = force_sensor.pressed(port.C)
print('Sensor state:', sensor_state)

motor.run_for_degrees(port.A, -360, 75)
motor.run_for_degrees(port.B, 360, 75)

while not force_sensor.pressed(port.C):
   pass

# Stop the motors
motor_pair.move_for_time(motor_pair.PAIR_1, 10, 0, velocity = 0)
print('Sensor pressed, motors are stopped now...')


REPL response: 
>>> import motor 
>>> from hub import port
>>> import force_sensor
>>> import motor_pair
>>> 
>>> # Pair the motors
>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> 
>>> sensor_state = force_sensor.pressed(port.C)
>>> print('Sensor state:', sensor_state)
Sensor state: False
>>> 
>>> motor.run_for_degrees(port.A, -360, 75)
<awaitable>
>>> motor.run_for_degrees(port.B, 360, 75)
<awaitable>
>>> 
>>> while not force_sensor.pressed(port.C):
...        pass
...     
...     # Stop the motors
...     motor_pair.move_for_time(motor_pair.PAIR_1, 10, 0, velocity = 0)
...     print('Sensor pressed, motors are stopped now...')
...     
...     
... 
 - Status: Say cheese!
 - Status: Sent photos
 - Status: From the images provided, it seems that the SPIKE Prime robot is in different positions on the surface in each photo, suggesting that it has moved.

In the first image, the robot is located near a hand and there is a noticeable gap behind it. The second image shows a hand interacting with the robot, perhaps after it has moved, with fingers placed as if they are stopping or adjusting the robot. The third image shows the robot in nearly the same position as in the second image, but without the hand interfering, which could mean that the robot has come to a stop, possibly after encountering the hand as an obstruction.

While we can deduce that there was movement and interaction from the sequence of images, the details of the robot's behavior—whether it stopped due to an obstruction or whether the hand was used to stop it—are less clear and can only be inferred from the context of these images.
Submitting tool outputs: [{'tool_call_id': 'call_6GadgflNFUrjg3OwVw0raiec', 'output': '"From the images provided, it seems that the SPIKE Prime robot is in different positions on the surface in each photo, suggesting that it has moved.\\n\\nIn the first image, the robot is located near a hand and there is a noticeable gap behind it. The second image shows a hand interacting with the robot, perhaps after it has moved, with fingers placed as if they are stopping or adjusting the robot. The third image shows the robot in nearly the same position as in the second image, but without the hand interfering, which could mean that the robot has come to a stop, possibly after encountering the hand as an obstruction.\\n\\nWhile we can deduce that there was movement and interaction from the sequence of images, the details of the robot\'s behavior\\u2014whether it stopped due to an obstruction or whether the hand was used to stop it\\u2014are less clear and can only be inferred from the context of these images."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 12:50:22

 - Status: THREAD_ID: thread_NPLDK3CerdVJDiw2aci6NqLG
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_rknbGr32Gy3x7NOAJ254xQ4i', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "10"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)




==================== END ====================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================
 - Status: 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_JSrUgIBHfoNMqTR4aLsS5rVQ', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "Did the SPIKE Prime robot move forward?",
"image_num": "5",
"interval": "2"
}
 - Status: Getting visual feedback for: did the spike prime robot move forward?
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)




REPL response: 

>>> import motor_pair 

>>> from hub import port 

>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

>>> motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)

<awaitable>

>>> 

>>> 

>>> 
 - Status: Say cheese!
 - Status: Processing images
 - Status: Done
 - Status: I'm sorry, but there seems to be a misunderstanding with the images provided. The images primarily feature a person and parts of an interior space with shelving and various items, but there is no evidence of a SPIKE Prime robot or any robot visible to analyze for movement. Due to the lack of visual information regarding the robot, I cannot confirm whether the SPIKE Prime robot moved forward or not based on these images. If the robot is supposed to be in the images, it may be out of the frame or not visible due to the angle at which the photos were taken. If you have images that include the SPIKE Prime robot, please provide those for further analysis.
Submitting tool outputs: [{'tool_call_id': 'call_6JZLGU2q3ILxoVvDJ1YLIH6U', 'output': '"I\'m sorry, but there seems to be a misunderstanding with the images provided. The images primarily feature a person and parts of an interior space with shelving and various items, but there is no evidence of a SPIKE Prime robot or any robot visible to analyze for movement. Due to the lack of visual information regarding the robot, I cannot confirm whether the SPIKE Prime robot moved forward or not based on these images. If the robot is supposed to be in the images, it may be out of the frame or not visible due to the angle at which the photos were taken. If you have images that include the SPIKE Prime robot, please provide those for further analysis."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)",
"runtime": "20"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)




==================== END ====================


MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================
 - Status: 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_r9Kaxoix7h9GOvvoeoBUEqaa', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "Did the SPIKE Prime robot move forward?",
"image_num": "10",
"interval": "2"
}
 - Status: Getting visual feedback for: did the spike prime robot move forward?
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)




REPL response: 

>>> import motor_pair 

>>> from hub import port 

>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

>>> motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)

<awaitable>

>>> 

>>> 

>>> 
 - Status: Say cheese!
 - Status: Processing images
 - Status: Done
 - Status: I'm sorry, but I am unable to provide any information about the movement of a SPIKE Prime robot as the images provided are of a person and do not show a SPIKE Prime robot or any other objects that would allow for deducing motion as described. If you have images that include the SPIKE Prime robot, please share them, and I can assist you further.
Submitting tool outputs: [{'tool_call_id': 'call_S2y78QeiSVS87ps4MZGnaymO', 'output': '"I\'m sorry, but I am unable to provide any information about the movement of a SPIKE Prime robot as the images provided are of a person and do not show a SPIKE Prime robot or any other objects that would allow for deducing motion as described. If you have images that include the SPIKE Prime robot, please share them, and I can assist you further."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 12:52:51

 - Status: THREAD_ID: thread_zme9RcTAVbxK0ODF1U26wOVQ
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_rk2uYB7wVQ49nrFIpJbVjo9m', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "2"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)




==================== END ====================

================== SERIAL OUPUT ==================


>>> import motor_pair 

>>> from hub import port 

>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ValueError: PORTA is assigned to PAIR_1

>>> motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)

<awaitable>

>>> 

>>> 

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_c2ObTOp4d3TKi0OwXmb0TSq9', 'output': '\r\n>>> import motor_pair \r\n>>> from hub import port \r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the motors move forward?"
}
Hey Human, Did the motors move forward?
Submitting tool outputs: [{'tool_call_id': 'call_LGE2JelMQ8aGNCGmHNppzuSI', 'output': 'yes!'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "force_sensor"
}
 - Status: Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_1CD3h5BDoJpYzjCsj8gwqFC0', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import force_sensor \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while not force_sensor.pressed(port.C): \n     motor_pair.move_for_time(motor_pair.PAIR_1, 200, 0, velocity=200)",
"runtime": "10"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

import force_sensor 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

while not force_sensor.pressed(port.C): 

    motor_pair.move_for_time(motor_pair.PAIR_1, 200, 0, velocity=200)




==================== END ====================

================== SERIAL OUPUT ==================


>>> import motor_pair 

>>> from hub import port 

>>> import force_sensor 

>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ValueError: PORTA is assigned to PAIR_1

>>> while not force_sensor.pressed(port.C): 

...     motor_pair.move_for_time(motor_pair.PAIR_1, 200, 0, velocity=200)

...     

...     

... 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_pw8hJYFh6c2QASaWfxpZMdlO', 'output': '\r\n>>> import motor_pair \r\n>>> from hub import port \r\n>>> import force_sensor \r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nValueError: PORTA is assigned to PAIR_1\r\n>>> while not force_sensor.pressed(port.C): \r\n...     motor_pair.move_for_time(motor_pair.PAIR_1, 200, 0, velocity=200)\r\n...     \r\n...     \r\n... '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot stop when the touch sensor was pressed?"
}
Hey Human, Did the robot stop when the touch sensor was pressed?
Submitting tool outputs: [{'tool_call_id': 'call_HNaucAYvfuxZiRx5CGgpIF8r', 'output': 'no, there was an error'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_ZYhuLHctjSdrOyXAjPkp0Pe3', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import force_sensor \n \n setup = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while not force_sensor.pressed(port.C): \n     movement = motor_pair.move_for_time(setup, 200, 0, velocity=200)",
"runtime": "10"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

import force_sensor 



setup = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

while not force_sensor.pressed(port.C): 

    movement = motor_pair.move_for_time(setup, 200, 0, velocity=200)




==================== END ====================

================== SERIAL OUPUT ==================


>>> import motor_pair 

>>> from hub import port 

>>> import force_sensor 

>>> 

>>> setup = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

ValueError: PORTA is assigned to PAIR_1

>>> while not force_sensor.pressed(port.C): 

...     movement = motor_pair.move_for_time(setup, 200, 0, velocity=200)

...     

...     

... 
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 13:01:14

 - Status: THREAD_ID: thread_T7sh1c4NnyqFn6MTdXnQY2Go
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_IkdPJ99xPDkBMnfF4hfl4HSV', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "10"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)




==================== END ====================
OK

MPY: sync filesystems

MPY: soft reboot

raw REPL; CTRL-B to exit

>


================== SERIAL OUPUT ==================
 - Status: 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Z1hz4ejGw1ytzD3Yced3zuQV', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "Did the spike prime robot move forward over time",
"image_num": "3",
"interval": "2"
}
 - Status: Getting visual feedback for: did the spike prime robot move forward over time
 - Status: TAKING IMAGES IN 3 SECONDS
 - Status: Running code: 

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)




REPL response: 
 - Status: Say cheese!
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 13:09:55

 - Status: THREAD_ID: thread_ZZbSj30EB0YE0DsOLlid62Fn
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_iE4yyzNpx4l2ZLwIMNfGc9Bj', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)




==================== END ====================


================== SERIAL OUPUT ==================
 - Status: 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_CSKmbW1c9QLQbcp3GVPfVWFV', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 13:11:02

 - Status: THREAD_ID: thread_XXX0DC49dgbkKSLwlQbFcW6q
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_SJMFxyWNfAGCAjJao7Mi2TbW', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)




==================== END ====================

================== SERIAL OUPUT ==================
 - Status: 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_GgtlHTHE7UYPzUyEZUJZdnZh', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-06 13:12:29

 - Status: THREAD_ID: thread_feSPhQwvwWZg06J4cLsMa3n8
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_c9W3XCqLmDtk1mlVDxlDuazB', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)




==================== END ====================

================== SERIAL OUPUT ==================
 - Status: 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_J2BjW4lQnyBbHk45s8BMnW3L', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 10:36:15

 - Status: THREAD_ID: thread_Kzt35VaTlX7IBVodOHNxqAON
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_nN0WKvADkHieGZMqrXdKXmnc', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)




==================== END ====================

================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> import motor_pair 

>>> from hub import port 

>>> motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

>>> motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)

<awaitable>

>>> 

>>> 

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Hwvllq4x3yl97USZrSSH4WlS', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> import motor_pair \r\n>>> from hub import port \r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n>>> motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)\r\n<awaitable>\r\n>>> \r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_0xzGUNi4n50FljZKWkrKG3Mn', 'output': 'yeah'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
 - Status: Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_nOBgJbuohjzBwg6pyqVusOfC', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which port is the distance sensor connected to?"
}
Hey Human, Which port is the distance sensor connected to?
Submitting tool outputs: [{'tool_call_id': 'call_wN1xxEyxkoQ9I7cCmHbx3bRP', 'output': 'D'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import utime \n start_time = utime.ticks_ms() \n while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: \n     print(distance_sensor.distance(port.D)) \n     utime.sleep(0.5)",
"runtime": "7"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

import utime 

start_time = utime.ticks_ms() 

while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: 

    print(distance_sensor.distance(port.D)) 

    utime.sleep(0.5)




==================== END ====================

================== SERIAL OUPUT ==================


>>> import distance_sensor 

>>> from hub import port 

>>> import utime 

>>> start_time = utime.ticks_ms() 

>>> while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: 

...     print(distance_sensor.distance(port.D)) 

...         utime.sleep(0.5)

...         

...         

... 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_QropN65SOgYBSaTMJ0PCQebv', 'output': '\r\n>>> import distance_sensor \r\n>>> from hub import port \r\n>>> import utime \r\n>>> start_time = utime.ticks_ms() \r\n>>> while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: \r\n...     print(distance_sensor.distance(port.D)) \r\n...         utime.sleep(0.5)\r\n...         \r\n...         \r\n... '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What were the distance readings printed to the console?"
}
Hey Human, What were the distance readings printed to the console?
Submitting tool outputs: [{'tool_call_id': 'call_wNAoKGPr0fvnlEYWMYw9bV7c', 'output': 'no, add more newlines after the while loop'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import utime \n start_time = utime.ticks_ms() \n while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: \n     print(distance_sensor.distance(port.D)) \n     utime.sleep(0.5) \n",
"runtime": "7"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

import utime 

start_time = utime.ticks_ms() 

while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: 

    print(distance_sensor.distance(port.D)) 

    utime.sleep(0.5) 






==================== END ====================

================== SERIAL OUPUT ==================


>>> import distance_sensor 

>>> from hub import port 

>>> import utime 

>>> start_time = utime.ticks_ms() 

>>> while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: 

...     print(distance_sensor.distance(port.D)) 

...         utime.sleep(0.5) 

...         

...         

... 

Traceback (most recent call last):

  File "<stdin>", line 3

IndentationError: unexpected indent

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_rkGtPsjUfdZo7htaNRTbrzDf', 'output': '\r\n>>> import distance_sensor \r\n>>> from hub import port \r\n>>> import utime \r\n>>> start_time = utime.ticks_ms() \r\n>>> while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: \r\n...     print(distance_sensor.distance(port.D)) \r\n...         utime.sleep(0.5) \r\n...         \r\n...         \r\n... \r\nTraceback (most recent call last):\r\n  File "<stdin>", line 3\r\nIndentationError: unexpected indent\r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import utime \n start_time = utime.ticks_ms() \n while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: \n     print(distance_sensor.distance(port.D)) \n     utime.sleep(0.5) \n\n",
"runtime": "7"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

import utime 

start_time = utime.ticks_ms() 

while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: 

    print(distance_sensor.distance(port.D)) 

    utime.sleep(0.5) 








==================== END ====================

================== SERIAL OUPUT ==================


>>> import distance_sensor 

>>> from hub import port 

>>> import utime 

>>> start_time = utime.ticks_ms() 

>>> while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: 

...     print(distance_sensor.distance(port.D)) 

...         utime.sleep(0.5) 

...         

...         

... 

Traceback (most recent call last):

  File "<stdin>", line 3

IndentationError: unexpected indent

>>> 

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_9LMBHavMQvnhsKrQ5OSSBoRI', 'output': '\r\n>>> import distance_sensor \r\n>>> from hub import port \r\n>>> import utime \r\n>>> start_time = utime.ticks_ms() \r\n>>> while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: \r\n...     print(distance_sensor.distance(port.D)) \r\n...         utime.sleep(0.5) \r\n...         \r\n...         \r\n... \r\nTraceback (most recent call last):\r\n  File "<stdin>", line 3\r\nIndentationError: unexpected indent\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import utime \n start_time = utime.ticks_ms() \n while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: \n     print(distance_sensor.distance(port.D)) \n utime.sleep(0.5) \n\n",
"runtime": "7"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

import utime 

start_time = utime.ticks_ms() 

while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: 

    print(distance_sensor.distance(port.D)) 

utime.sleep(0.5) 








==================== END ====================

================== SERIAL OUPUT ==================


>>> import distance_sensor 

>>> from hub import port 

>>> import utime 

>>> start_time = utime.ticks_ms() 

>>> while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: 

...     print(distance_sensor.distance(port.D)) 

...     utime.sleep(0.5) 

...     

...     

... 

-1


 - Status: -1


 - Status: -1


 - Status: -1

-1


 - Status: -1


 - Status: -1


 - Status: -1

-1


 - Status: -1


>>> 

>>> 
==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_VL7bBQ6dlC4gkz2A23kjXQpc', 'output': '\r\n>>> import distance_sensor \r\n>>> from hub import port \r\n>>> import utime \r\n>>> start_time = utime.ticks_ms() \r\n>>> while utime.ticks_diff(utime.ticks_ms(), start_time) <= 5000: \r\n...     print(distance_sensor.distance(port.D)) \r\n...     utime.sleep(0.5) \r\n...     \r\n...     \r\n... \r\n-1\r\n\n-1\r\n\n-1\r\n\n-1\r\n-1\r\n\n-1\r\n\n-1\r\n\n-1\r\n-1\r\n\n-1\r\n\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What were the distance readings printed to the console?"
}
Hey Human, What were the distance readings printed to the console?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 10:56:03

 - Status: THREAD_ID: thread_WPdzWYM3J8ivxlbJhqkna21I
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_DJqJUR7yeMUjubCUdpljuMQ9', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "3"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)




==================== END ====================

================== SERIAL OUPUT ==================


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)

=== 


=== 


=== 

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ZgUXqZbHrCMWQF5glfGnjdKs', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)\r\n=== \n\r\n=== \n\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_EBtCAyZc8UIQq0HRVCj4L8wL', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
 - Status: Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_xSEAA61sKkI4uk2rvoM6L48P', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which port is the distance sensor connected to?"
}
Hey Human, Which port is the distance sensor connected to?
Submitting tool outputs: [{'tool_call_id': 'call_0EizysUkdtXTKb4nIlFXlb4f', 'output': 'D'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import time \n for i in range(5): \n     print(distance_sensor.distance(port.D)) \n     time.sleep(1)",
"runtime": "7"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

import time 

for i in range(5): 

    print(distance_sensor.distance(port.D)) 

    time.sleep(1)




==================== END ====================

================== SERIAL OUPUT ==================


=== 
import distance_sensor 

=== 
from hub import port 

=== 
import time 

=== 
for i in range(5): 

=== 
    print(distance_sensor.distance(port.D)) 

=== 
    time.sleep(1)

=== 


=== 


=== 

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_7f8ipV6gYFxVOsFRU7xaqB0H', 'output': '\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport time \r\n=== \nfor i in range(5): \r\n=== \n    print(distance_sensor.distance(port.D)) \r\n=== \n    time.sleep(1)\r\n=== \n\r\n=== \n\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What were the distance sensor readings over the 5 second period?"
}
Hey Human, What were the distance sensor readings over the 5 second period?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:00:31

 - Status: THREAD_ID: thread_MXH8tpiDq67gKZerFJ92yglt
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:01:14

 - Status: THREAD_ID: thread_VF4Nop1oItrAJIWsRxwhxSmd
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_hi4UeH0ZXd6Wv1EDYTqeK9Ur', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_time(motor_pair.PAIR_1, 5000, 0, velocity=200)",
"runtime": "10"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_time(motor_pair.PAIR_1, 5000, 0, velocity=200)




==================== END ====================

================== SERIAL OUPUT ==================


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 5000, 0, velocity=200)

=== 


=== 


=== 

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_4zVL8Gau4dQCuKkQi62tsO0Y', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 5000, 0, velocity=200)\r\n=== \n\r\n=== \n\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:02:52

 - Status: THREAD_ID: thread_t1estB8vgUFeikrxoi4JYHV4
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:03:18

 - Status: THREAD_ID: thread_DSTlDoor7llNWo6VImCctF4g
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_GRFb83Vr6DIsRwiq5V33HZOl', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)",
"runtime": "3"
}

================== RUNNING CODE ==================
        import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)
==================== END ====================

================== SERIAL OUPUT ==================
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)

=== 

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_15TWhfIZsPt1Po4xUi3o9DGX', 'output': 'import motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:12:11

 - Status: THREAD_ID: thread_dihgV0uW26GVzTMzEinBKkcz
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_R3ZWlZzihWFkFL9csrOFav4P', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
==================== END ====================

================== SERIAL OUPUT ==================


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)

=== 

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_E9U63DbjQ3SWCxVKdgeFGcDx', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:13:20

 - Status: THREAD_ID: thread_Sg2V3j7V1WLEHujreUqqO2Ng
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_K3fxp0quVwJFRLo6I7sNC81W', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "3"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)
==================== END ====================

================== SERIAL OUPUT ==================


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)

=== 

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_4PP3AGozoTpsZi6FNAD6a8Nk', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the bot move forward?"
}
Hey Human, Did the bot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:15:22

 - Status: THREAD_ID: thread_SrUOwgxaNYKpzdg1hVoEMWct
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_sgPkxGGD7l4cKJvYFX0aJwAS', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import hub \n from motor import run_for_degrees \n run_for_degrees(hub.port.E, 360, 50) \n run_for_degrees(hub.port.F, 360, 50)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import hub 

from motor import run_for_degrees 

run_for_degrees(hub.port.E, 360, 50) 

run_for_degrees(hub.port.F, 360, 50)
==================== END ====================


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


<awaitable>

<awaitable>

>>> 

>>> 


=== 
import hub 

=== 
from motor import run_for_degrees 

=== 
run_for_degrees(hub.port.E, 360, 50) 

=== 
run_for_degrees(hub.port.F, 360, 50)

=== 

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_D7bupHxRR4tDmc41CcO4mivz', 'output': '\r\n=== \nimport hub \r\n=== \nfrom motor import run_for_degrees \r\n=== \nrun_for_degrees(hub.port.E, 360, 50) \r\n=== \nrun_for_degrees(hub.port.F, 360, 50)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_WtkHGHnUqRHZUYuQVzuqIitp', 'output': 'it rotated'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import hub \n from motor import run_for_degrees \n run_for_degrees(hub.port.E, 360, 50) \n run_for_degrees(hub.port.F, -360, 50)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import hub 

from motor import run_for_degrees 

run_for_degrees(hub.port.E, 360, 50) 

run_for_degrees(hub.port.F, -360, 50)
==================== END ====================


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


<awaitable>

<awaitable>

>>> 

>>> 


=== 
import hub 

=== 
from motor import run_for_degrees 

=== 
run_for_degrees(hub.port.E, 360, 50) 

=== 
run_for_degrees(hub.port.F, -360, 50)

=== 

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_rnI1jDgDllUcfp6LZkMqWQEP', 'output': '\r\n=== \nimport hub \r\n=== \nfrom motor import run_for_degrees \r\n=== \nrun_for_degrees(hub.port.E, 360, 50) \r\n=== \nrun_for_degrees(hub.port.F, -360, 50)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_19lzWAYpSi8YpLiRGjtgqYcT', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_Zpfwpja3CXWIW4omX21H5GJd', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import hub \n import motor_pair \n motor_pair.pair(motor_pair.PAIR_1, hub.port.E, hub.port.F) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=50)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import hub 

import motor_pair 

motor_pair.pair(motor_pair.PAIR_1, hub.port.E, hub.port.F) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=50)
==================== END ====================


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


Traceback (most recent call last):

  File "<stdin>", line 5, in <module>

ValueError: PORTE is assigned to PAIR_1

>>> 

>>> 


=== 
import hub 

=== 
import motor_pair 

=== 
motor_pair.pair(motor_pair.PAIR_1, hub.port.E, hub.port.F) 

=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=50)

=== 

==================== END ====================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_kgtJPFokV2HbUbjhBT4raVye', 'output': '\r\n=== \nimport hub \r\n=== \nimport motor_pair \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, hub.port.E, hub.port.F) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=50)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:20:07

 - Status: THREAD_ID: thread_JLjegyiL6pcBURd975BvxHUL
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_zEVjFPZiE8YugIcaQjaMj989', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=100)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=100)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot


 - Status: 

================== SERIAL OUPUT ==================
 - Status: 
 - Status: 
==================== END ====================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_3A79UN5pXI4CASXfkXSVlouV', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:21:55

 - Status: THREAD_ID: thread_s1EJQicA76ShuzKPaPaG3z7m
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_ezSAt8CrDYC7JBa76S2FMiWb', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "2"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================
 - Status: 
==================== END ====================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_1swEvffoUyvyAXSVVXQ0IeVc', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:22:43

 - Status: THREAD_ID: thread_nfH54HlVoDNTXa2zdP91bo4c
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_JYN7DPHDJjIZvRZiG9UGqTzs', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \n from hub import port \n motor.run_for_degrees(port.E, 360, 75) \n motor.run_for_degrees(port.F, 360, 75)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor 

from hub import port 

motor.run_for_degrees(port.E, 360, 75) 

motor.run_for_degrees(port.F, 360, 75)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 

================== SERIAL OUPUT ==================


>>> import motor 

>>> from hub import port 

>>> motor.run_for_degrees(port.E, 360, 75) 

<awaitable>

>>> motor.run_for_degrees(port.F, 360, 75)

<awaitable>

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_dmS7NLURN8AH4echlNuPrAaS', 'output': '\r\n>>> import motor \r\n>>> from hub import port \r\n>>> motor.run_for_degrees(port.E, 360, 75) \r\n<awaitable>\r\n>>> motor.run_for_degrees(port.F, 360, 75)\r\n<awaitable>\r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the bot move forward?"
}
Hey Human, Did the bot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_6RzdjTFhpOgr5KcZYzzAHNA0', 'output': 'yep, now use motor pair'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_Xzy7xQRapfgRFKAF7HfARGAl', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, 75)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, 75)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 

================== SERIAL OUPUT ==================


>>> import motor_pair 

>>> from hub import port 

>>> motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

>>> motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, 75)

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>

TypeError: extra positional arguments given

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_NNU46cTszKb5D8klgZyesyxb', 'output': '\r\n>>> import motor_pair \r\n>>> from hub import port \r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n>>> motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, 75)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 1, in <module>\r\nTypeError: extra positional arguments given\r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "The code returned a TypeError: extra positional arguments given. What could be the reason?"
}
Hey Human, The code returned a TypeError: extra positional arguments given. What could be the reason?
Submitting tool outputs: [{'tool_call_id': 'call_Srrs9EiqeNSt0gw2cUXtl2K8', 'output': 'idk, try again'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=75)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=75)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 

================== SERIAL OUPUT ==================


>>> import motor_pair 

>>> from hub import port 

>>> motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

>>> motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=75)

<awaitable>

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_JhpAze1G5keTUwfKPrPb0WzJ', 'output': '\r\n>>> import motor_pair \r\n>>> from hub import port \r\n>>> motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n>>> motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=75)\r\n<awaitable>\r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the bot move forward?"
}
Hey Human, Did the bot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:25:50

 - Status: THREAD_ID: thread_pUnRT0tYXTU7bwXO53fjO2Kg
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_38dzZgmdrvtk7AfPRhySWorN', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "2"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


<awaitable>

>>> 

>>> 


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_HdjCw7dNHBi7DFOGGLYLbeO2', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_H8qmYVqgHbsFtLHXmNJGiGWz', 'output': 'yep'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: completed
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_tlM931Pk9CGQkMxrDtUssS8w', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n for i in range(5): \n     motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 100, velocity=200)",
"runtime": "20"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

for i in range(5): 

    motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 100, velocity=200)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

>>> 

>>> 


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
for i in range(5): 

=== 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 100, velocity=200)

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_9JrbTFQsK65bKw8sxJ216kDS', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nfor i in range(5): \r\n=== \n    motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 100, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot rotate 5 times?"
}
Hey Human, Did the robot rotate 5 times?
Submitting tool outputs: [{'tool_call_id': 'call_9SNQJdvIAYOaMlaQ6Fisj1YT', 'output': 'yep, now print the distance sensor value 10 times. connected to port D'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
 - Status: Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_V07wTiDhfJDuTZTcX1aHVCWY', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n for i in range(10): \n     print(distance_sensor.distance(port.D))",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

for i in range(10): 

    print(distance_sensor.distance(port.D))
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


105

105

105

105

105

105

105

105

105

105

>>> 

>>> 


=== 
import distance_sensor 

=== 
from hub import port 

=== 
for i in range(10): 

=== 
    print(distance_sensor.distance(port.D))

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_2CqypIbvko0KU7ovzUEIkqzT', 'output': '\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nfor i in range(10): \r\n=== \n    print(distance_sensor.distance(port.D))\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "time"
}
 - Status: Querying documentation for: time
No available information on time. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help.
Submitting tool outputs: [{'tool_call_id': 'call_5RF2sG34nlQ1IxqIkSS6biIF', 'output': '"No available information on time. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "How can I add a delay of 1 second in the loop in MicroPython?"
}
Hey Human, How can I add a delay of 1 second in the loop in MicroPython?
Submitting tool outputs: [{'tool_call_id': 'call_IrJS8cnFMXDSo3Laj0Q0iCIH', 'output': 'time.sleep(10'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import time \n for i in range(10): \n     print(distance_sensor.distance(port.D)) \n     time.sleep(1)",
"runtime": "15"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

import time 

for i in range(10): 

    print(distance_sensor.distance(port.D)) 

    time.sleep(1)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================
 - Status: 

-1




=== 
import distance_sensor 

=== 
from hub import port 

=== 
import time 

=== 
for i in range(10): 

=== 
    print(distance_sensor.distance(port.D)) 

=== 
    time.sleep(1)

=== 

 - Status: -1


 - Status: 205


 - Status: 40


 - Status: -1


 - Status: -1


 - Status: 342


 - Status: 240


 - Status: 151


 - Status: 158


>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_CtGFlTUW1iXxxqBpifMKWWWU', 'output': '\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport time \r\n=== \nfor i in range(10): \r\n=== \n    print(distance_sensor.distance(port.D)) \r\n=== \n    time.sleep(1)\r\n=== \n\n-1\r\n\n205\r\n\n40\r\n\n-1\r\n\n-1\r\n\n342\r\n\n240\r\n\n151\r\n\n158\r\n\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the program print the distance sensor value 10 times with a delay of 1 second between each print?"
}
Hey Human, Did the program print the distance sensor value 10 times with a delay of 1 second between each print?
Submitting tool outputs: [{'tool_call_id': 'call_mjJXD47uvLTej8vAIZxH8p7q', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:31:50

 - Status: THREAD_ID: thread_L3lPrP4fUCzzOyuNdDQ0R9Qx
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_gM3CocZx8zE8ueFCGQmu6H0n', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)",
"runtime": "3"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


<awaitable>

>>> 

>>> 


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_6e9K5BZwg51I59hR4uJLb69u', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_kP4U8HF7YLWV9zmGg3hlaqit', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
 - Status: Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_llBHTf4l3c5hrO06HCEheIPM', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which port is the distance sensor connected to?"
}
Hey Human, Which port is the distance sensor connected to?
Submitting tool outputs: [{'tool_call_id': 'call_eTxqL02SslIJI2qzC0QDETVF', 'output': 'D'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What is the set distance value that the robot should maintain?"
}
Hey Human, What is the set distance value that the robot should maintain?
Submitting tool outputs: [{'tool_call_id': 'call_k3lui54wGaf1VvE6K6vXoFcx', 'output': 'a value of 100'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor_pair \n d_sensor = distance_sensor.DistanceSensor(port.D) \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n while True: \n \t current_distance = d_sensor.get_distance() \n \t if current_distance != -1: \n \t \t if current_distance < 100: \n \t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) \n \t \t elif current_distance > 100: \n \t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200)",
"runtime": "3"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

import motor_pair 

d_sensor = distance_sensor.DistanceSensor(port.D) 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

while True: 

	 current_distance = d_sensor.get_distance() 

	 if current_distance != -1: 

	 	 if current_distance < 100: 

	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 

	 	 elif current_distance > 100: 

	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200)
==================== END ====================


MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


Traceback (most recent call last):

  File "<stdin>", line 6, in <module>

AttributeError: 'module' object has no attribute 'DistanceSensor'

>>> 

>>> 


=== 
import distance_sensor 

=== 
from hub import port 

=== 
import motor_pair 

=== 
d_sensor = distance_sensor.DistanceSensor(port.D) 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
while True: 

=== 
	 current_distance = d_sensor.get_distance() 

=== 
	 if current_distance != -1: 

=== 
	 	 if current_distance < 100: 

=== 
	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 

=== 
	 	 elif current_distance > 100: 

=== 
	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200)

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_fnqWvZifkQfw4Hsm0cdjjBl0', 'output': '\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport motor_pair \r\n=== \nd_sensor = distance_sensor.DistanceSensor(port.D) \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nwhile True: \r\n=== \n\t current_distance = d_sensor.get_distance() \r\n=== \n\t if current_distance != -1: \r\n=== \n\t \t if current_distance < 100: \r\n=== \n\t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) \r\n=== \n\t \t elif current_distance > 100: \r\n=== \n\t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot adjust its position to maintain the set distance?"
}
Hey Human, Did the robot adjust its position to maintain the set distance?
Submitting tool outputs: [{'tool_call_id': 'call_37M0JgE2WdeVSp2lf6CswuyW', 'output': 'no, run the program for longer it ended too soon'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor_pair \n d_sensor = distance_sensor.DistanceSensor(port.D) \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n while True: \n \t current_distance = d_sensor.get_distance() \n \t if current_distance != -1: \n \t \t if current_distance < 100: \n \t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) \n \t \t elif current_distance > 100: \n \t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200)",
"runtime": "10"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

import motor_pair 

d_sensor = distance_sensor.DistanceSensor(port.D) 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

while True: 

	 current_distance = d_sensor.get_distance() 

	 if current_distance != -1: 

	 	 if current_distance < 100: 

	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 

	 	 elif current_distance > 100: 

	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200)
==================== END ====================


MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


Traceback (most recent call last):

  File "<stdin>", line 6, in <module>

AttributeError: 'module' object has no attribute 'DistanceSensor'

>>> 

>>> 


=== 
import distance_sensor 

=== 
from hub import port 

=== 
import motor_pair 

=== 
d_sensor = distance_sensor.DistanceSensor(port.D) 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
while True: 

=== 
	 current_distance = d_sensor.get_distance() 

=== 
	 if current_distance != -1: 

=== 
	 	 if current_distance < 100: 

=== 
	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 

=== 
	 	 elif current_distance > 100: 

=== 
	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200)

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_gs1FDKspkB2T3pYwIRYRJ6tK', 'output': '\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport motor_pair \r\n=== \nd_sensor = distance_sensor.DistanceSensor(port.D) \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nwhile True: \r\n=== \n\t current_distance = d_sensor.get_distance() \r\n=== \n\t if current_distance != -1: \r\n=== \n\t \t if current_distance < 100: \r\n=== \n\t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) \r\n=== \n\t \t elif current_distance > 100: \r\n=== \n\t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot adjust its position to maintain the set distance now?"
}
Hey Human, Did the robot adjust its position to maintain the set distance now?
Submitting tool outputs: [{'tool_call_id': 'call_u9ZUvjtLapiqqO2cAxVTsPFP', 'output': 'no, can you print the reading also, and add a time delay'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor_pair \n import time \n d_sensor = distance_sensor.DistanceSensor(port.D) \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n while True: \n \t current_distance = d_sensor.get_distance() \n \t print('Distance: ', current_distance) \n \t if current_distance != -1: \n \t \t if current_distance < 100: \n \t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) \n \t \t elif current_distance > 100: \n \t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200) \n \t time.sleep(1)",
"runtime": "10"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

import motor_pair 

import time 

d_sensor = distance_sensor.DistanceSensor(port.D) 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

while True: 

	 current_distance = d_sensor.get_distance() 

	 print('Distance: ', current_distance) 

	 if current_distance != -1: 

	 	 if current_distance < 100: 

	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 

	 	 elif current_distance > 100: 

	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200) 

	 time.sleep(1)
==================== END ====================


MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


Traceback (most recent call last):

  File "<stdin>", line 7, in <module>

AttributeError: 'module' object has no attribute 'DistanceSensor'

>>> 

>>> 


=== 
import distance_sensor 

=== 
from hub import port 

=== 
import motor_pair 

=== 
import time 

=== 
d_sensor = distance_sensor.DistanceSensor(port.D) 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
while True: 

=== 
	 current_distance = d_sensor.get_distance() 

=== 
	 print('Distance: ', current_distance) 

=== 
	 if current_distance != -1: 

=== 
	 	 if current_distance < 100: 

=== 
	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 

=== 
	 	 elif current_distance > 100: 

=== 
	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200) 

=== 
	 time.sleep(1)

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_r9WJxPedsLKUopLfFSSdcBK9', 'output': "\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport motor_pair \r\n=== \nimport time \r\n=== \nd_sensor = distance_sensor.DistanceSensor(port.D) \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nwhile True: \r\n=== \n\t current_distance = d_sensor.get_distance() \r\n=== \n\t print('Distance: ', current_distance) \r\n=== \n\t if current_distance != -1: \r\n=== \n\t \t if current_distance < 100: \r\n=== \n\t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) \r\n=== \n\t \t elif current_distance > 100: \r\n=== \n\t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200) \r\n=== \n\t time.sleep(1)\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "This time did the robot adjust its position to maintain the set distance? And was the distance value printed?"
}
Hey Human, This time did the robot adjust its position to maintain the set distance? And was the distance value printed?
Submitting tool outputs: [{'tool_call_id': 'call_9MwCEkEWrUfh6aJGKUJnFtZX', 'output': "I wasn't looking , try again"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor_pair \n import time \n d_sensor = distance_sensor.DistanceSensor(port.D) \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n while True: \n \t current_distance = d_sensor.get_distance() \n \t print('Distance: ', current_distance) \n \t if current_distance != -1: \n \t \t if current_distance < 100: \n \t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) \n \t \t elif current_distance > 100: \n \t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200) \n \t time.sleep(1)",
"runtime": "15"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

import motor_pair 

import time 

d_sensor = distance_sensor.DistanceSensor(port.D) 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

while True: 

	 current_distance = d_sensor.get_distance() 

	 print('Distance: ', current_distance) 

	 if current_distance != -1: 

	 	 if current_distance < 100: 

	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 

	 	 elif current_distance > 100: 

	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200) 

	 time.sleep(1)
==================== END ====================


MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


Traceback (most recent call last):

  File "<stdin>", line 7, in <module>

AttributeError: 'module' object has no attribute 'DistanceSensor'

>>> 

>>> 


=== 
import distance_sensor 

=== 
from hub import port 

=== 
import motor_pair 

=== 
import time 

=== 
d_sensor = distance_sensor.DistanceSensor(port.D) 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
while True: 

=== 
	 current_distance = d_sensor.get_distance() 

=== 
	 print('Distance: ', current_distance) 

=== 
	 if current_distance != -1: 

=== 
	 	 if current_distance < 100: 

=== 
	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 

=== 
	 	 elif current_distance > 100: 

=== 
	 	 	 motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200) 

=== 
	 time.sleep(1)

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ssXKgsFmuLPQdg3YVwly33hF', 'output': "\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport motor_pair \r\n=== \nimport time \r\n=== \nd_sensor = distance_sensor.DistanceSensor(port.D) \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nwhile True: \r\n=== \n\t current_distance = d_sensor.get_distance() \r\n=== \n\t print('Distance: ', current_distance) \r\n=== \n\t if current_distance != -1: \r\n=== \n\t \t if current_distance < 100: \r\n=== \n\t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) \r\n=== \n\t \t elif current_distance > 100: \r\n=== \n\t \t \t motor_pair.move_for_time(motor_pair.PAIR_1, -1000, 0, velocity=200) \r\n=== \n\t time.sleep(1)\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot adjust its position to maintain the set distance? And was the distance value printed this time?"
}
Hey Human, Did the robot adjust its position to maintain the set distance? And was the distance value printed this time?
Submitting tool outputs: [{'tool_call_id': 'call_fOkWoiau9Pzqj2a2qYTJE1HH', 'output': "no, it didn't move, do some smaller tests to debug"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n d_sensor = distance_sensor.DistanceSensor(port.D) \n current_distance = d_sensor.get_distance() \n print('Distance: ', current_distance)",
"runtime": "2"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

d_sensor = distance_sensor.DistanceSensor(port.D) 

current_distance = d_sensor.get_distance() 

print('Distance: ', current_distance)
==================== END ====================


MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


Traceback (most recent call last):

  File "<stdin>", line 5, in <module>

AttributeError: 'module' object has no attribute 'DistanceSensor'

>>> 

>>> 


=== 
import distance_sensor 

=== 
from hub import port 

=== 
d_sensor = distance_sensor.DistanceSensor(port.D) 

=== 
current_distance = d_sensor.get_distance() 

=== 
print('Distance: ', current_distance)

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_lWZ0afSsmFNqyg7znASszjsX', 'output': "\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nd_sensor = distance_sensor.DistanceSensor(port.D) \r\n=== \ncurrent_distance = d_sensor.get_distance() \r\n=== \nprint('Distance: ', current_distance)\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What distance was printed by the distance sensor?"
}
Hey Human, What distance was printed by the distance sensor?
Submitting tool outputs: [{'tool_call_id': 'call_grrgPe8aaf8wmVaQ1Q67mk13', 'output': 'no, nothing printed, can you do some test print statements'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Testing print functionality')",
"runtime": "2"
}

================== RUNNING CODE ==================
        

print('Testing print functionality')
==================== END ====================


MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


Testing print functionality

>>> 

>>> 


=== 
print('Testing print functionality')

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_3vgWcl9tR5n7TCj2yptFqpbw', 'output': "\r\n=== \nprint('Testing print functionality')\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the 'Testing print functionality' statement print?"
}
Hey Human, Did the 'Testing print functionality' statement print?
Submitting tool outputs: [{'tool_call_id': 'call_bchNcGpXiYOgN2ykV1nA3ASa', 'output': 'no, something is wrong on my end'}]
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:44:32

 - Status: THREAD_ID: thread_uoFtFioqF2sV1DNQx0Vdrv8p
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello World')",
"runtime": "1"
}

================== RUNNING CODE ==================
        

print('Hello World')
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


Hello World

>>> 

>>> 


=== 
print('Hello World')

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ZkOrsmAarOKrJxHUxCIuwMh9', 'output': "\r\n=== \nprint('Hello World')\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot print 'Hello World'"
}
Hey Human, Did the robot print 'Hello World'
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:46:41

 - Status: THREAD_ID: thread_k0emzwWiTFFJgF60O4FypBDj
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "sound"
}
 - Status: Querying documentation for: sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_DTIxKwWx3JfmRvloA1U9DFQy', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "from hub import sound \n sound.beep()",
"runtime": "1"
}

================== RUNNING CODE ==================
        

from hub import sound 

sound.beep()
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


<awaitable>

>>> 

>>> 


=== 
from hub import sound 

=== 
sound.beep()

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_7Cei7oaugiAblvEZi6aeYigP', 'output': '\r\n=== \nfrom hub import sound \r\n=== \nsound.beep()\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot emit a beep sound?"
}
Hey Human, Did the robot emit a beep sound?
Submitting tool outputs: [{'tool_call_id': 'call_5bZQzSYKKuvtzV25qX9fiOtD', 'output': 'yeah, now print("hello world")'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "light_matrix"
}
 - Status: Querying documentation for: light_matrix
{'name': 'light_matrix', 'description': 'a class that enables control of built in SPIKE Prime led matrix', 'initialization': 'none', 'required imports': 'from hub import light_matrix', 'function': [{'name': 'clear', 'syntax': 'color_matrix.clear()', 'parameters': 'none', 'returns': 'none'}, {'name': 'set_pixel', 'syntax': 'light_matrix.set_pixel(2,2,100)', 'parameters': [{'name': 'x value', 'description': 'the x position of led on the matrix', 'values': 'integer 0:4'}, {'name': 'y value', 'description': 'the y position of led on the matrix', 'values': 'integer 0:4'}, {'name': 'brightness', 'description': 'the light intensity of the pixel', 'values': 'integer 1:100'}]}, {'name': 'show', 'syntax': 'light_matrix.show(list[int])', 'parameters': [{'name': 'pixel list', 'description': 'a list of length 25 corresponding to each pixel in the 5x5 led matrix', 'values': 'legnth 25 list of integers with values 1:100'}], 'example': '# Create a list with 25 identical intensity values \r\n pixels = [100] * 25 \r\n # Update all pixels to show same intensity \r\n light_matrix.show(pixels)'}, {'name': 'show_image', 'syntax': 'light_matrix.show_image(light_matrix.IMAGE_HAPPY)', 'parameters': [{'name': 'image id', 'description': 'The id of the image to show. The range of available images is 1 to 67. There are consts on the light_matrix module for these.', 'values': 'int 1:67'}], 'example': 'from hub import light_matrix\r\n# Show a small heart\r\nlight_matrix.show_image(2)'}, {'name': 'write', 'syntax': 'light_matrix.write(text: str, intensity: int = 100, time_per_character: int = 500)', 'parameters': [{'name': 'text', 'description': 'the text to display on the matrix', 'values': 'string'}, {'name': 'intensity', 'description': 'the brightness of the leds', 'values': 'integer 1:100'}, {'name': 'time per character', 'description': 'How long to show each character on the display in milliseconds', 'values': 'positive integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_4S5RgkNZocLhLkWRRUrjU42a', 'output': '{"name": "light_matrix", "description": "a class that enables control of built in SPIKE Prime led matrix", "initialization": "none", "required imports": "from hub import light_matrix", "function": [{"name": "clear", "syntax": "color_matrix.clear()", "parameters": "none", "returns": "none"}, {"name": "set_pixel", "syntax": "light_matrix.set_pixel(2,2,100)", "parameters": [{"name": "x value", "description": "the x position of led on the matrix", "values": "integer 0:4"}, {"name": "y value", "description": "the y position of led on the matrix", "values": "integer 0:4"}, {"name": "brightness", "description": "the light intensity of the pixel", "values": "integer 1:100"}]}, {"name": "show", "syntax": "light_matrix.show(list[int])", "parameters": [{"name": "pixel list", "description": "a list of length 25 corresponding to each pixel in the 5x5 led matrix", "values": "legnth 25 list of integers with values 1:100"}], "example": "# Create a list with 25 identical intensity values \\r\\n pixels = [100] * 25 \\r\\n # Update all pixels to show same intensity \\r\\n light_matrix.show(pixels)"}, {"name": "show_image", "syntax": "light_matrix.show_image(light_matrix.IMAGE_HAPPY)", "parameters": [{"name": "image id", "description": "The id of the image to show. The range of available images is 1 to 67. There are consts on the light_matrix module for these.", "values": "int 1:67"}], "example": "from hub import light_matrix\\r\\n# Show a small heart\\r\\nlight_matrix.show_image(2)"}, {"name": "write", "syntax": "light_matrix.write(text: str, intensity: int = 100, time_per_character: int = 500)", "parameters": [{"name": "text", "description": "the text to display on the matrix", "values": "string"}, {"name": "intensity", "description": "the brightness of the leds", "values": "integer 1:100"}, {"name": "time per character", "description": "How long to show each character on the display in milliseconds", "values": "positive integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "from hub import light_matrix \n light_matrix.write('Hello World')",
"runtime": "5"
}

================== RUNNING CODE ==================
        

from hub import light_matrix 

light_matrix.write('Hello World')
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


<awaitable>

>>> 

>>> 


=== 
from hub import light_matrix 

=== 
light_matrix.write('Hello World')

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_yhyfUQWQ5ObWmdZ2vWzb6JYW', 'output': "\r\n=== \nfrom hub import light_matrix \r\n=== \nlight_matrix.write('Hello World')\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot display 'Hello World' on its LED matrix?"
}
Hey Human, Did the robot display 'Hello World' on its LED matrix?
Submitting tool outputs: [{'tool_call_id': 'call_CJMUCMFmLDB29nhk4hjJVtbz', 'output': 'yeah, but just print it to terminal'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: completed
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello World')",
"runtime": "1"
}

================== RUNNING CODE ==================
        

print('Hello World')
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot




MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 


>>> 

>>> 


paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


================== SERIAL OUPUT ==================


Hello World

>>> 

>>> 


=== 
print('Hello World')

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_BrOuO7AiTDAVdjgaEFr4kZ9G', 'output': "\r\n=== \nprint('Hello World')\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot print 'Hello World' to its terminal?"
}
Hey Human, Did the robot print 'Hello World' to its terminal?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 11:49:02

 - Status: THREAD_ID: thread_ZkuVUwX9DkCST2cQcLCFFmBD
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello World')",
"runtime": "1"
}

================== RUNNING CODE ==================
        

print('Hello World')
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


Hello World

>>> 

>>> 


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('Hello World')

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_dV5rY3Lpklnbn6xWcRQ7EbhQ', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'Hello World\')\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 12:50:58

 - Status: THREAD_ID: thread_ztnApKZc6H8ELuwQqUJTmdhB
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_dc9AviLof5JsBYGCR3s2QXdZ', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "2"
}

================== RUNNING CODE ==================
        

import motor_pair

from hub import port

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F)

motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


<awaitable>

>>> 

>>> 


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair

=== 
from hub import port

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F)

=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_S3nYSWv8PX8pYdoKED3c4E8Z', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F)\r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 12:53:04

 - Status: THREAD_ID: thread_Kkpmb34PPHmnAExdxIALZyMS
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_Wq4zhXLEbejvspP69H30D1hh', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \n from hub import port \n \nmotor.run_for_degrees(port.E, 360, 75) \nmotor.run_for_degrees(port.F, 360, 75)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor 

from hub import port 



motor.run_for_degrees(port.E, 360, 75) 

motor.run_for_degrees(port.F, 360, 75)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================
paste mode: 

<awaitable>

<awaitable>

>>> 

>>> 


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor 

=== 
from hub import port 

=== 


=== 
motor.run_for_degrees(port.E, 360, 75) 

=== 
motor.run_for_degrees(port.F, 360, 75)

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_W8mPNVJStlkCmxx40iwezUur', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor \r\n=== \nfrom hub import port \r\n=== \n\r\n=== \nmotor.run_for_degrees(port.E, 360, 75) \r\n=== \nmotor.run_for_degrees(port.F, 360, 75)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 12:54:05

 - Status: THREAD_ID: thread_v9sKBuHeNb3qicCVuisYIgq8
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_CI8jmOpm8CTqkFsRgfRenHzY', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \n from hub import port \n motor.run_for_degrees(port.E, 360, 75) \n motor.run_for_degrees(port.F, 360, 75)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor 

from hub import port 

motor.run_for_degrees(port.E, 360, 75) 

motor.run_for_degrees(port.F, 360, 75)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================
paste mode: 

<awaitable>

<awaitable>

>>> 

>>> 


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor 

=== 
from hub import port 

=== 
motor.run_for_degrees(port.E, 360, 75) 

=== 
motor.run_for_degrees(port.F, 360, 75)

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_uluDmmAvROoxHTaasaVc2pyA', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor \r\n=== \nfrom hub import port \r\n=== \nmotor.run_for_degrees(port.E, 360, 75) \r\n=== \nmotor.run_for_degrees(port.F, 360, 75)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_7kngRvEM7aiLuBdl10uuVr28', 'output': 'yes, now print hellow world'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "sound"
}
 - Status: Querying documentation for: sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_eUzWLsO0AJj0QtKb4EbYQjoN', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "from hub import sound \n sound.speaker.beep()",
"runtime": "2"
}

================== RUNNING CODE ==================
        

from hub import sound 

sound.speaker.beep()
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================
paste mode: 

Traceback (most recent call last):

  File "<stdin>", line 4, in <module>

AttributeError: 'module' object has no attribute 'speaker'

>>> 

>>> 


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
from hub import sound 

=== 
sound.speaker.beep()

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ZmwwLunzC5Rm2MHslwDPe7fy', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nfrom hub import sound \r\n=== \nsound.speaker.beep()\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot beep?"
}
Hey Human, Did the robot beep?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 12:55:11

 - Status: THREAD_ID: thread_6ZGFPU06d9GZdyneo02tsyNt
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello, World!')",
"runtime": "5"
}

================== RUNNING CODE ==================
        

print('Hello, World!')
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================
paste mode: 

Hello, World!

>>> 

>>> 


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('Hello, World!')

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_lcSHIpZe1hxOhPx8bmngQ5Z9', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'Hello, World!\')\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the print function execute correctly in the terminal?"
}
Hey Human, Did the print function execute correctly in the terminal?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 12:56:01

 - Status: THREAD_ID: thread_myigzk4ZDHcU1HCC5HodkD0e
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_IbmI0nQlNUQ3UkK5IbuVPbxh', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "2"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)

<awaitable>

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_7Cs7dBk3aZOtvk3RP0rwZ6ZY', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)\r\n<awaitable>\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_qa6tAXtJoA4lcoclAAoA8fT2', 'output': 'try again'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "2"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)

Traceback (most recent call last):

  File "<stdin>", line 5, in <module>

OSError: [Errno 1] EPERM

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_GHw7rxZrzjqvnP1dp14tx5Vm', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 5, in <module>\r\nOSError: [Errno 1] EPERM\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Why am I getting an EPERM error?"
}
Hey Human, Why am I getting an EPERM error?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 12:57:23

 - Status: THREAD_ID: thread_7s8wPxzePgwAsaC0ngCGvrJx
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_0nScNLi0TS5dd2zZhsCmOsAE', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: requires_action
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F)\nmotor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "2"
}

================== RUNNING CODE ==================
        

import motor_pair

from hub import port

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F)

motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair

=== 
from hub import port

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F)

=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)


<awaitable>

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_6WQuw0FH80JAqd4OIRZVMzOI', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F)\r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)\n\r\n<awaitable>\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 12:58:07

 - Status: THREAD_ID: thread_p5DJUADsyhmmfjTS2iSLsLSk
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_j92NelPM68PTPH81KkxGrR5g', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "2"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)


Traceback (most recent call last):

  File "<stdin>", line 5, in <module>

OSError: [Errno 1] EPERM

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_6TIYNi8c2Sox8o0pAVATAe7X', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)\n\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 5, in <module>\r\nOSError: [Errno 1] EPERM\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What caused the EPERM error when tried to run the motor pair?"
}
Hey Human, What caused the EPERM error when tried to run the motor pair?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 13:01:19

 - Status: THREAD_ID: thread_klhi9IKUOGx0q2iV0Hj16yJj
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_zRoJyKRvZXgVgH39arQzuGdM', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=300)",
"runtime": "2"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=300)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=300)

=== 



Traceback (most recent call last):

  File "<stdin>", line 6, in <module>

AttributeError: 'module' object has no attribute 'move_for_seconds'

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_lpnVwPjo62JV6wm8ycDhgs4Z', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nmotor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=300)\r\n=== \n\n\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 6, in <module>\r\nAttributeError: \'module\' object has no attribute \'move_for_seconds\'\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "The robot did not move, it seems there was an attribute error with the 'move_for_seconds' function I attempted to use. Can you verify that the function exists or if I need to use a different function."
}
Hey Human, The robot did not move, it seems there was an attribute error with the 'move_for_seconds' function I attempted to use. Can you verify that the function exists or if I need to use a different function.
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 13:02:05

 - Status: THREAD_ID: thread_uwwerGT9dXOhztwjVQFK9unT
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_oj2wkItWpGliwEs2PQVFVV3p', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n motor_pair.move_for_time(motor_pair.PAIR_1, 5000, 0, velocity=200)",
"runtime": "6"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

motor_pair.move_for_time(motor_pair.PAIR_1, 5000, 0, velocity=200)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 5000, 0, velocity=200)

=== 



<awaitable>

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_hCHklfIiXag8qs5VGJGFwco6', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 5000, 0, velocity=200)\r\n=== \n\n\r\n<awaitable>\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_pmbipj4cm7g6Q3NrlAtrTnK7', 'output': 'yeah'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
 - Status: Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_JNkwoVfe84SoGING9Ex0qtHk', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import time \n for i in range(5): \n     print(distance_sensor.distance(port.D)) \n     time.sleep(1)",
"runtime": "7"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

import time 

for i in range(5): 

    print(distance_sensor.distance(port.D)) 

    time.sleep(1)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import distance_sensor 

=== 
from hub import port 

=== 
import time 

=== 
for i in range(5): 

=== 
    print(distance_sensor.distance(port.D)) 

=== 
    time.sleep(1)

=== 

 - Status: 

557


 - Status: 342


 - Status: 211


 - Status: 125


 - Status: 91


>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_jgse2MthnmECU75yfsVt9hW6', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport time \r\n=== \nfor i in range(5): \r\n=== \n    print(distance_sensor.distance(port.D)) \r\n=== \n    time.sleep(1)\r\n=== \n\n\r\n557\r\n\n342\r\n\n211\r\n\n125\r\n\n91\r\n\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Could you confirm the distance sensor readings over the 5 seconds?"
}
Hey Human, Could you confirm the distance sensor readings over the 5 seconds?
Submitting tool outputs: [{'tool_call_id': 'call_7molT8eE8Q0x7aedoyzvgGBm', 'output': 'yeah'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_FYXsPnLFmWj6UkaTQ9aGxm1V', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \n from hub import port \n import distance_sensor \n import time \n while True: \n     dist = distance_sensor.distance(port.D) \n     if dist > 200: \n         motor.run_for_degrees(port.E, 360, -75) \n         motor.run_for_degrees(port.F, 360, -75) \n     elif dist < 200: \n         motor.run_for_degrees(port.E, 360, 75) \n         motor.run_for_degrees(port.F, 360, 75) \n     time.sleep(0.5)",
"runtime": "15"
}

================== RUNNING CODE ==================
        

import motor 

from hub import port 

import distance_sensor 

import time 

while True: 

    dist = distance_sensor.distance(port.D) 

    if dist > 200: 

        motor.run_for_degrees(port.E, 360, -75) 

        motor.run_for_degrees(port.F, 360, -75) 

    elif dist < 200: 

        motor.run_for_degrees(port.E, 360, 75) 

        motor.run_for_degrees(port.F, 360, 75) 

    time.sleep(0.5)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor 

=== 
from hub import port 

=== 
import distance_sensor 

=== 
import time 

=== 
while True: 

=== 
    dist = distance_sensor.distance(port.D) 

=== 
    if dist > 200: 

=== 
        motor.run_for_degrees(port.E, 360, -75) 

=== 
        motor.run_for_degrees(port.F, 360, -75) 

=== 
    elif dist < 200: 

=== 
        motor.run_for_degrees(port.E, 360, 75) 

=== 
        motor.run_for_degrees(port.F, 360, 75) 

=== 
    time.sleep(0.5)

=== 

 - Status: 

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>

<awaitable>

<awaitable>

<awaitable>


==================== END ====================
<awaitable>

<awaitable>

Traceback (most recent call last):

  File "<stdin>", line 15, in <module>

KeyboardInterrupt: 

>>> 

>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_W4MTzyoqfgqi9SEWSBZkmVQK', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor \r\n=== \nfrom hub import port \r\n=== \nimport distance_sensor \r\n=== \nimport time \r\n=== \nwhile True: \r\n=== \n    dist = distance_sensor.distance(port.D) \r\n=== \n    if dist > 200: \r\n=== \n        motor.run_for_degrees(port.E, 360, -75) \r\n=== \n        motor.run_for_degrees(port.F, 360, -75) \r\n=== \n    elif dist < 200: \r\n=== \n        motor.run_for_degrees(port.E, 360, 75) \r\n=== \n        motor.run_for_degrees(port.F, 360, 75) \r\n=== \n    time.sleep(0.5)\r\n=== \n\n\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward and backward to maintain a distance of 200 mm from an object?"
}
Hey Human, Did the robot move forward and backward to maintain a distance of 200 mm from an object?
Submitting tool outputs: [{'tool_call_id': 'call_m3rCSFtZdvLoQVA4Ksh5CgmY', 'output': 'it rotated, try using motor pair'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_hmwmhAuY75NsSVWuhHcBLl2X', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import distance_sensor \n import time \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n while True: \n     dist = distance_sensor.distance(port.D) \n     if dist > 200: \n         motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=-200) \n     elif dist < 200: \n         motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=200) \n     time.sleep(0.5)",
"runtime": "15"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

import distance_sensor 

import time 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

while True: 

    dist = distance_sensor.distance(port.D) 

    if dist > 200: 

        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=-200) 

    elif dist < 200: 

        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=200) 

    time.sleep(0.5)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
import distance_sensor 

=== 
import time 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
while True: 

=== 
    dist = distance_sensor.distance(port.D) 

=== 
    if dist > 200: 

=== 
        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=-200) 

=== 
    elif dist < 200: 

=== 
        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=200) 

=== 
    time.sleep(0.5)

=== 

 - Status: 

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


==================== END ====================
<awaitable>

Traceback (most recent call last):

  File "<stdin>", line 14, in <module>

KeyboardInterrupt: 

>>> 

>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_iKSk5evaweQv6mHrnlNco3mY', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport distance_sensor \r\n=== \nimport time \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nwhile True: \r\n=== \n    dist = distance_sensor.distance(port.D) \r\n=== \n    if dist > 200: \r\n=== \n        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=-200) \r\n=== \n    elif dist < 200: \r\n=== \n        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=200) \r\n=== \n    time.sleep(0.5)\r\n=== \n\n\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward and backward to maintain a distance of 200 mm from an object?"
}
Hey Human, Did the robot move forward and backward to maintain a distance of 200 mm from an object?
Submitting tool outputs: [{'tool_call_id': 'call_n0LD18Ta6ODMXWUAVdtNBQ2I', 'output': 'swich when i tmoves forwards nd backwards'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import distance_sensor \n import time \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n while True: \n     dist = distance_sensor.distance(port.D) \n     if dist > 220: \n         motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=-200) \n     elif dist < 180: \n         motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=200) \n     time.sleep(0.5)",
"runtime": "15"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

import distance_sensor 

import time 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

while True: 

    dist = distance_sensor.distance(port.D) 

    if dist > 220: 

        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=-200) 

    elif dist < 180: 

        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=200) 

    time.sleep(0.5)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
import distance_sensor 

=== 
import time 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
while True: 

=== 
    dist = distance_sensor.distance(port.D) 

=== 
    if dist > 220: 

=== 
        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=-200) 

=== 
    elif dist < 180: 

=== 
        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=200) 

=== 
    time.sleep(0.5)

=== 

 - Status: 

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


==================== END ====================
<awaitable>

Traceback (most recent call last):

  File "<stdin>", line 14, in <module>

KeyboardInterrupt: 

>>> 

>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_3vDPFtbZJKTK98djjw6c38EP', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport distance_sensor \r\n=== \nimport time \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nwhile True: \r\n=== \n    dist = distance_sensor.distance(port.D) \r\n=== \n    if dist > 220: \r\n=== \n        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=-200) \r\n=== \n    elif dist < 180: \r\n=== \n        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=200) \r\n=== \n    time.sleep(0.5)\r\n=== \n\n\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot successfully maintain a distance of about 200 mm from an object, moving forward when it was too close and backward when it was too far?"
}
Hey Human, Did the robot successfully maintain a distance of about 200 mm from an object, moving forward when it was too close and backward when it was too far?
Submitting tool outputs: [{'tool_call_id': 'call_YXGlqDvjFAzeNWiAzWNb2pWf', 'output': 'no, swithc thte negative and positive velocities'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Longer than normal runtime: in_progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import distance_sensor \n import time \n motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \n while True: \n     dist = distance_sensor.distance(port.D) \n     if dist > 220: \n         motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=200) \n     elif dist < 180: \n         motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=-200) \n     time.sleep(0.5)",
"runtime": "15"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

import distance_sensor 

import time 

motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

while True: 

    dist = distance_sensor.distance(port.D) 

    if dist > 220: 

        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=200) 

    elif dist < 180: 

        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=-200) 

    time.sleep(0.5)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
import distance_sensor 

=== 
import time 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.E, port.F) 

=== 
while True: 

=== 
    dist = distance_sensor.distance(port.D) 

=== 
    if dist > 220: 

=== 
        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=200) 

=== 
    elif dist < 180: 

=== 
        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=-200) 

=== 
    time.sleep(0.5)

=== 

 - Status: 

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>

<awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


 - Status: <awaitable>


==================== END ====================
Traceback (most recent call last):

  File "<stdin>", line 14, in <module>

KeyboardInterrupt: 

>>> 

>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_41u8mIVlADoYal5nWpFvBnD6', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport distance_sensor \r\n=== \nimport time \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.E, port.F) \r\n=== \nwhile True: \r\n=== \n    dist = distance_sensor.distance(port.D) \r\n=== \n    if dist > 220: \r\n=== \n        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=200) \r\n=== \n    elif dist < 180: \r\n=== \n        motor_pair.move_for_time(motor_pair.PAIR_1, 500, 0, velocity=-200) \r\n=== \n    time.sleep(0.5)\r\n=== \n\n\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n\n<awaitable>\r\n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot successfully maintain a distance of about 200 mm from an object, moving forward when it was too far and backward when it was too close?"
}
Hey Human, Did the robot successfully maintain a distance of about 200 mm from an object, moving forward when it was too far and backward when it was too close?
Submitting tool outputs: [{'tool_call_id': 'call_zQbSQXwxLaa7oYbT7O9PLVzq', 'output': 'great!'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 13:13:19

 - Status: THREAD_ID: thread_5hcXgtLjQ5XEJwgelXA9VE8N
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 14:47:25

 - Status: THREAD_ID: thread_5E2q6Sz8UozcfuC4TTWK7yLF
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Are the touch sensor and distance sensor connected to ports C and F respectively?"
}
Hey Human, Are the touch sensor and distance sensor connected to ports C and F respectively?
Submitting tool outputs: [{'tool_call_id': 'call_8WAepfDxmO3VjDVyvgKm6jJh', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
 - Status: Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_sF3ggkXpHILwLLrNiEo8A2TV', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "sound"
}
 - Status: Querying documentation for: sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_wlxinhdYxYxVorvZnVOUDol4', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "force_sensor"
}
 - Status: Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_FWxIurCYshYQkYSmSG9PjDnx', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "from hub import sound, port \n import force_sensor, distance_sensor \n while force_sensor.pressed(port.C): \n     sound.beep(freq=distance_sensor.distance(port.F), duration=500, volume=100)",
"runtime": "20"
}

================== RUNNING CODE ==================
        

from hub import sound, port 

import force_sensor, distance_sensor 

while force_sensor.pressed(port.C): 

    sound.beep(freq=distance_sensor.distance(port.F), duration=500, volume=100)
==================== END ====================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
from hub import sound, port 

=== 
import force_sensor, distance_sensor 

=== 
while force_sensor.pressed(port.C): 

=== 
    sound.beep(freq=distance_sensor.distance(port.F), duration=500, volume=100)

=== 



Traceback (most recent call last):

  File "<stdin>", line 6, in <module>

OSError: [Errno 19] ENODEV

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_WvtanciUZ0MWCoantAHPBy3O', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nfrom hub import sound, port \r\n=== \nimport force_sensor, distance_sensor \r\n=== \nwhile force_sensor.pressed(port.C): \r\n=== \n    sound.beep(freq=distance_sensor.distance(port.F), duration=500, volume=100)\r\n=== \n\n\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 6, in <module>\r\nOSError: [Errno 19] ENODEV\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "My code returned an error. Is the touch sensor properly connected to port C and is it being pressed?"
}
Hey Human, My code returned an error. Is the touch sensor properly connected to port C and is it being pressed?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 14:49:53

 - Status: THREAD_ID: thread_caiv5sz1QrVvj0HcETEJ8Z1l
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: failed
Run failed
Run(id='run_0TDomlXgw7rRkkQIKuxH87Iz', assistant_id='asst_8WN5ksXpnNaBeAr1IKrLq4yd', cancelled_at=None, completed_at=None, created_at=1709840996, expires_at=None, failed_at=1709840999, file_ids=[], instructions="Your goal is to iteratively program a spike prime robot in MicroPython using only SPIKE 3 syntax according to a given task. Any code that you produce in MicroPython will be directly run on the robot with no alterations. Therefore it is important that you only produce one block of code per message and each block of code contains every single line that is needed to run.  Do not ever assume that a motor or sensor is connected to a given port, always ask which port is wired in before running your code.\n\nYou have four tools at your disposal to improve your code; [get_documentation, get_feedback, get_visual_feedback, run_code]. You should use these tools as much as possible to improve the accuracy of your code. Explanations for each function is contained within the description category of the function json file. \n\nRules of code iteration: Always use get_documentation to verify the correctness of syntax before using new SPIKE Classes, do not assume that code is correct. If you are stuck and can't get code to run without errors, make sure to use the get_feedback function to receive help from a competent human.\n\nVery important: Make sure to call run_code at least once followed by get_feedback or get_visual_feedback before finalizing your response.", last_error=LastError(code='server_error', message='Sorry, something went wrong.'), metadata={}, model='gpt-4', object='thread.run', required_action=None, started_at=1709840997, status='failed', thread_id='thread_caiv5sz1QrVvj0HcETEJ8Z1l', tools=[ToolAssistantToolsCode(type='code_interpreter'), ToolAssistantToolsFunction(function=FunctionDefinition(name='get_documentation', description='Call the get_documentation function whenever you are unsure of how to code something in SPIKE 3 MicroPython. Specific functions and imports you may query are [motor, motor_pair, color_sensor, distance_sensor, motion_sensor, force_sensor, sound, light_matrix]. Do not assume that any legacy code will be correct. Instead, use the get_documentation function to retrieve examples of how to use SPIKE 3 features. This includes syntax for importing libraries, using classes, and specific functions. A query will always return required imports, proper syntax, and required parameter descriptions. If you do not get a query response it means that your query does not exist in the database, ask the human using get_feedback to determine what the right query is for your specific case.', parameters={'type': 'object', 'properties': {'query': {'type': 'string', 'description': 'The class that requires documentation.'}}, 'required': ['query']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='get_feedback', description='Call the get_feedback function to verify characteristics of the robot such as sensor ports, robot actions like motion or sound, or to get help on code that returns errors.', parameters={'type': 'object', 'properties': {'prompt': {'type': 'string', 'description': 'A specific question for the human that you need to verify or improve the success of your code.'}}, 'required': ['prompt']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='run_code', description='Call the run_code function to run the code on the robot. In return you will be provided the output of the code from the REPL . If your code returns errors, try to diagnose them yourself, or use get_documentation or get_feedback to resolve the issue.', parameters={'type': 'object', 'properties': {'code': {'type': 'string', 'description': 'The micropython code you want to run on the SPIKE Prime. You MUST format the code in one line. Separate each line using backslash n and no spaces. Note that the indentation is assumed and you need to have 2 newlines if you want to reset indentation. For example, if you want a line to come after a while loop instead of inside of it, you need to have 2 newlines before it.'}, 'runtime': {'type': 'string', 'description': 'The duration for which you would like the code to run in seconds before it is stopped.'}}, 'required': ['code', 'runtime']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='get_visual_feedback', description='Call the get_visual_feedback function to inspect the visual physical conditions of the robot using a sequence of images. You will get a written description answering your query in response. For example, if you need to check if the robot is moving or if the light matrix is displaying something you should call the get_visual_feedback function. To get useful feedback it is important that your query is clear and specific.', parameters={'type': 'object', 'properties': {'query': {'type': 'string', 'description': "A specific question describing what you would like to know about the robot in the image sequence. Example: 'Did the spike prime robot move forward over time'"}, 'image_num': {'type': 'string', 'description': "How many images you would like to be taken of the robot. More images will be able to provide more information about the robot's movement over time."}, 'interval': {'type': 'string', 'description': 'The duration of time in between when each image is taken. Use this in tandem with image_num to increase or decrease the time frame over which you are observing the robot.'}}, 'required': ['query', 'image_num', 'interval']}), type='function')], usage=Usage(completion_tokens=0, prompt_tokens=0, total_tokens=0))
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 14:50:28

 - Status: THREAD_ID: thread_dw4C14RQ3N733auZtKYRKL6I
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Are the motors in ports A and B large motors or medium motors?"
}
Hey Human, Are the motors in ports A and B large motors or medium motors?
Submitting tool outputs: [{'tool_call_id': 'call_ZCpj8qag2jz3HqZ2MHkXKyCF', 'output': 'large'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
 - Status: Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_ygWziUVDgOQ2zL3mnSH2UFTe', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \n from hub import port \n motor.run_for_degrees(port.A, 360, 75) \n motor.run_for_degrees(port.B, 360, 75)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor 

from hub import port 

motor.run_for_degrees(port.A, 360, 75) 

motor.run_for_degrees(port.B, 360, 75)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor 

=== 
from hub import port 

=== 
motor.run_for_degrees(port.A, 360, 75) 

=== 
motor.run_for_degrees(port.B, 360, 75)

=== 



<awaitable>

<awaitable>

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_rPYonfNItn8UPUuKxx4EoFLN', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor \r\n=== \nfrom hub import port \r\n=== \nmotor.run_for_degrees(port.A, 360, 75) \r\n=== \nmotor.run_for_degrees(port.B, 360, 75)\r\n=== \n\n\r\n<awaitable>\r\n<awaitable>\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_qwe3b6kByS8Ez45t2vLIMevU', 'output': 'use motor pairs'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_fz7LoWPT6fnnz0E14hgMIlsR', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "5"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)

=== 



<awaitable>

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_EulVltcf6mIgk0T38TstBtpM', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)\r\n=== \n\n\r\n<awaitable>\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_2Lx9AzwLVDdBW7zsUQoK23mU', 'output': 'yea'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Is there a distance sensor connected to port D?"
}
Hey Human, Is there a distance sensor connected to port D?
Submitting tool outputs: [{'tool_call_id': 'call_xT9zwgTiN7LESlhyIFA1cm37', 'output': 'yea'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
 - Status: Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_6voWmlpWb2Vq2V4DAWKJInMI', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import utime \n for i in range(5): \n \t print(distance_sensor.distance(port.D)) \n \t utime.sleep(1)", 
"runtime": "6"
}

================== RUNNING CODE ==================
        

import distance_sensor 

from hub import port 

import utime 

for i in range(5): 

	 print(distance_sensor.distance(port.D)) 

	 utime.sleep(1)
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import distance_sensor 

=== 
from hub import port 

=== 
import utime 

=== 
for i in range(5): 

=== 
	 print(distance_sensor.distance(port.D)) 

=== 
	 utime.sleep(1)

=== 



393


287


206


128


213


>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_hhZ1V32f6z0n45ZAFvDUyjzF', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport utime \r\n=== \nfor i in range(5): \r\n=== \n\t print(distance_sensor.distance(port.D)) \r\n=== \n\t utime.sleep(1)\r\n=== \n\n\r\n393\r\n\n287\r\n\n206\r\n\n128\r\n\n213\r\n\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello World')",
"runtime": "1"
}

================== RUNNING CODE ==================
        

print('Hello World')
==================== END ====================
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('Hello World')

=== 



Hello World

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_fywvgALNzJPz6eVVhNCjI0F7', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'Hello World\')\r\n=== \n\n\r\nHello World\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 14:54:39

 - Status: THREAD_ID: thread_krL5FHTjEzlMUuBXEWGToMXx
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 14:55:19

 - Status: THREAD_ID: thread_No2jMdvB6vV6VT8tO4NAwHIU
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}

================== RUNNING CODE ==================
        

print('hello world')
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('hello world')

=== 



hello world

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_eigDPUCE5MVGhKKBnEzmv2ek', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'hello world\')\r\n=== \n\n\r\nhello world\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 14:55:58

 - Status: THREAD_ID: thread_f3CoFsXOn1IJiSRi1kLoJd69
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "2"
}

================== RUNNING CODE ==================
        

print('hello world')
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('hello world')

=== 



hello world

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_fPpwtk8b06gHFWqTycALRYGz', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'hello world\')\r\n=== \n\n\r\nhello world\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world',
"runtime": "2"
}
 - Status: Error loading json, retyring
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 14:57:20

 - Status: THREAD_ID: thread_Hw26J1LCp5k6PxKibSe9U2BC
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import spiked",
"runtime": "1"
}

================== RUNNING CODE ==================
        

import spiked
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 14:58:12

 - Status: THREAD_ID: thread_hSTZai0FrtrL3LA0TG3NOrG4
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Are there any attachments that could impede the robot's movement?"
}
Hey Human, Are there any attachments that could impede the robot's movement?
Submitting tool outputs: [{'tool_call_id': 'call_Jms1ezL5sU5FoGwc0UH2HMRI', 'output': 'no'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
 - Status: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_iEkXmoxEPZ9ZYk3ArAA7KIoS', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)",
  "runtime": "2"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)
==================== END ====================


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:03:53

 - Status: THREAD_ID: thread_T9g6RGgKd3YbnqIcIzZKzWyr
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Which motor is connected to port A, right or left?"
}
Hey Human, Which motor is connected to port A, right or left?
Submitting tool outputs: [{'tool_call_id': 'call_LEWoRVGEEGb1Wsj3uWdYhvwy', 'output': 'right'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Is the robot equipped with wheels or other means of locomotion?"
}
Hey Human, Is the robot equipped with wheels or other means of locomotion?
Submitting tool outputs: [{'tool_call_id': 'call_7H4J8JrN8XXu4RY5glaVip4U', 'output': 'wheels'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_HwpWhFznGZShU0mE6wAEJHS5', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "distance_sensor"
}
Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_w9Xo6sNxX6uyT5XiIAk5hM2Q', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n import distance_sensor \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     current_distance = distance_sensor.distance(port.D) \n     if current_distance > 100: \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200) \n     elif current_distance < 100: \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200)",
  "runtime": "10"
}

================== RUNNING CODE ==================
        

import motor_pair 

from hub import port 

import distance_sensor 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

while True: 

    current_distance = distance_sensor.distance(port.D) 

    if current_distance > 100: 

        motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200) 

    elif current_distance < 100: 

        motor_pair.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200)


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
import distance_sensor 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

=== 
while True: 

=== 
    current_distance = distance_sensor.distance(port.D) 

=== 
    if current_distance > 100: 

=== 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200) 

=== 
    elif current_distance < 100: 

=== 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200)

=== 

 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:07:47

 - Status: THREAD_ID: thread_Lvxd1KEPEGTJbbl2p77LPdGr
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{"prompt": "Can you tell me which motor is connected to which port, left or right?"}
Submitting tool outputs: []
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:09:23

 - Status: THREAD_ID: thread_RKQWu5aYe8LvrxNsXof62IPk
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Please confirm that the distance sensor is plugged into port 'D' and the motors are plugged into ports 'A' and 'B'"
}
Hey Human, Please confirm that the distance sensor is plugged into port 'D' and the motors are plugged into ports 'A' and 'B'
Submitting tool outputs: [{'tool_call_id': 'call_qoUtaITuV1wXktyyZLxft2AV', 'output': 'y'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_NKOXUDK3cHDMIxeKd40uff1F', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_UJ6HbWBNL5KjlkIJep5IDdng', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "from hub import port \n import distance_sensor \n import motor \n while True: \n  distance = distance_sensor.distance(port.D) \n  if distance > 100: \n   motor.run_for_degrees(port.A, 360, 100) \n   motor.run_for_degrees(port.B, 360, 100) \n  elif distance < 100: \n   motor.run_for_degrees(port.A, -360, 100) \n   motor.run_for_degrees(port.B, -360, 100) \n  else: \n   break",
"runtime": "10"
}

================== RUNNING CODE ({runtime} seconds) ==================
        

from hub import port 

import distance_sensor 

import motor 

while True: 

 distance = distance_sensor.distance(port.D) 

 if distance > 100: 

  motor.run_for_degrees(port.A, 360, 100) 

  motor.run_for_degrees(port.B, 360, 100) 

 elif distance < 100: 

  motor.run_for_degrees(port.A, -360, 100) 

  motor.run_for_degrees(port.B, -360, 100) 

 else: 

  break


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
from hub import port 

=== 
import distance_sensor 

=== 
import motor 

=== 
while True: 

=== 
 distance = distance_sensor.distance(port.D) 

=== 
 if distance > 100: 

=== 
  motor.run_for_degrees(port.A, 360, 100) 

=== 
  motor.run_for_degrees(port.B, 360, 100) 

=== 
 elif distance < 100: 

=== 
  motor.run_for_degrees(port.A, -360, 100) 

=== 
  motor.run_for_degrees(port.B, -360, 100) 

=== 
 else: 

=== 
  break

=== 

 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:11:47

 - Status: THREAD_ID: thread_9TxSl0xoNZUQN7DonpJe8jus
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Please confirm that the distance sensor is connected to port D and the motors are connected to ports A and B"
}
Hey Human, Please confirm that the distance sensor is connected to port D and the motors are connected to ports A and B
Submitting tool outputs: [{'tool_call_id': 'call_dlKxv4SOUFNbgkZoM28uCtBx', 'output': 'y'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_PRD7nXdbmT4SJxRfY2I24IMI', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_2iSmezFGPG6yK7a7B9Na1axk', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import distance_sensor \n \n motors = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n \n while True: \n     distance = distance_sensor.distance(port.D) \n     if distance > 100: \n         motors.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200) \n     elif distance < 100: \n         motors.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200)",
"runtime": "30"
}

================== RUNNING CODE (30 seconds) ==================
        

import motor_pair 

from hub import port 

import distance_sensor 



motors = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 



while True: 

    distance = distance_sensor.distance(port.D) 

    if distance > 100: 

        motors.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200) 

    elif distance < 100: 

        motors.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200)
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:14:11

 - Status: THREAD_ID: thread_2rari9RfoceP5AmYB4kVNvoh
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Is the distance sensor connected to port D and are the motors connected to ports A and B?"
}
Hey Human, Is the distance sensor connected to port D and are the motors connected to ports A and B?
Submitting tool outputs: [{'tool_call_id': 'call_nEnI1P4r89MnLoo5DMuvgWpA', 'output': 'y'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_Bc8zp88cH8xl3hSmwyiHffaM', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_HZf9MT6H5X5dVAs6cuJpCZ2z', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor\nfrom hub import port\nimport motor_pair\n\n# Initialize the motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Initialize the target distance\ntarget_distance = 100\n\n# Main loop\nwhile True:\n    # Read the current distance from the sensor\n    current_distance = distance_sensor.distance(port.D)\n\n    # Check if the current distance is less than the target\n    if current_distance < target_distance:\n        # Move backwards\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=-200)\n    elif current_distance > target_distance:\n        # Move forward\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)\n    else:\n        # Stop\n        motor_pair.stop()",
"runtime": "20"
}

================== RUNNING CODE (20 seconds) ==================
        

import distance_sensor

from hub import port

import motor_pair



# Initialize the motor pair

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)



# Initialize the target distance

target_distance = 100



# Main loop

while True:

   # Read the current distance from the sensor

   current_distance = distance_sensor.distance(port.D)



   # Check if the current distance is less than the target

   if current_distance < target_distance:

       # Move backwards

       motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=-200)

   elif current_distance > target_distance:

       # Move forward

       motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)

   else:

       # Stop

       motor_pair.stop()


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import distance_sensor

=== 
from hub import port

=== 
import motor_pair

=== 


=== 
# Initialize the motor pair

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

=== 


=== 
# Initialize the target distance

=== 
target_distance = 100

=== 


=== 
# Main loop

=== 
while True:

=== 
   # Read the current distance from the sensor

=== 
   current_distance = distance_sensor.distance(port.D)

=== 


=== 
   # Check if the current distance is less than the target

=== 
   if current_distance < target_distance:

=== 
       # Move backwards

=== 
       motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=-200)

=== 
   elif current_distance > target_distance:

=== 
       # Move forward

=== 
       motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)

=== 
   else:

=== 
       # Stop

=== 
       motor_pair.stop()

=== 



<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

<awaitable>

Traceback (most recent call last):

  File "<stdin>", line 27, in <module>

TypeError: function missing 1 required positional arguments

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_uWpIRWBZmbD8yakmpydHgK2r', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport distance_sensor\r\n=== \nfrom hub import port\r\n=== \nimport motor_pair\r\n=== \n\r\n=== \n# Initialize the motor pair\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \n\r\n=== \n# Initialize the target distance\r\n=== \ntarget_distance = 100\r\n=== \n\r\n=== \n# Main loop\r\n=== \nwhile True:\r\n=== \n   # Read the current distance from the sensor\r\n=== \n   current_distance = distance_sensor.distance(port.D)\r\n=== \n\r\n=== \n   # Check if the current distance is less than the target\r\n=== \n   if current_distance < target_distance:\r\n=== \n       # Move backwards\r\n=== \n       motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=-200)\r\n=== \n   elif current_distance > target_distance:\r\n=== \n       # Move forward\r\n=== \n       motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)\r\n=== \n   else:\r\n=== \n       # Stop\r\n=== \n       motor_pair.stop()\r\n=== \n\n\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\n<awaitable>\r\nTraceback (most recent call last):\r\n  File "<stdin>", line 27, in <module>\r\nTypeError: function missing 1 required positional arguments\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the program run without errors, and did the robot perform as expected?"
}
Hey Human, Did the program run without errors, and did the robot perform as expected?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:16:42

 - Status: THREAD_ID: thread_Ar0nNvk1JO063chMVeqEnnKC
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:17:02

 - Status: THREAD_ID: thread_fIGTkhftAMfEBBFVCLGBnTlO
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "from spike import Motor, DistanceSensor\ndistance_sensor = DistanceSensor('D')\nmotorA = Motor('A')\nmotorB = Motor('B')\nwhile True:\n    distance = distance_sensor.get_distance_cm()\n    if distance > 100:\n        motorA.start_at_power(20)\n        motorB.start_at_power(20)\n    elif distance < 100:\n        motorA.start_at_power(-20)\n        motorB.start_at_power(-20)\n    else:\n        motorA.stop()\n        motorB.stop()",
"runtime": "30"
}

================== RUNNING CODE (30 seconds) ==================
        

from spike import Motor, DistanceSensor

distance_sensor = DistanceSensor('D')

motorA = Motor('A')

motorB = Motor('B')

while True:

   distance = distance_sensor.get_distance_cm()

   if distance > 100:

       motorA.start_at_power(20)

       motorB.start_at_power(20)

   elif distance < 100:

       motorA.start_at_power(-20)

       motorB.start_at_power(-20)

   else:

       motorA.stop()

       motorB.stop()


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
from spike import Motor, DistanceSensor

=== 
distance_sensor = DistanceSensor('D')

=== 
motorA = Motor('A')

=== 
motorB = Motor('B')

=== 
while True:

=== 
   distance = distance_sensor.get_distance_cm()

=== 
   if distance > 100:

=== 
       motorA.start_at_power(20)

=== 
       motorB.start_at_power(20)

=== 
   elif distance < 100:

=== 
       motorA.start_at_power(-20)

=== 
       motorB.start_at_power(-20)

=== 
   else:

=== 
       motorA.stop()

=== 
       motorB.stop()

=== 



Traceback (most recent call last):

  File "<stdin>", line 3, in <module>

ImportError: no module named 'spike'

>>> 

>>> 
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:17:36

 - Status: THREAD_ID: thread_5uByHClS8hLznbrZh9uzNsBC
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Can you please confirm if the motors are connected to ports A and B and the distance sensor is connected to port D?"
}
Hey Human, Can you please confirm if the motors are connected to ports A and B and the distance sensor is connected to port D?
Submitting tool outputs: [{'tool_call_id': 'call_vtBJkiZJj7NshxlQcmKjhE7Q', 'output': 'y'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_JlAM1qGM0Vg79haCslbvhZHK', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_9pizCTB1hx6FmMjYukACVEAJ', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import hub, motor_pair, distance_sensor \n \
sensors = {'distance_sensor': hub.port.D} \n \
motors = {'left_motor': hub.port.A.motor, 'right_motor': hub.port.B.motor} \n \
desired_distance = 100 \n \
LEFT_MOTOR = motors['left_motor'] \n \
RIGHT_MOTOR = motors['right_motor'] \n \
MOTOR_PAIR = motor_pair.pair(motor_pair.PAIR_1, LEFT_MOTOR, RIGHT_MOTOR) \n \
DISTANCE_SENSOR = sensors['distance_sensor'] \n \
while True: \n \
   \tdistance = distance_sensor.distance(DISTANCE_SENSOR) \n \
   \tif distance == -1: \n \
     \t\tcontinue \n \
   \tif distance < desired_distance: \n \
     \t\tmotor_pair.move_for_time(MOTOR_PAIR, 500, 0, velocity=-50) \n \
   \tif distance > desired_distance: \n \
     \t\tmotor_pair.move_for_time(MOTOR_PAIR, 500, 0, velocity=50)", 
"runtime": "5"
}
 - Status: Error loading json, retyring
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:20:07

 - Status: THREAD_ID: thread_96LZRVQ68ipvoRM2O3gG70ea
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Are the motors in ports A and B set to move the robot forward?"
}
Hey Human, Are the motors in ports A and B set to move the robot forward?
Submitting tool outputs: [{'tool_call_id': 'call_NjsoGgw1tbGaVBc5QasBQHvo', 'output': 'y'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_UCJwR0ENpWHcfkh7kYDUwuX3', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
  "runtime": "5"
}

================== RUNNING CODE (5 seconds) ==================
        

import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)

=== 



<awaitable>

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_q4FZKnShzrvYRqd0EzsvJlCD', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)\r\n=== \n\n\r\n<awaitable>\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:22:10

 - Status: THREAD_ID: thread_5AdLTGH7InOqKZGzaEa4vRWm
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "print('hello world')",
  "runtime": "2"
}

================== RUNNING CODE (2 seconds) ==================
        

print('hello world')


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('hello world')

=== 



hello world

>>> 

>>> 
==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_LnXhqqRyAbmW9zT4vEAa2ryR', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'hello world\')\r\n=== \n\n\r\nhello world\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:25:14

 - Status: THREAD_ID: thread_q0AOhlTjNCejBzybgEX0GD1t
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:26:05

 - Status: THREAD_ID: thread_RqyyyFfcCUjyuJ92ecTtHJPd
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello World')",
"runtime": "10"
}

================== RUNNING CODE (10 seconds) ==================
        print('Hello World')


>>> 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 
print('Hello World')

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_RKM0fr8FzZnScsW5lxN1QzfI', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \nprint(\'Hello World\')\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello World')",
"runtime": "10"
}

================== RUNNING CODE (10 seconds) ==================
        print('Hello World')
 - Status: 

MPY: sync filesystems

MPY: soft reboot



================== SERIAL OUPUT ==================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 
print('Hello World')

=== 

==================== END ====================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Wmsutb6iu5chAGuoFsn6xqUG', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \nprint(\'Hello World\')\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:31:09

 - Status: THREAD_ID: thread_APryytEazmjRwRCjZsiEv5xc
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:32:00

 - Status: THREAD_ID: thread_k0pRQzJuIXbfMKU8vKe4RKbC
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
============RUNNING CODE (1 seconds)============


print('hello world')
 - Status: 

MPY: sync filesystems

MPY: soft reboot


==================SERIAL OUPUT==================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('hello world')

=== 

=======================END=======================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_58l1vqqeet4IZvSpeRWAXITA', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'hello world\')\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the SPIKE Prime print \"Hello World\" to the terminal?"
}
Hey Human, Did the SPIKE Prime print "Hello World" to the terminal?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:36:51

 - Status: THREAD_ID: thread_qirdOHVTlBpuHt8WQbQR6pM8
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
========================== RUNNING CODE (1 seconds) ==========================


print('hello world')


>>> 

MPY: sync filesystems

MPY: soft reboot


================================ SERIAL OUPUT ================================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('hello world')

=== 

===================================== END ======================================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_1JayPK0ktaZY5tCMpF5G9dHV', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'hello world\')\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:37:25

 - Status: THREAD_ID: thread_O9mt0IOjgn26307Sj7QMK9nZ
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What are the ports of the motors?"
}
Hey Human, What are the ports of the motors?
Submitting tool outputs: [{'tool_call_id': 'call_KtS951NUg1YIYmLPjRnnFiAl', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_1FLaFDscGlpcwIjB9T6cPwmn', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 720, 0, velocity=200)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ==================


import motor_pair 

from hub import port 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 720, 0, velocity=200)


>>> 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 720, 0, velocity=200)

=== 

============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_J4nb6F649tIdPVWrb4fnJie3', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 720, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_YiaGtlKFYmN3PeAtE1cFsuqh', 'output': 'yes, try printing hello world when the motor is done'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "sound"
}
Querying documentation for: sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_9XlucGsPPyhLAQQow1VFc1pd', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port, sound \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 720, 0, velocity=200) \n sound.beep(freq = 440, duration = 500, volume = 100)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ===================


import motor_pair 

from hub import port, sound 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 720, 0, velocity=200) 

sound.beep(freq = 440, duration = 500, volume = 100)
 - Status: 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port, sound 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 720, 0, velocity=200) 

=== 
sound.beep(freq = 440, duration = 500, volume = 100)

=== 

============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_cYoGvSJVohsIBznqlpi95fm2', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port, sound \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 720, 0, velocity=200) \r\n=== \nsound.beep(freq = 440, duration = 500, volume = 100)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward and make a beep sound?"
}
Hey Human, Did the robot move forward and make a beep sound?
Submitting tool outputs: [{'tool_call_id': 'call_uuLTkjYRz2S6YmMQdTcOYBUj', 'output': 'yeah but thats not what i asked for'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "light_matrix"
}
Querying documentation for: light_matrix
{'name': 'light_matrix', 'description': 'a class that enables control of built in SPIKE Prime led matrix', 'initialization': 'none', 'required imports': 'from hub import light_matrix', 'function': [{'name': 'clear', 'syntax': 'color_matrix.clear()', 'parameters': 'none', 'returns': 'none'}, {'name': 'set_pixel', 'syntax': 'light_matrix.set_pixel(2,2,100)', 'parameters': [{'name': 'x value', 'description': 'the x position of led on the matrix', 'values': 'integer 0:4'}, {'name': 'y value', 'description': 'the y position of led on the matrix', 'values': 'integer 0:4'}, {'name': 'brightness', 'description': 'the light intensity of the pixel', 'values': 'integer 1:100'}]}, {'name': 'show', 'syntax': 'light_matrix.show(list[int])', 'parameters': [{'name': 'pixel list', 'description': 'a list of length 25 corresponding to each pixel in the 5x5 led matrix', 'values': 'legnth 25 list of integers with values 1:100'}], 'example': '# Create a list with 25 identical intensity values \r\n pixels = [100] * 25 \r\n # Update all pixels to show same intensity \r\n light_matrix.show(pixels)'}, {'name': 'show_image', 'syntax': 'light_matrix.show_image(light_matrix.IMAGE_HAPPY)', 'parameters': [{'name': 'image id', 'description': 'The id of the image to show. The range of available images is 1 to 67. There are consts on the light_matrix module for these.', 'values': 'int 1:67'}], 'example': 'from hub import light_matrix\r\n# Show a small heart\r\nlight_matrix.show_image(2)'}, {'name': 'write', 'syntax': 'light_matrix.write(text: str, intensity: int = 100, time_per_character: int = 500)', 'parameters': [{'name': 'text', 'description': 'the text to display on the matrix', 'values': 'string'}, {'name': 'intensity', 'description': 'the brightness of the leds', 'values': 'integer 1:100'}, {'name': 'time per character', 'description': 'How long to show each character on the display in milliseconds', 'values': 'positive integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_s2kn6OvosCdZst2nWPAkR5hU', 'output': '{"name": "light_matrix", "description": "a class that enables control of built in SPIKE Prime led matrix", "initialization": "none", "required imports": "from hub import light_matrix", "function": [{"name": "clear", "syntax": "color_matrix.clear()", "parameters": "none", "returns": "none"}, {"name": "set_pixel", "syntax": "light_matrix.set_pixel(2,2,100)", "parameters": [{"name": "x value", "description": "the x position of led on the matrix", "values": "integer 0:4"}, {"name": "y value", "description": "the y position of led on the matrix", "values": "integer 0:4"}, {"name": "brightness", "description": "the light intensity of the pixel", "values": "integer 1:100"}]}, {"name": "show", "syntax": "light_matrix.show(list[int])", "parameters": [{"name": "pixel list", "description": "a list of length 25 corresponding to each pixel in the 5x5 led matrix", "values": "legnth 25 list of integers with values 1:100"}], "example": "# Create a list with 25 identical intensity values \\r\\n pixels = [100] * 25 \\r\\n # Update all pixels to show same intensity \\r\\n light_matrix.show(pixels)"}, {"name": "show_image", "syntax": "light_matrix.show_image(light_matrix.IMAGE_HAPPY)", "parameters": [{"name": "image id", "description": "The id of the image to show. The range of available images is 1 to 67. There are consts on the light_matrix module for these.", "values": "int 1:67"}], "example": "from hub import light_matrix\\r\\n# Show a small heart\\r\\nlight_matrix.show_image(2)"}, {"name": "write", "syntax": "light_matrix.write(text: str, intensity: int = 100, time_per_character: int = 500)", "parameters": [{"name": "text", "description": "the text to display on the matrix", "values": "string"}, {"name": "intensity", "description": "the brightness of the leds", "values": "integer 1:100"}, {"name": "time per character", "description": "How long to show each character on the display in milliseconds", "values": "positive integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port, sound, light_matrix \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 720, 0, velocity=200) \n light_matrix.write(text = 'Hello World', intensity = 100, time_per_character = 500)",
"runtime": "15"
}
================== RUNNING CODE (15 seconds) ===================


import motor_pair 

from hub import port, sound, light_matrix 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move_for_degrees(motor_pair.PAIR_1, 720, 0, velocity=200) 

light_matrix.write(text = 'Hello World', intensity = 100, time_per_character = 500)
 - Status: 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port, sound, light_matrix 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 720, 0, velocity=200) 

=== 
light_matrix.write(text = 'Hello World', intensity = 100, time_per_character = 500)

=== 

============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_gvuqn933jxcWKzfhHt1vYkF3', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port, sound, light_matrix \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 720, 0, velocity=200) \r\n=== \nlight_matrix.write(text = \'Hello World\', intensity = 100, time_per_character = 500)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "After moving, did the robot display 'Hello World' on its light matrix?"
}
Hey Human, After moving, did the robot display 'Hello World' on its light matrix?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:39:33

 - Status: THREAD_ID: thread_EourYvol545o5O0fJYgUg0Pm
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello World')",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ==================


print('Hello World')


>>> 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('Hello World')

=== 

============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Wsmxy34ewAwieaUh6GcTDJbH', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'Hello World\')\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the code print 'Hello World'?"
}
Hey Human, Did the code print 'Hello World'?
Submitting tool outputs: [{'tool_call_id': 'call_IuXpykTs12L07Y2qVNZQR1GQ', 'output': 'now do it in a loop 5 times'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "for i in range(5):\\n print('Hello World')",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ==================


for i in range(5):\n print('Hello World')
 - Status: 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
for i in range(5):\n print('Hello World')

=== 

============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_034CPgSQWE3Gk4bOFOOEs6ZW', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nfor i in range(5):\\n print(\'Hello World\')\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the code print 'Hello World' five times?"
}
Hey Human, Did the code print 'Hello World' five times?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:41:16

 - Status: THREAD_ID: thread_EdjYXkJdtsROaBCKQvgYt02p
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
================== RUNNING CODE (1 seconds) ==================


print('hello world')


>>> 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('hello world')

=== 



hello world

>>> 

>>> 
============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_bCTFGXxv3KgnHTaI0EkBO28C', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'hello world\')\r\n=== \n\n\r\nhello world\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:42:55

 - Status: THREAD_ID: thread_ey9OI542KvmMKTqjSJKzh0Rj
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "2"
}
================== RUNNING CODE (2 seconds) ==================


print('hello world')
 - Status: 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('hello world')

=== 



hello world

>>> 

>>> 
============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ApCR1WPtDYsZ6lFS6V2upx2t', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'hello world\')\r\n=== \n\n\r\nhello world\r\n>>> \r\n>>> '}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:43:48

 - Status: THREAD_ID: thread_jAUjZv6ciyEBEycjBfHtPe04
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello World')",
"runtime": "1"
}
================== RUNNING CODE (1 seconds) ==================


print('Hello World')


>>> 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('Hello World')

=== 



Hello World

============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_s3lCLQLLkPS5MgOW7P3ITSPk', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'Hello World\')\r\n=== \n\n\r\nHello World\r'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:45:48

 - Status: THREAD_ID: thread_xidyi4vL3FRxCiJGSzbF8KDd
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
================== RUNNING CODE (1 seconds) ==================


print('hello world')


>>> 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('hello world')

=== 

hello world
============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Td5PAFt4bhccfB58wc5wZhjS', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'hello world\')\r\n=== \n\nhello world'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:46:12

 - Status: THREAD_ID: thread_lONZPqc3sgjQWmcgpMnFLRTc
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
================== RUNNING CODE (1 seconds) ==================


print('hello world')


>>> 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('hello world')

=== 

hello world
============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_X8Fnd7uNdMOets2TpFWYPByT', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'hello world\')\r\n=== \n\nhello world'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:46:33

 - Status: THREAD_ID: thread_7ewVKneChKKk2EfcOtzMofH5
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello World')",
"runtime": "2"
}
================== RUNNING CODE (2 seconds) ==================


print('Hello World')
 - Status: 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('Hello World')

=== 

Hello World
============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Aqpmj3bmNVeFp1N3OvfbhSSD', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'Hello World\')\r\n=== \n\nHello World'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:47:19

 - Status: THREAD_ID: thread_FDI0jIzU2cDVAUikKSGeHHJc
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
 "code": "print('Hello World')",
 "runtime": "2"
}
================== RUNNING CODE (2 seconds) ==================


print('Hello World')


>>> 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('Hello World')

=== 

Hello World
============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_UObXBcmJEfBPNkleBdc74tjc', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'Hello World\')\r\n=== \n\nHello World'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:48:20

 - Status: THREAD_ID: thread_652a03vnet0Z6kQIeuTtI5ZI
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "2"
}
================== RUNNING CODE (2 seconds) ==================


print('hello world')


>>> 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================



MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('hello world')

=== 

hello world
============================= END ==============================



>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_yO9FyP8W7WIxWSNxrDFYriaI', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'hello world\')\r\n=== \n\nhello world'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:49:17

 - Status: THREAD_ID: thread_2wmAkHrmXvm9xOnnWkDpE5qf
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello World')",
"runtime": "2"
}
================== RUNNING CODE (2 seconds) ==================

print('Hello World')
 - Status: 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('Hello World')

=== 

Hello World
============================= END ==============================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_QOEfhGctJ03SSOj2iEbOiTys', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'Hello World\')\r\n=== \n\nHello World'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:50:54

 - Status: THREAD_ID: thread_svPTb6Ri9eYHSZTk2UqtUnbc
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
================== RUNNING CODE (1 seconds) ==================


print('hello world')


>>> 

MPY: sync filesystems

MPY: soft reboot


 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:51:39

 - Status: THREAD_ID: thread_b1q4JMkHix27T8vg5xUZNaSF
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ==================


print('hello world')


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


>>> 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('hello world')

=== 

hello world
============================= END ==============================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_gozfjhAMZ05qO9OcNwqh38js', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'hello world\')\r\n=== \n\nhello world'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:53:26

 - Status: THREAD_ID: thread_1S81Hd3fICT4BhHCHctgHdnc
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
================== RUNNING CODE (1 seconds) ==================
print('hello world')


>>> 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT ========================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
print('hello world')

=== 

hello world
============================= END ==============================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ijqyGRSRya22wTBKvpj1yzEv', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nprint(\'hello world\')\r\n=== \n\nhello world'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:53:52

 - Status: THREAD_ID: thread_9piMMQpVChTO4eHlBpRFreNP
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:54:28

 - Status: THREAD_ID: thread_1v9EUMNI0hEeh1JgOdwug1QU
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Could you please confirm that the touch sensor is in port C and the distance sensor is in port F?"
}
Hey Human, Could you please confirm that the touch sensor is in port C and the distance sensor is in port F?
Submitting tool outputs: [{'tool_call_id': 'call_A612IMIwjKKpchv3dATxOXX1', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_DBz9IRVZAuxd7LZBroWWk9FL', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "touch_sensor"
}
Querying documentation for: touch_sensor
No available information on touch_sensor. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help.
Submitting tool outputs: [{'tool_call_id': 'call_nq94tzCQh4vpuViTzeiHiEss', 'output': '"No available information on touch_sensor. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "force_sensor"
}
Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_30b9IdjCTvJX62Gilej44cOD', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_eKMZfCLEb7SaxgudkWWD9iRz', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "sound"
}
Querying documentation for: sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_aQBB3UyJlJVq6hFsKZZZUBab', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor \n from hub import port \n import force_sensor \n import distance_sensor \n from hub import sound \n from time import sleep \n \n while True: \n     if force_sensor.pressed(port.C): \n         distance = distance_sensor.distance(port.F) \n         # assuming the distance ranges from 0 to 2540 mm, and mapping it to be between 20 to 20000 Hz \n         freq = (distance / 2540) * 19800 + 200 \n         duration = 100 \n         volume = 100 \n         sound.beep(freq, duration, volume) \n     sleep(0.1)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import motor 
from hub import port 
import force_sensor 
import distance_sensor 
from hub import sound 
from time import sleep 

while True: 
    if force_sensor.pressed(port.C): 
        distance = distance_sensor.distance(port.F) 
        # assuming the distance ranges from 0 to 2540 mm, and mapping it to be between 20 to 20000 Hz 
        freq = (distance / 2540) * 19800 + 200 
        duration = 100 
        volume = 100 
        sound.beep(freq, duration, volume) 
    sleep(0.1)


>>> 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT =========================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor 

=== 
from hub import port 

=== 
import force_sensor 

=== 
import distance_sensor 

=== 
from hub import sound 

=== 
from time import sleep 

=== 


=== 
while True: 

=== 
    if force_sensor.pressed(port.C): 

=== 
        distance = distance_sensor.distance(port.F) 

=== 
        # assuming the distance ranges from 0 to 2540 mm, and mapping it to be between 20 to 20000 Hz 

=== 
        freq = (distance / 2540) * 19800 + 200 

=== 
        duration = 100 

=== 
        volume = 100 

=== 
        sound.beep(freq, duration, volume) 

=== 
    sleep(0.1)

=== 

Traceback (most recent call last):
File "<stdin>", line 11, in <module>
OSError: [Errno 19] ENODEV
============================= END =============================


>>> 

>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_bJzb3zdVsUYRdJWQJYXjfxHf', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor \r\n=== \nfrom hub import port \r\n=== \nimport force_sensor \r\n=== \nimport distance_sensor \r\n=== \nfrom hub import sound \r\n=== \nfrom time import sleep \r\n=== \n\r\n=== \nwhile True: \r\n=== \n    if force_sensor.pressed(port.C): \r\n=== \n        distance = distance_sensor.distance(port.F) \r\n=== \n        # assuming the distance ranges from 0 to 2540 mm, and mapping it to be between 20 to 20000 Hz \r\n=== \n        freq = (distance / 2540) * 19800 + 200 \r\n=== \n        duration = 100 \r\n=== \n        volume = 100 \r\n=== \n        sound.beep(freq, duration, volume) \r\n=== \n    sleep(0.1)\r\n=== \n\nTraceback (most recent call last):\nFile "<stdin>", line 11, in <module>\nOSError: [Errno 19] ENODEV'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "The code returned an error. Can you confirm that the distance sensor is connected to port F and touch sensor is connected to port C?"
}
Hey Human, The code returned an error. Can you confirm that the distance sensor is connected to port F and touch sensor is connected to port C?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:55:41

 - Status: THREAD_ID: thread_QUf9gXkjUfQ1CxIalUTYKGVf
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Please confirm that the distance sensor is connected to port D and the motors are connected to ports A and B"
}
Hey Human, Please confirm that the distance sensor is connected to port D and the motors are connected to ports A and B
Submitting tool outputs: [{'tool_call_id': 'call_JZNpTcTFkn3twWg09grI2fbA', 'output': 'y'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor"
}
Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_lUN6qJWLbezMyuGP5ToujJFV', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "distance_sensor"
}
Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_T7sjtXZkHsgi0fyWsU3JhmkS', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import distance_sensor \n from hub import port \n import motor \n desired_distance = 100 \n while True: \n   current_distance = distance_sensor.distance(port.D) \n   if current_distance > desired_distance: \n     motor.run_for_degrees(port.A, 360, 75) \n     motor.run_for_degrees(port.B, 360, 75) \n   elif current_distance < desired_distance: \n     motor.run_for_degrees(port.A, -360, 75) \n     motor.run_for_degrees(port.B, -360, 75)",
  "runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import distance_sensor 
from hub import port 
import motor 
desired_distance = 100 
while True: 
  current_distance = distance_sensor.distance(port.D) 
  if current_distance > desired_distance: 
    motor.run_for_degrees(port.A, 360, 75) 
    motor.run_for_degrees(port.B, 360, 75) 
  elif current_distance < desired_distance: 
    motor.run_for_degrees(port.A, -360, 75) 
    motor.run_for_degrees(port.B, -360, 75)
 - Status: 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT =========================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import distance_sensor 

=== 
from hub import port 

=== 
import motor 

=== 
desired_distance = 100 

=== 
while True: 

=== 
  current_distance = distance_sensor.distance(port.D) 

=== 
  if current_distance > desired_distance: 

=== 
    motor.run_for_degrees(port.A, 360, 75) 

=== 
    motor.run_for_degrees(port.B, 360, 75) 

=== 
  elif current_distance < desired_distance: 

=== 
    motor.run_for_degrees(port.A, -360, 75) 

=== 
    motor.run_for_degrees(port.B, -360, 75)

=== 

 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:59:19

 - Status: THREAD_ID: thread_0w2Dwyj9bODosvAMhYSAQYDv
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: failed
Run failed
Run(id='run_kMntU2l46AsUZcRtI9lgnhyv', assistant_id='asst_8WN5ksXpnNaBeAr1IKrLq4yd', cancelled_at=None, completed_at=None, created_at=1709845162, expires_at=None, failed_at=1709845163, file_ids=[], instructions="Your goal is to iteratively program a spike prime robot in MicroPython using only SPIKE 3 syntax according to a given task. Any code that you produce in MicroPython will be directly run on the robot with no alterations. Therefore it is important that you only produce one block of code per message and each block of code contains every single line that is needed to run.  Do not ever assume that a motor or sensor is connected to a given port, always ask which port is wired in before running your code.\n\nYou have four tools at your disposal to improve your code; [get_documentation, get_feedback, get_visual_feedback, run_code]. You should use these tools as much as possible to improve the accuracy of your code. Explanations for each function is contained within the description category of the function json file. \n\nRules of code iteration: Always use get_documentation to verify the correctness of syntax before using new SPIKE Classes, do not assume that code is correct. If you are stuck and can't get code to run without errors, make sure to use the get_feedback function to receive help from a competent human.\n\nVery important: Make sure to call run_code at least once followed by get_feedback or get_visual_feedback before finalizing your response.\n\nAlso important: when writing code to drive the robot with two motors take advantage of the motor_pair class. ", last_error=LastError(code='server_error', message='Sorry, something went wrong.'), metadata={}, model='gpt-4', object='thread.run', required_action=None, started_at=1709845162, status='failed', thread_id='thread_0w2Dwyj9bODosvAMhYSAQYDv', tools=[ToolAssistantToolsCode(type='code_interpreter'), ToolAssistantToolsFunction(function=FunctionDefinition(name='get_documentation', description='Call the get_documentation function whenever you are unsure of how to code something in SPIKE 3 MicroPython. Specific functions and imports you may query are [motor, motor_pair, color_sensor, distance_sensor, motion_sensor, force_sensor, sound, light_matrix]. Do not assume that any legacy code will be correct. Instead, use the get_documentation function to retrieve examples of how to use SPIKE 3 features. This includes syntax for importing libraries, using classes, and specific functions. A query will always return required imports, proper syntax, and required parameter descriptions. If you do not get a query response it means that your query does not exist in the database, ask the human using get_feedback to determine what the right query is for your specific case.', parameters={'type': 'object', 'properties': {'query': {'type': 'string', 'description': 'The class that requires documentation.'}}, 'required': ['query']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='get_feedback', description='Call the get_feedback function to verify characteristics of the robot such as sensor ports, robot actions like motion or sound, or to get help on code that returns errors.', parameters={'type': 'object', 'properties': {'prompt': {'type': 'string', 'description': 'A specific question for the human that you need to verify or improve the success of your code.'}}, 'required': ['prompt']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='run_code', description='Call the run_code function to run the code on the robot. In return you will be provided the output of the code from the REPL . If your code returns errors, try to diagnose them yourself, or use get_documentation or get_feedback to resolve the issue.', parameters={'type': 'object', 'properties': {'code': {'type': 'string', 'description': 'The micropython code you want to run on the SPIKE Prime. You MUST format the code in one line. Separate each line using backslash n and no spaces. Note that the indentation is assumed and you need to have 2 newlines if you want to reset indentation. For example, if you want a line to come after a while loop instead of inside of it, you need to have 2 newlines before it.'}, 'runtime': {'type': 'string', 'description': 'The duration for which you would like the code to run in seconds before it is stopped.'}}, 'required': ['code', 'runtime']}), type='function'), ToolAssistantToolsFunction(function=FunctionDefinition(name='get_visual_feedback', description='Call the get_visual_feedback function to inspect the visual physical conditions of the robot using a sequence of images. You will get a written description answering your query in response. For example, if you need to check if the robot is moving or if the light matrix is displaying something you should call the get_visual_feedback function. To get useful feedback it is important that your query is clear and specific.', parameters={'type': 'object', 'properties': {'query': {'type': 'string', 'description': "A specific question describing what you would like to know about the robot in the image sequence. Example: 'Did the spike prime robot move forward over time'"}, 'image_num': {'type': 'string', 'description': "How many images you would like to be taken of the robot. More images will be able to provide more information about the robot's movement over time."}, 'interval': {'type': 'string', 'description': 'The duration of time in between when each image is taken. Use this in tandem with image_num to increase or decrease the time frame over which you are observing the robot.'}}, 'required': ['query', 'image_num', 'interval']}), type='function')], usage=Usage(completion_tokens=0, prompt_tokens=0, total_tokens=0))
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 15:59:45

 - Status: THREAD_ID: thread_SpMI4la6SlDJXszNU900DtDu
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Can you confirm the motors are connected to ports A and B, and the distance sensor is connected to port D?"
}
Hey Human, Can you confirm the motors are connected to ports A and B, and the distance sensor is connected to port D?
Submitting tool outputs: [{'tool_call_id': 'call_A61hVq0BM4n84VD7xqueiEeL', 'output': 'y'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_t1tUOAlVZRZeawVt6q6oemiG', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "distance_sensor"
}
Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_jdr2oF95GJvhWNQUoH4ZpEWs', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n import distance_sensor \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n desired_distance = 100 \n while True: \n   current_distance = distance_sensor.distance(port.D) \n   if current_distance > desired_distance: \n     motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=-200) \n   elif current_distance < desired_distance: \n     motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) \n   else: \n     motor_pair.off(motor_pair.PAIR_1)",
  "runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import motor_pair 
from hub import port 
import distance_sensor 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
desired_distance = 100 
while True: 
  current_distance = distance_sensor.distance(port.D) 
  if current_distance > desired_distance: 
    motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=-200) 
  elif current_distance < desired_distance: 
    motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 
  else: 
    motor_pair.off(motor_pair.PAIR_1)


>>> 

MPY: sync filesystems

MPY: soft reboot


======================== SERIAL OUPUT =========================


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413

Type "help()" for more information.

>>> 

>>> 

paste mode; Ctrl-C to cancel, Ctrl-D to finish

=== 

=== 


=== 
import motor_pair 

=== 
from hub import port 

=== 
import distance_sensor 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

=== 
desired_distance = 100 

=== 
while True: 

=== 
  current_distance = distance_sensor.distance(port.D) 

=== 
  if current_distance > desired_distance: 

=== 
    motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=-200) 

=== 
  elif current_distance < desired_distance: 

=== 
    motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 

=== 
  else: 

=== 
    motor_pair.off(motor_pair.PAIR_1)

=== 

<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:05:12

 - Status: THREAD_ID: thread_BP2DCma7kYQFcDrAI71I2csF
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Could you please confirm if the distance sensor is in port D and the motors are in ports A and B?"
}
Hey Human, Could you please confirm if the distance sensor is in port D and the motors are in ports A and B?
Submitting tool outputs: [{'tool_call_id': 'call_WLTWCVIXpQOalAsQTZ7fuzow', 'output': 'y'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_elwSJhTnVSeQUz3uCNjUc73M', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_DsJgH6pbvQlgoKtihR4WrKqq', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor_pair \n \n distance = distance_sensor.distance(port.D) \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n \n desired_distance = 100 \n \n if distance > desired_distance: \n     motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=-200) \n else: \n     motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import distance_sensor 
from hub import port 
import motor_pair 

distance = distance_sensor.distance(port.D) 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

desired_distance = 100 

if distance > desired_distance: 
    motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=-200) 
else: 
    motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=200)
 - Status: 
MPY: sync filesystems
MPY: soft reboot

======================== SERIAL OUPUT =========================

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

=== 
import distance_sensor 
=== 
from hub import port 
=== 
import motor_pair 
=== 

=== 
distance = distance_sensor.distance(port.D) 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 

=== 
desired_distance = 100 
=== 

=== 
if distance > desired_distance: 
=== 
    motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=-200) 
=== 
else: 
=== 
    motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=200)
=== 

============================= END =============================

>>> 
>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_428hLNRnvHhW2OyGazFvgQcr', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport motor_pair \r\n=== \n\r\n=== \ndistance = distance_sensor.distance(port.D) \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n\r\n=== \ndesired_distance = 100 \r\n=== \n\r\n=== \nif distance > desired_distance: \r\n=== \n    motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=-200) \r\n=== \nelse: \r\n=== \n    motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward then backward maintaining a distance of 100mm from the object?"
}
Hey Human, Did the robot move forward then backward maintaining a distance of 100mm from the object?
Submitting tool outputs: [{'tool_call_id': 'call_gSN9i90xSj3TqPpmsfCJzYer', 'output': 'no, make  while loop'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor_pair \n \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n \n desired_distance = 100 \n \n while True: \n     distance = distance_sensor.distance(port.D) \n     if distance > desired_distance: \n         motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=-200) \n     else: \n         motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import distance_sensor 
from hub import port 
import motor_pair 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

desired_distance = 100 

while True: 
    distance = distance_sensor.distance(port.D) 
    if distance > desired_distance: 
        motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=-200) 
    else: 
        motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=200)
 - Status: 
MPY: sync filesystems
MPY: soft reboot

======================== SERIAL OUPUT =========================

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

=== 
import distance_sensor 
=== 
from hub import port 
=== 
import motor_pair 
=== 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 

=== 
desired_distance = 100 
=== 

=== 
while True: 
=== 
    distance = distance_sensor.distance(port.D) 
=== 
    if distance > desired_distance: 
=== 
        motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=-200) 
=== 
    else: 
=== 
        motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=200)
=== 

============================= END =============================

>>> 
>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_YxxD8UdcYp0erVDEKPIQaniR', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport motor_pair \r\n=== \n\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n\r\n=== \ndesired_distance = 100 \r\n=== \n\r\n=== \nwhile True: \r\n=== \n    distance = distance_sensor.distance(port.D) \r\n=== \n    if distance > desired_distance: \r\n=== \n        motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=-200) \r\n=== \n    else: \r\n=== \n        motor_pair.move_for_seconds(motor_pair.PAIR_1, 1000, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward and backward maintaining a distance of 100mm from the object?"
}
Hey Human, Did the robot move forward and backward maintaining a distance of 100mm from the object?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:08:22

 - Status: THREAD_ID: thread_8Rc1g8mU1tQ5amGJpXWQgDtC
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Are the motors wired into ports A and B and is the distance sensor wired into port D?"
}
Hey Human, Are the motors wired into ports A and B and is the distance sensor wired into port D?
Submitting tool outputs: [{'tool_call_id': 'call_tXWrVjJwLLSk6RnpC1MTQRp7', 'output': 'y'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_QAqdwHchREegMOiLZJP6FMSm', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_LfiLDOMVM9nCPCmrNGnKxDt0', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor_pair \n distance = distance_sensor.distance(port.D) \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     if distance > 100: \n         motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) \n     else: \n         motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=-200)",
"runtime": "60"
}
================== RUNNING CODE (60 seconds) ==================
import distance_sensor 
from hub import port 
import motor_pair 
distance = distance_sensor.distance(port.D) 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    if distance > 100: 
        motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 
    else: 
        motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=-200)

>>> 
MPY: sync filesystems
MPY: soft reboot

======================== SERIAL OUPUT =========================

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

=== 
import distance_sensor 
=== 
from hub import port 
=== 
import motor_pair 
=== 
distance = distance_sensor.distance(port.D) 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
while True: 
=== 
    if distance > 100: 
=== 
        motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 
=== 
    else: 
=== 
        motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=-200)
=== 

<a
waitable>
<
<
>
>
<
<
<
>
<awa
itable>
<
>
<
<
>
<awai
table>
<
<awaita
ble>
<aw
aitable>
<awaitabl
e>
============================= END =============================
>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
Traceback (most recent call last):
  File "<stdin>", line 10, in <module>
KeyboardInterrupt: 
>>> 
>>> 
>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Qya36KvgfbTf88Vv7kTaH1KT', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport motor_pair \r\n=== \ndistance = distance_sensor.distance(port.D) \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nwhile True: \r\n=== \n    if distance > 100: \r\n=== \n        motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) \r\n=== \n    else: \r\n=== \n        motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=-200)\r\n=== \n\n<a\nwaitable>\n<\n<\n>\n>\n<\n<\n<\n>\n<awa\nitable>\n<\n>\n<\n<\n>\n<awai\ntable>\n<\n<awaita\nble>\n<aw\naitable>\n<awaitabl\ne>'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward and backwards in order to maintain a distance of 100 to an obstacle using the distance sensor?"
}
Hey Human, Did the robot move forward and backwards in order to maintain a distance of 100 to an obstacle using the distance sensor?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:10:35

 - Status: THREAD_ID: thread_MqMbLS1PCQgJdhk5P9pWpd4V
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Can you confirm that the distance sensor is wired into port D and the two motors are wired into ports A and B?"
}
Hey Human, Can you confirm that the distance sensor is wired into port D and the two motors are wired into ports A and B?
Submitting tool outputs: [{'tool_call_id': 'call_JkXa3rXQuQyI71bVzbtDGVby', 'output': 'y'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_r2GuCmh9v3NVh5Mkl4ocXqso', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_imK1zBQSJWv6hPY3Ck5m8MM8', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor_pair \n dist_value = distance_sensor.distance(port.D) \n if dist_value < 100: \n     motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=-200) \n elif dist_value > 100: \n     motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import distance_sensor 
from hub import port 
import motor_pair 
dist_value = distance_sensor.distance(port.D) 
if dist_value < 100: 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=-200) 
elif dist_value > 100: 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)

>>> 
MPY: sync filesystems
MPY: soft reboot

======================== SERIAL OUPUT =========================

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

=== 
import distance_sensor 
=== 
from hub import port 
=== 
import motor_pair 
=== 
dist_value = distance_sensor.distance(port.D) 
=== 
if dist_value < 100: 
=== 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=-200) 
=== 
elif dist_value > 100: 
=== 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
=== 

============================= END =============================

>>> 
>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_4cPGX2DfrYcRCJfG5BQgkMkC', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport motor_pair \r\n=== \ndist_value = distance_sensor.distance(port.D) \r\n=== \nif dist_value < 100: \r\n=== \n    motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=-200) \r\n=== \nelif dist_value > 100: \r\n=== \n    motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move according to the code?"
}
Hey Human, Did the robot move according to the code?
Submitting tool outputs: [{'tool_call_id': 'call_hSFbqX7qgi9VBtO8W8xL3T1O', 'output': 'use while loop'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor_pair \n while True: \n     dist_value = distance_sensor.distance(port.D) \n     if dist_value < 100: \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=-200) \n     elif dist_value > 100: \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import distance_sensor 
from hub import port 
import motor_pair 
while True: 
    dist_value = distance_sensor.distance(port.D) 
    if dist_value < 100: 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=-200) 
    elif dist_value > 100: 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)
 - Status: 
MPY: sync filesystems
MPY: soft reboot

======================== SERIAL OUPUT =========================

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

=== 
import distance_sensor 
=== 
from hub import port 
=== 
import motor_pair 
=== 
while True: 
=== 
    dist_value = distance_sensor.distance(port.D) 
=== 
    if dist_value < 100: 
=== 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=-200) 
=== 
    elif dist_value > 100: 
=== 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)
=== 

============================= END =============================

>>> 
>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_X1NCGUUaYlVn8bW0uyDhzkrF', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport motor_pair \r\n=== \nwhile True: \r\n=== \n    dist_value = distance_sensor.distance(port.D) \r\n=== \n    if dist_value < 100: \r\n=== \n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=-200) \r\n=== \n    elif dist_value > 100: \r\n=== \n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot maintain a distance of 100 mm by moving backwards and forwards?"
}
Hey Human, Did the robot maintain a distance of 100 mm by moving backwards and forwards?
Submitting tool outputs: [{'tool_call_id': 'call_LzN9zb4hKCKLwWUTCy4NhB61', 'output': 'no'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor_pair \n while True: \n     dist_value = distance_sensor.distance(port.D) \n     if dist_value < 100: \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=-200) \n     elif dist_value > 100: \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200) \n     else: \n         motor_pair.stop()",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import distance_sensor 
from hub import port 
import motor_pair 
while True: 
    dist_value = distance_sensor.distance(port.D) 
    if dist_value < 100: 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=-200) 
    elif dist_value > 100: 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200) 
    else: 
        motor_pair.stop()
 - Status: 
MPY: sync filesystems
MPY: soft reboot

======================== SERIAL OUPUT =========================

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

=== 
import distance_sensor 
=== 
from hub import port 
=== 
import motor_pair 
=== 
while True: 
=== 
    dist_value = distance_sensor.distance(port.D) 
=== 
    if dist_value < 100: 
=== 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=-200) 
=== 
    elif dist_value > 100: 
=== 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200) 
=== 
    else: 
=== 
        motor_pair.stop()
=== 

============================= END =============================

>>> 
>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_5W4HreTtTdEonrrhs9OxvRJ2', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport motor_pair \r\n=== \nwhile True: \r\n=== \n    dist_value = distance_sensor.distance(port.D) \r\n=== \n    if dist_value < 100: \r\n=== \n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=-200) \r\n=== \n    elif dist_value > 100: \r\n=== \n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200) \r\n=== \n    else: \r\n=== \n        motor_pair.stop()\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot maintain a distance of 100mm by moving forward and backward, and stop when it achieved this distance?"
}
Hey Human, Did the robot maintain a distance of 100mm by moving forward and backward, and stop when it achieved this distance?
Submitting tool outputs: [{'tool_call_id': 'call_16SbTfFtmsdXuDYFsxI4Numz', 'output': "no, motors didn't move"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_cDzl979MUlpgGq32V1ScIxRU', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor \n while True: \n     dist_value = distance_sensor.distance(port.D) \n     if dist_value < 100: \n         motor.start(port.A, -200) \n         motor.start(port.B, -200) \n     elif dist_value > 100: \n         motor.start(port.A, 200) \n         motor.start(port.B, 200) \n     else: \n         motor.stop(port.A) \n         motor.stop(port.B)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import distance_sensor 
from hub import port 
import motor 
while True: 
    dist_value = distance_sensor.distance(port.D) 
    if dist_value < 100: 
        motor.start(port.A, -200) 
        motor.start(port.B, -200) 
    elif dist_value > 100: 
        motor.start(port.A, 200) 
        motor.start(port.B, 200) 
    else: 
        motor.stop(port.A) 
        motor.stop(port.B)
 - Status: 
MPY: sync filesystems
MPY: soft reboot

======================== SERIAL OUPUT =========================

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

=== 
import distance_sensor 
=== 
from hub import port 
=== 
import motor 
=== 
while True: 
=== 
    dist_value = distance_sensor.distance(port.D) 
=== 
    if dist_value < 100: 
=== 
        motor.start(port.A, -200) 
=== 
        motor.start(port.B, -200) 
=== 
    elif dist_value > 100: 
=== 
        motor.start(port.A, 200) 
=== 
        motor.start(port.B, 200) 
=== 
    else: 
=== 
        motor.stop(port.A) 
=== 
        motor.stop(port.B)
=== 

============================= END =============================

>>> 
>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_1E15TUUXpcp1yy6SNvBlgNHo', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport motor \r\n=== \nwhile True: \r\n=== \n    dist_value = distance_sensor.distance(port.D) \r\n=== \n    if dist_value < 100: \r\n=== \n        motor.start(port.A, -200) \r\n=== \n        motor.start(port.B, -200) \r\n=== \n    elif dist_value > 100: \r\n=== \n        motor.start(port.A, 200) \r\n=== \n        motor.start(port.B, 200) \r\n=== \n    else: \r\n=== \n        motor.stop(port.A) \r\n=== \n        motor.stop(port.B)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "After making the changes, did the robot move the motors accordingly and maintain the distance of 100 mm?"
}
Hey Human, After making the changes, did the robot move the motors accordingly and maintain the distance of 100 mm?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:14:17

 - Status: THREAD_ID: thread_VQNZwuuzeDqqYuwhEXD7k09q
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_gjOk3hwd1F0uWbNk4zzwZ5gy', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \nfrom hub import port \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)

>>> 
MPY: sync filesystems
MPY: soft reboot

======================== SERIAL OUPUT =========================

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
=== 

============================= END =============================

>>> 
>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_RQVFuvUGVf96h6YTNqIVLsvA', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forwards?"
}
Hey Human, Did the robot move forwards?
Submitting tool outputs: [{'tool_call_id': 'call_dY9OxPYjmn9WZI3Ebvu66iVA', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "color_sensor"
}
Querying documentation for: color_sensor
{'name': 'color_sensor', 'description': 'a class that allows access to spike prime color sensors', 'initialization': 'none', 'required imports': 'import color_sensor \n from hub import port', 'function': [{'name': 'color', 'syntax': 'color_sensor.color(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the color sensed by the color sensor', 'values': 'color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE'}}, {'name': 'reflection', 'syntax': 'color_sensor.reflection(port.A)', 'initialization': 'none', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the intensity of light sensed by the color sensor', 'values': 'integer 1:100'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_Qy5xSr0s0O9Sx8170dTsFjxG', 'output': '{"name": "color_sensor", "description": "a class that allows access to spike prime color sensors", "initialization": "none", "required imports": "import color_sensor \\n from hub import port", "function": [{"name": "color", "syntax": "color_sensor.color(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the color sensed by the color sensor", "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"}}, {"name": "reflection", "syntax": "color_sensor.reflection(port.A)", "initialization": "none", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the intensity of light sensed by the color sensor", "values": "integer 1:100"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import color_sensor \nfrom hub import port \nimport utime \nfor i in range(20): \n    print(color_sensor.color(port.C)) \n    utime.sleep(0.5)",
"runtime": "11"
}
================== RUNNING CODE (11 seconds) ==================
import color_sensor 
from hub import port 
import utime 
for i in range(20): 
   print(color_sensor.color(port.C)) 
   utime.sleep(0.5)
 - Status: 
MPY: sync filesystems
MPY: soft reboot

======================== SERIAL OUPUT =========================

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

=== 
import color_sensor 
=== 
from hub import port 
=== 
import utime 
=== 
for i in range(20): 
=== 
   print(color_sensor.color(port.C)) 
=== 
   utime.sleep(0.5)
=== 

-1
10
10
10
10
-1
9
9
9
9
9
-1
-1
-1
-1
-1
4
4
4
============================= END =============================

>>> 
>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ET0umL3SxYW5DkA43TJzbtXN', 'output': '\r\nMicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413\r\nType "help()" for more information.\r\n>>> \r\n>>> \r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== \r\n=== \n\r\n=== \nimport color_sensor \r\n=== \nfrom hub import port \r\n=== \nimport utime \r\n=== \nfor i in range(20): \r\n=== \n   print(color_sensor.color(port.C)) \r\n=== \n   utime.sleep(0.5)\r\n=== \n\n-1\n10\n10\n10\n10\n-1\n9\n9\n9\n9\n9\n-1\n-1\n-1\n-1\n-1\n4\n4\n4'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What are the color sensor readings?"
}
Hey Human, What are the color sensor readings?
Submitting tool outputs: [{'tool_call_id': 'call_YQZlwpWhR2j1pfH9VBpwLrfY', 'output': 'good'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "color_sensor"
}
Querying documentation for: color_sensor
{'name': 'color_sensor', 'description': 'a class that allows access to spike prime color sensors', 'initialization': 'none', 'required imports': 'import color_sensor \n from hub import port', 'function': [{'name': 'color', 'syntax': 'color_sensor.color(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the color sensed by the color sensor', 'values': 'color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE'}}, {'name': 'reflection', 'syntax': 'color_sensor.reflection(port.A)', 'initialization': 'none', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the intensity of light sensed by the color sensor', 'values': 'integer 1:100'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_3d04Rhrgk5LGxDxFzLLaTGGx', 'output': '{"name": "color_sensor", "description": "a class that allows access to spike prime color sensors", "initialization": "none", "required imports": "import color_sensor \\n from hub import port", "function": [{"name": "color", "syntax": "color_sensor.color(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the color sensed by the color sensor", "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"}}, {"name": "reflection", "syntax": "color_sensor.reflection(port.A)", "initialization": "none", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the intensity of light sensed by the color sensor", "values": "integer 1:100"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_NVkfi9kUwFHtrmrZ7rAw8Gpt', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \nfrom hub import port \nimport color_sensor \nimport utime \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \nwhile True: \n    if color_sensor.color(port.C) == color_sensor.color.BLUE: \n        motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) \n    else: \n        motor_pair.move_for_time(motor_pair.PAIR_1, 1000, -50, velocity=200) \n    utime.sleep(0.1)",
"runtime": "30"
}
================== RUNNING CODE (30 seconds) ==================
import motor_pair 
from hub import port 
import color_sensor 
import utime 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
   if color_sensor.color(port.C) == color_sensor.color.BLUE: 
       motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 
   else: 
       motor_pair.move_for_time(motor_pair.PAIR_1, 1000, -50, velocity=200) 
   utime.sleep(0.1)
 - Status: 
MPY: sync filesystems
MPY: soft reboot

======================== SERIAL OUPUT =========================

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

=== 
import motor_pair 
=== 
from hub import port 
=== 
import color_sensor 
=== 
import utime 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
while True: 
=== 
   if color_sensor.color(port.C) == color_sensor.color.BLUE: 
=== 
       motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200) 
=== 
   else: 
=== 
       motor_pair.move_for_time(motor_pair.PAIR_1, 1000, -50, velocity=200) 
=== 
   utime.sleep(0.1)
=== 

 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:23:17

 - Status: THREAD_ID: thread_8CK104RbzawFNFw5P0Fe0p4g
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:24:03

 - Status: THREAD_ID: thread_8j5fr3joEx5nO4RTBYXcBWRh
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which port is the color sensor connected to?"
}
Hey Human, Which port is the color sensor connected to?
Submitting tool outputs: [{'tool_call_id': 'call_2zbEtFyh811698DtJjzSvNnv', 'output': 'C'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "color_sensor"
}
Querying documentation for: color_sensor
{'name': 'color_sensor', 'description': 'a class that allows access to spike prime color sensors', 'initialization': 'none', 'required imports': 'import color_sensor \n from hub import port \n import color', 'function': [{'name': 'color', 'syntax': 'color_sensor.color(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the color sensed by the color sensor', 'values': 'color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE'}}, {'name': 'reflection', 'syntax': 'color_sensor.reflection(port.A)', 'initialization': 'none', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the intensity of light sensed by the color sensor', 'values': 'integer 1:100'}}], 'example': "if color_sensor.color(port.A) is color.RED:\r\nprint('Red detected')"}
Submitting tool outputs: [{'tool_call_id': 'call_fbynTPtsc548e7ncuDk12XLI', 'output': '{"name": "color_sensor", "description": "a class that allows access to spike prime color sensors", "initialization": "none", "required imports": "import color_sensor \\n from hub import port \\n import color", "function": [{"name": "color", "syntax": "color_sensor.color(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the color sensed by the color sensor", "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"}}, {"name": "reflection", "syntax": "color_sensor.reflection(port.A)", "initialization": "none", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the intensity of light sensed by the color sensor", "values": "integer 1:100"}}], "example": "if color_sensor.color(port.A) is color.RED:\\r\\nprint(\'Red detected\')"}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_r4KAi1khkvbYxlNUIWqPvoNr', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n import color_sensor \n from hub import port \n import color \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n if color_sensor.color(port.C) is color.BLUE: \n motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) \n else: \n motor_pair.move(motor_pair.PAIR_1, 100, velocity=200)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import motor_pair 
import color_sensor 
from hub import port 
import color 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
if color_sensor.color(port.C) is color.BLUE: 
motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
else: 
motor_pair.move(motor_pair.PAIR_1, 100, velocity=200)
 - Status: OK
MPY: sync filesystems
MPY: soft reboot
raw REPL; CTRL-B to exit
>
======================== SERIAL OUPUT =========================
 - Status: 
 - Status: OKTraceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_noBNeFKuUVuur4IsvEtwOa6Q', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot follow the blue line as expected?"
}
Hey Human, Did the robot follow the blue line as expected?
Submitting tool outputs: [{'tool_call_id': 'call_2sCbEm4giElSUkuhDs9OxcXL', 'output': 'code is wrong'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Could you please explain what the behavior of the robot was and how it differed from what you expected?"
}
Hey Human, Could you please explain what the behavior of the robot was and how it differed from what you expected?
Submitting tool outputs: [{'tool_call_id': 'call_JDC12Mm085Zelc7Wr1Qzcvrw', 'output': 'it did nothing, code has error'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)",
"runtime": "1"
}
================== RUNNING CODE (1 seconds) ===================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
 - Status: OK>
======================== SERIAL OUPUT =========================
 - Status: 
 - Status: OKTraceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_soDrucObh92D2jipqnJMMpqP', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import color_sensor \n from hub import port \n import color \n color_sensor.color(port.C)",
"runtime": "1"
}
================== RUNNING CODE (1 seconds) ===================
import color_sensor 
from hub import port 
import color 
color_sensor.color(port.C)
 - Status: OK>
======================== SERIAL OUPUT =========================
 - Status: 
 - Status: OKTraceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_KGuoNe8uxdQY2s5x9ANGO18V', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What was the error in the previous code?"
}
Hey Human, What was the error in the previous code?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:27:52

 - Status: THREAD_ID: thread_MDt08CPVdEHVrzDCe75ACU1V
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "color_sensor"
}
Querying documentation for: color_sensor
{'name': 'color_sensor', 'description': 'a class that allows access to spike prime color sensors', 'initialization': 'none', 'required imports': 'import color_sensor \n from hub import port \n import color', 'function': [{'name': 'color', 'syntax': 'color_sensor.color(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the color sensed by the color sensor', 'values': 'color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE'}}, {'name': 'reflection', 'syntax': 'color_sensor.reflection(port.A)', 'initialization': 'none', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the intensity of light sensed by the color sensor', 'values': 'integer 1:100'}}], 'example': "if color_sensor.color(port.A) is color.RED:\r\nprint('Red detected')"}
Submitting tool outputs: [{'tool_call_id': 'call_sUYkBgyDAIaL0sIw6nmmCqzK', 'output': '{"name": "color_sensor", "description": "a class that allows access to spike prime color sensors", "initialization": "none", "required imports": "import color_sensor \\n from hub import port \\n import color", "function": [{"name": "color", "syntax": "color_sensor.color(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the color sensed by the color sensor", "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"}}, {"name": "reflection", "syntax": "color_sensor.reflection(port.A)", "initialization": "none", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the intensity of light sensed by the color sensor", "values": "integer 1:100"}}], "example": "if color_sensor.color(port.A) is color.RED:\\r\\nprint(\'Red detected\')"}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_d8nf5rhxulYCfKY9eu4eiQq0', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import hub, color_sensor, motor_pair, color \n \
motor_pair.pair(motor_pair.PAIR_1, hub.port.A, hub.port.B) \n \
while True: \n \
    if color_sensor.color(hub.port.C) is color.BLUE: \n \
        motor_pair.move(motor_pair.PAIR_1, 0) \n \
    else: \n \
        motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "10"
}
 - Status: Error loading json, retyring
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:41:23

 - Status: THREAD_ID: thread_I1eDeW790uDUqAUTkuQc3VJn
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query":"motor_pair"
}
 - Status: Error loading json, retyring
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:41:52

 - Status: THREAD_ID: thread_yEwXvq3AC5vn5aVL34ehJLuX
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
 - Status: Error loading json, retyring
 - Status: openAIAlchemy.clean_json() takes 1 positional argument but 2 were given
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:46:26

 - Status: THREAD_ID: thread_KzEFvajSPX9oSDSTFKLeZkG2
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:47:03

 - Status: THREAD_ID: thread_8mc9jZlI8Y6L0VznH0hiBNY1
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "color_sensor"
}
Querying documentation for: color_sensor
{'name': 'color_sensor', 'description': 'a class that allows access to spike prime color sensors', 'initialization': 'none', 'required imports': 'import color_sensor \n from hub import port \n import color', 'function': [{'name': 'color', 'syntax': 'color_sensor.color(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the color sensed by the color sensor', 'values': 'color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE'}}, {'name': 'reflection', 'syntax': 'color_sensor.reflection(port.A)', 'initialization': 'none', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the intensity of light sensed by the color sensor', 'values': 'integer 1:100'}}], 'example': "if color_sensor.color(port.A) is color.RED:\r\nprint('Red detected')"}
Submitting tool outputs: [{'tool_call_id': 'call_RJaIuGGaKnV8gde6rzEipmLP', 'output': '{"name": "color_sensor", "description": "a class that allows access to spike prime color sensors", "initialization": "none", "required imports": "import color_sensor \\n from hub import port \\n import color", "function": [{"name": "color", "syntax": "color_sensor.color(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the color sensed by the color sensor", "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"}}, {"name": "reflection", "syntax": "color_sensor.reflection(port.A)", "initialization": "none", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the intensity of light sensed by the color sensor", "values": "integer 1:100"}}], "example": "if color_sensor.color(port.A) is color.RED:\\r\\nprint(\'Red detected\')"}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_ugpt93nFBRzulKHg1GdozNYe', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n import color \n import color_sensor \n \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n \t if color_sensor.color(port.C) is color.BLUE: \n \t \t motor_pair.move(motor_pair.PAIR_1, 0) \n \t else: \n \t \t motor_pair.stop(motor_pair.PAIR_1)",
  "runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import motor_pair 
from hub import port 
import color 
import color_sensor 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
	 if color_sensor.color(port.C) is color.BLUE: 
	 	 motor_pair.move(motor_pair.PAIR_1, 0) 
	 else: 
	 	 motor_pair.stop(motor_pair.PAIR_1)
 - Status: OK
MPY: sync filesystems
MPY: soft reboot
raw REPL; CTRL-B to exit
>
======================== SERIAL OUPUT =========================
 - Status: 
 - Status: OKTraceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Zn7Jggo7foI1wGJPKIPpY5rP', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Can you confirm if the robot followed the blue line?"
}
Hey Human, Can you confirm if the robot followed the blue line?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:49:03

 - Status: THREAD_ID: thread_pKiSEBoc8QXTMjn5KgEf5HLd
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "color_sensor"
}
Querying documentation for: color_sensor
{'name': 'color_sensor', 'description': 'a class that allows access to spike prime color sensors', 'initialization': 'none', 'required imports': 'import color_sensor \n from hub import port \n import color', 'function': [{'name': 'color', 'syntax': 'color_sensor.color(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the color sensed by the color sensor', 'values': 'color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE'}}, {'name': 'reflection', 'syntax': 'color_sensor.reflection(port.A)', 'initialization': 'none', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the intensity of light sensed by the color sensor', 'values': 'integer 1:100'}}], 'example': "if color_sensor.color(port.A) is color.RED:\r\nprint('Red detected')"}
Submitting tool outputs: [{'tool_call_id': 'call_ffBOgZNEToPbOdWAwy229Mos', 'output': '{"name": "color_sensor", "description": "a class that allows access to spike prime color sensors", "initialization": "none", "required imports": "import color_sensor \\n from hub import port \\n import color", "function": [{"name": "color", "syntax": "color_sensor.color(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the color sensed by the color sensor", "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"}}, {"name": "reflection", "syntax": "color_sensor.reflection(port.A)", "initialization": "none", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the intensity of light sensed by the color sensor", "values": "integer 1:100"}}], "example": "if color_sensor.color(port.A) is color.RED:\\r\\nprint(\'Red detected\')"}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_k9BemtmWEhn7XQXIEqO9QJAH', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import color \n import color_sensor \n \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move(motor_pair.PAIR_1, 0) \n while True: \n \t if color_sensor.color(port.C) is color.BLUE: \n \t \t motor_pair.move(motor_pair.PAIR_1, 0) \n \t else: \n \t \t motor_pair.move(motor_pair.PAIR_1, 50)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import motor_pair 
from hub import port 
import color 
import color_sensor 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move(motor_pair.PAIR_1, 0) 
while True: 
	 if color_sensor.color(port.C) is color.BLUE: 
	 	 motor_pair.move(motor_pair.PAIR_1, 0) 
	 else: 
	 	 motor_pair.move(motor_pair.PAIR_1, 50)
 - Status: OK
MPY: sync filesystems
MPY: soft reboot
raw REPL; CTRL-B to exit
>
 - Status: 
======================== SERIAL OUPUT =========================
 - Status: 
 - Status: OKTraceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ANgFpzGNtR1XAhAO0lDkGoIK', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot follow a blue line?"
}
Hey Human, Did the robot follow a blue line?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:50:04

 - Status: THREAD_ID: thread_AGjSeK2smDkuCSJF1cAoDsFu
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Are the motors in ports A and B geared in the same direction?"
}
Hey Human, Are the motors in ports A and B geared in the same direction?
Submitting tool outputs: [{'tool_call_id': 'call_ZAg6gcrkbfS77daGWs1b2RVV', 'output': 'y'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_2iHygmkPx1vnGJc3WMAoiodp', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \nfrom hub import port \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \nmotor_pair.move(motor_pair.PAIR_1, 0)", 
  "runtime": "3"
}
================== RUNNING CODE (3 seconds) ===================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move(motor_pair.PAIR_1, 0)

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move(motor_pair.PAIR_1, 0)
=== 


>>> 
>>> 
============================= END =============================

>>> 
>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Neh7nslWigk6v0Tf0FZx9JnR', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move(motor_pair.PAIR_1, 0)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_uePHAoGRGVWzd66J654bqpQS', 'output': 'yea'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:51:55

 - Status: THREAD_ID: thread_djlZ9k8wGF7Cnad1mePQDuwA
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "color_sensor"
}
Querying documentation for: color_sensor
{'name': 'color_sensor', 'description': 'a class that allows access to spike prime color sensors', 'initialization': 'none', 'required imports': 'import color_sensor \n from hub import port \n import color', 'function': [{'name': 'color', 'syntax': 'color_sensor.color(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the color sensed by the color sensor', 'values': 'color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE'}}, {'name': 'reflection', 'syntax': 'color_sensor.reflection(port.A)', 'initialization': 'none', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the intensity of light sensed by the color sensor', 'values': 'integer 1:100'}}], 'example': "if color_sensor.color(port.A) is color.RED:\r\nprint('Red detected')"}
Submitting tool outputs: [{'tool_call_id': 'call_Rfol2RtxwijBKlOU64OgYK2n', 'output': '{"name": "color_sensor", "description": "a class that allows access to spike prime color sensors", "initialization": "none", "required imports": "import color_sensor \\n from hub import port \\n import color", "function": [{"name": "color", "syntax": "color_sensor.color(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the color sensed by the color sensor", "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"}}, {"name": "reflection", "syntax": "color_sensor.reflection(port.A)", "initialization": "none", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the intensity of light sensed by the color sensor", "values": "integer 1:100"}}], "example": "if color_sensor.color(port.A) is color.RED:\\r\\nprint(\'Red detected\')"}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_nGF7StXI30I3v1WDqEH8yDW6', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import color_sensor \n from hub import port \n import color \n import motor_pair \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n if color_sensor.color(port.C) is color.BLUE: \n motor_pair.move(motor_pair.PAIR_1, 0, velocity=100) \n else: \n motor_pair.move(motor_pair.PAIR_1, -50, velocity=100)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import color_sensor 
from hub import port 
import color 
import motor_pair 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
if color_sensor.color(port.C) is color.BLUE: 
motor_pair.move(motor_pair.PAIR_1, 0, velocity=100) 
else: 
motor_pair.move(motor_pair.PAIR_1, -50, velocity=100)
 - Status: 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

======================== SERIAL OUPUT =========================

=== 
import color_sensor 
=== 
from hub import port 
=== 
import color 
=== 
import motor_pair 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
while True: 
=== 
if color_sensor.color(port.C) is color.BLUE: 
=== 
motor_pair.move(motor_pair.PAIR_1, 0, velocity=100) 
=== 
else: 
=== 
motor_pair.move(motor_pair.PAIR_1, -50, velocity=100)
=== 


Traceback (most recent call last):
  File "<stdin>", line 9
SyntaxError: invalid syntax
>>> 
>>> 
============================= END =============================

>>> 
>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_uXUoqIHDf7fGD2qWex6fLyLi', 'output': '\r\n=== \nimport color_sensor \r\n=== \nfrom hub import port \r\n=== \nimport color \r\n=== \nimport motor_pair \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nwhile True: \r\n=== \nif color_sensor.color(port.C) is color.BLUE: \r\n=== \nmotor_pair.move(motor_pair.PAIR_1, 0, velocity=100) \r\n=== \nelse: \r\n=== \nmotor_pair.move(motor_pair.PAIR_1, -50, velocity=100)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Does the robot move back on track when it is off a blue line and move straight when it is on a blue line?"
}
Hey Human, Does the robot move back on track when it is off a blue line and move straight when it is on a blue line?
Submitting tool outputs: [{'tool_call_id': 'call_aMjGl3pioEXoifdZmhvg8Ryk', 'output': 'try reformatting your indentation'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import color_sensor \n from hub import port \n import color \n import motor_pair \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n\t if color_sensor.color(port.C) is color.BLUE: \n\t\t motor_pair.move(motor_pair.PAIR_1, 0, velocity=100) \n\t else: \n\t\t motor_pair.move(motor_pair.PAIR_1, -50, velocity=100)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import color_sensor 
from hub import port 
import color 
import motor_pair 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
	 if color_sensor.color(port.C) is color.BLUE: 
		 motor_pair.move(motor_pair.PAIR_1, 0, velocity=100) 
	 else: 
		 motor_pair.move(motor_pair.PAIR_1, -50, velocity=100)
 - Status: 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

======================== SERIAL OUPUT =========================

=== 
import color_sensor 
=== 
from hub import port 
=== 
import color 
=== 
import motor_pair 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
while True: 
=== 
	 if color_sensor.color(port.C) is color.BLUE: 
=== 
		 motor_pair.move(motor_pair.PAIR_1, 0, velocity=100) 
=== 
	 else: 
=== 
		 motor_pair.move(motor_pair.PAIR_1, -50, velocity=100)
=== 

 - Status: 

============================= END =============================
Traceback (most recent call last):
  File "<stdin>", line 12, in <module>
KeyboardInterrupt: 
>>> 
>>> 
>>> 
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_cf8DJT2IvtaVz4QY7CazDevg', 'output': '\r\n=== \nimport color_sensor \r\n=== \nfrom hub import port \r\n=== \nimport color \r\n=== \nimport motor_pair \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nwhile True: \r\n=== \n\t if color_sensor.color(port.C) is color.BLUE: \r\n=== \n\t\t motor_pair.move(motor_pair.PAIR_1, 0, velocity=100) \r\n=== \n\t else: \r\n=== \n\t\t motor_pair.move(motor_pair.PAIR_1, -50, velocity=100)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Does the robot move back on track when it is off a blue line and move straight when it is on a blue line?"
}
Hey Human, Does the robot move back on track when it is off a blue line and move straight when it is on a blue line?
Submitting tool outputs: [{'tool_call_id': 'call_ioBsI99IJOmHdeo2v2jsEcUT', 'output': 'yes!! nice job'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 16:56:35

 - Status: THREAD_ID: thread_O0nZjdMJxPoxp1s4vgnv4s6u
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_WjCjbqeIqIx7pK4PDpua7nVH', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "color_sensor"
}
Querying documentation for: color_sensor
{'name': 'color_sensor', 'description': 'a class that allows access to spike prime color sensors', 'initialization': 'none', 'required imports': 'import color_sensor \n from hub import port \n import color', 'function': [{'name': 'color', 'syntax': 'color_sensor.color(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the color sensed by the color sensor', 'values': 'color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE'}}, {'name': 'reflection', 'syntax': 'color_sensor.reflection(port.A)', 'initialization': 'none', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the intensity of light sensed by the color sensor', 'values': 'integer 1:100'}}], 'example': "if color_sensor.color(port.A) is color.RED:\r\nprint('Red detected')"}
Submitting tool outputs: [{'tool_call_id': 'call_5BvKHUhWgpoRrkKPm1kY5pGV', 'output': '{"name": "color_sensor", "description": "a class that allows access to spike prime color sensors", "initialization": "none", "required imports": "import color_sensor \\n from hub import port \\n import color", "function": [{"name": "color", "syntax": "color_sensor.color(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the color sensed by the color sensor", "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"}}, {"name": "reflection", "syntax": "color_sensor.reflection(port.A)", "initialization": "none", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the intensity of light sensed by the color sensor", "values": "integer 1:100"}}], "example": "if color_sensor.color(port.A) is color.RED:\\r\\nprint(\'Red detected\')"}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair from hub import port import color import color_sensor \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n   if color_sensor.color(port.C) is color.BLUE: \n     motor_pair.move(motor_pair.PAIR_1, 0) \n   else: \n     motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import motor_pair from hub import port import color import color_sensor 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
  if color_sensor.color(port.C) is color.BLUE: 
    motor_pair.move(motor_pair.PAIR_1, 0) 
  else: 
    motor_pair.stop(motor_pair.PAIR_1)
 - Status: 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

======================== SERIAL OUPUT =========================

=== 
import motor_pair from hub import port import color import color_sensor 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
while True: 
=== 
  if color_sensor.color(port.C) is color.BLUE: 
=== 
    motor_pair.move(motor_pair.PAIR_1, 0) 
=== 
  else: 
=== 
    motor_pair.stop(motor_pair.PAIR_1)
=== 


Traceback (most recent call last):
  File "<stdin>", line 3
SyntaxError: invalid syntax
>>> 
>>> 
============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_t7eWJ6AgAigjGoBzhaR3wLTa', 'output': '\r\n=== \nimport motor_pair from hub import port import color import color_sensor \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nwhile True: \r\n=== \n  if color_sensor.color(port.C) is color.BLUE: \r\n=== \n    motor_pair.move(motor_pair.PAIR_1, 0) \r\n=== \n  else: \r\n=== \n    motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot start moving when it detected blue and stop when it didn't?"
}
Hey Human, Did the robot start moving when it detected blue and stop when it didn't?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:03:06

 - Status: THREAD_ID: thread_M1HL74kkSbhDtpk9AhUenjfI
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:03:17

 - Status: THREAD_ID: thread_WMLjEmQrRjT14R50azQOMQ2T
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "color_sensor"
}
Querying documentation for: color_sensor
{'name': 'color_sensor', 'description': 'a class that allows access to spike prime color sensors', 'initialization': 'none', 'required imports': 'import color_sensor \n from hub import port \n import color', 'function': [{'name': 'color', 'syntax': 'color_sensor.color(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the color sensed by the color sensor', 'values': 'color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE'}}, {'name': 'reflection', 'syntax': 'color_sensor.reflection(port.A)', 'initialization': 'none', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the intensity of light sensed by the color sensor', 'values': 'integer 1:100'}}], 'example': "if color_sensor.color(port.A) is color.RED:\r\nprint('Red detected')"}
Submitting tool outputs: [{'tool_call_id': 'call_9IdslkbumVBdB5XZuAL92DjV', 'output': '{"name": "color_sensor", "description": "a class that allows access to spike prime color sensors", "initialization": "none", "required imports": "import color_sensor \\n from hub import port \\n import color", "function": [{"name": "color", "syntax": "color_sensor.color(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the color sensed by the color sensor", "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"}}, {"name": "reflection", "syntax": "color_sensor.reflection(port.A)", "initialization": "none", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the intensity of light sensed by the color sensor", "values": "integer 1:100"}}], "example": "if color_sensor.color(port.A) is color.RED:\\r\\nprint(\'Red detected\')"}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_BoPwziYBQ0goAHeqx6OKnt36', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import color_sensor \n from hub import port \n import color \n import motor_pair \n \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n \n while True: \n     if color_sensor.color(port.C) == color.BLUE: \n         motor_pair.move(motor_pair.PAIR_1, 0) \n     else: \n         motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import color_sensor 
from hub import port 
import color 
import motor_pair 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

while True: 
    if color_sensor.color(port.C) == color.BLUE: 
        motor_pair.move(motor_pair.PAIR_1, 0) 
    else: 
        motor_pair.stop(motor_pair.PAIR_1)
RESETING
 - Status: 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import color_sensor 
=== 
from hub import port 
=== 
import color 
=== 
import motor_pair 
=== 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 

=== 
while True: 
=== 
    if color_sensor.color(port.C) == color.BLUE: 
=== 
        motor_pair.move(motor_pair.PAIR_1, 0) 
=== 
    else: 
=== 
        motor_pair.stop(motor_pair.PAIR_1)
=== 

============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_2MDpDTknT4rDo1RhFI2fI3Hn', 'output': '\r\n=== \nimport color_sensor \r\n=== \nfrom hub import port \r\n=== \nimport color \r\n=== \nimport motor_pair \r\n=== \n\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n\r\n=== \nwhile True: \r\n=== \n    if color_sensor.color(port.C) == color.BLUE: \r\n=== \n        motor_pair.move(motor_pair.PAIR_1, 0) \r\n=== \n    else: \r\n=== \n        motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the motors start running when the color sensor detected blue and stop when it didn't detect blue?"
}
Hey Human, Did the motors start running when the color sensor detected blue and stop when it didn't detect blue?
Submitting tool outputs: [{'tool_call_id': 'call_WdYaKA7HNeisxAaFUAi6oxwQ', 'output': 'NOONONONONONO, it only moves for a second when it sees blue'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import color_sensor \n from hub import port \n import color \n import motor_pair \n \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n \n while True: \n     if color_sensor.color(port.C) == color.BLUE: \n         motor_pair.move(motor_pair.PAIR_1, 0) \n     else: \n         motor_pair.move(motor_pair.PAIR_1, -20)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import color_sensor 
from hub import port 
import color 
import motor_pair 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

while True: 
    if color_sensor.color(port.C) == color.BLUE: 
        motor_pair.move(motor_pair.PAIR_1, 0) 
    else: 
        motor_pair.move(motor_pair.PAIR_1, -20)
RESETING
 - Status: 
Traceback (most recent call last):
  File "<stdin>", line 14, in <module>
KeyboardInterrupt: 
>>> 
>>> 
MPY: sync filesystems
MPY: soft reboot

RESETED
======================== SERIAL OUPUT =========================
 - Status: 
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_XlRfxvr2d7RpXeTVOjKGh1iT', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the motors start running when the color sensor detected blue and move slowly when it didn't detect blue?"
}
Hey Human, Did the motors start running when the color sensor detected blue and move slowly when it didn't detect blue?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:06:12

 - Status: THREAD_ID: thread_ENcb9yT1y0hg5DHKexAN9Yap
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "color_sensor"
}
Querying documentation for: color_sensor
{'name': 'color_sensor', 'description': 'a class that allows access to spike prime color sensors', 'initialization': 'none', 'required imports': 'import color_sensor \n from hub import port \n import color', 'function': [{'name': 'color', 'syntax': 'color_sensor.color(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the color sensed by the color sensor', 'values': 'color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE'}}, {'name': 'reflection', 'syntax': 'color_sensor.reflection(port.A)', 'initialization': 'none', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the intensity of light sensed by the color sensor', 'values': 'integer 1:100'}}], 'example': "if color_sensor.color(port.A) is color.RED:\r\nprint('Red detected')"}
Submitting tool outputs: [{'tool_call_id': 'call_YagIxjd3HAg6FrevgUqFm5Cw', 'output': '{"name": "color_sensor", "description": "a class that allows access to spike prime color sensors", "initialization": "none", "required imports": "import color_sensor \\n from hub import port \\n import color", "function": [{"name": "color", "syntax": "color_sensor.color(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the color sensed by the color sensor", "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"}}, {"name": "reflection", "syntax": "color_sensor.reflection(port.A)", "initialization": "none", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the intensity of light sensed by the color sensor", "values": "integer 1:100"}}], "example": "if color_sensor.color(port.A) is color.RED:\\r\\nprint(\'Red detected\')"}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{ "query": "motor_pair" }
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_SzfKFDj6lY2erfThoyeTISs8', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import color_sensor \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n  if color_sensor.color(port.C) is color.BLUE: \n   motor_pair.move(motor_pair.PAIR_1, 0) \n  else: \n   motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import color_sensor 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
 if color_sensor.color(port.C) is color.BLUE: 
  motor_pair.move(motor_pair.PAIR_1, 0) 
 else: 
  motor_pair.stop(motor_pair.PAIR_1)
RESETING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import color_sensor 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
while True: 
=== 
 if color_sensor.color(port.C) is color.BLUE: 
=== 
  motor_pair.move(motor_pair.PAIR_1, 0) 
=== 
 else: 
=== 
  motor_pair.stop(motor_pair.PAIR_1)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_uUDVYeNZPZ9HWEzBEdhgM8nH', 'output': '\r\n=== \nimport color_sensor \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nwhile True: \r\n=== \n if color_sensor.color(port.C) is color.BLUE: \r\n=== \n  motor_pair.move(motor_pair.PAIR_1, 0) \r\n=== \n else: \r\n=== \n  motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move when it detected the color blue and stop when it did not detect the color blue?"
}
Hey Human, Did the robot move when it detected the color blue and stop when it did not detect the color blue?
Submitting tool outputs: [{'tool_call_id': 'call_QPBmIrf3C1JUZyw4IotCEFZv', 'output': 'no, nothing happened'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_lJv7JDrVsT046Ptc6yFavAoC', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import color_sensor \n from hub import port \n import motor \n while True: \n  if color_sensor.color(port.C) is color.BLUE: \n   motor.run_for_degrees(port.A, 360, 75) \n   motor.run_for_degrees(port.B, 360, 75) \n  else: \n   motor.stop(port.A) \n   motor.stop(port.B)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import color_sensor 
from hub import port 
import motor 
while True: 
 if color_sensor.color(port.C) is color.BLUE: 
  motor.run_for_degrees(port.A, 360, 75) 
  motor.run_for_degrees(port.B, 360, 75) 
 else: 
  motor.stop(port.A) 
  motor.stop(port.B)
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import color_sensor 
=== 
from hub import port 
=== 
import motor 
=== 
while True: 
=== 
 if color_sensor.color(port.C) is color.BLUE: 
=== 
  motor.run_for_degrees(port.A, 360, 75) 
=== 
  motor.run_for_degrees(port.B, 360, 75) 
=== 
 else: 
=== 
  motor.stop(port.A) 
=== 
  motor.stop(port.B)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_6reN3nOga6o5NyQfrLP4tAJR', 'output': '\r\n=== \nimport color_sensor \r\n=== \nfrom hub import port \r\n=== \nimport motor \r\n=== \nwhile True: \r\n=== \n if color_sensor.color(port.C) is color.BLUE: \r\n=== \n  motor.run_for_degrees(port.A, 360, 75) \r\n=== \n  motor.run_for_degrees(port.B, 360, 75) \r\n=== \n else: \r\n=== \n  motor.stop(port.A) \r\n=== \n  motor.stop(port.B)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move when it detected the color blue and stop when it did not detect the color blue?"
}
Hey Human, Did the robot move when it detected the color blue and stop when it did not detect the color blue?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:07:31

 - Status: THREAD_ID: thread_gEFxWWMc9PHir5y1AAMQnyF2
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:07:44

 - Status: THREAD_ID: thread_W9LfXYE6IZ4lc93cdc9Li0wX
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_XErFu5B8PhW8Zp0wafcanoJp', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "color_sensor"
}
Querying documentation for: color_sensor
{'name': 'color_sensor', 'description': 'a class that allows access to spike prime color sensors', 'initialization': 'none', 'required imports': 'import color_sensor \n from hub import port \n import color', 'function': [{'name': 'color', 'syntax': 'color_sensor.color(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the color sensed by the color sensor', 'values': 'color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE'}}, {'name': 'reflection', 'syntax': 'color_sensor.reflection(port.A)', 'initialization': 'none', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the intensity of light sensed by the color sensor', 'values': 'integer 1:100'}}], 'example': "if color_sensor.color(port.A) is color.RED:\r\nprint('Red detected')"}
Submitting tool outputs: [{'tool_call_id': 'call_J45pN5UyHetES5Gam1UReDIl', 'output': '{"name": "color_sensor", "description": "a class that allows access to spike prime color sensors", "initialization": "none", "required imports": "import color_sensor \\n from hub import port \\n import color", "function": [{"name": "color", "syntax": "color_sensor.color(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the color sensed by the color sensor", "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"}}, {"name": "reflection", "syntax": "color_sensor.reflection(port.A)", "initialization": "none", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the intensity of light sensed by the color sensor", "values": "integer 1:100"}}], "example": "if color_sensor.color(port.A) is color.RED:\\r\\nprint(\'Red detected\')"}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import hub, utime, color_sensor, motor_pair, color\n\nmotor_pair.pair(motor_pair.PAIR_1, hub.port.A, hub.port.B)\nwhile True:\n    if color_sensor.color(hub.port.C) == color.BLUE:\n        motor_pair.stop(motor_pair.PAIR_1)\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 60)\n    utime.sleep(0.1)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import hub, utime, color_sensor, motor_pair, color

motor_pair.pair(motor_pair.PAIR_1, hub.port.A, hub.port.B)
while True:
   if color_sensor.color(hub.port.C) == color.BLUE:
       motor_pair.stop(motor_pair.PAIR_1)
   else:
       motor_pair.move(motor_pair.PAIR_1, 60)
   utime.sleep(0.1)
RESETING
 - Status: 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import hub, utime, color_sensor, motor_pair, color
=== 

=== 
motor_pair.pair(motor_pair.PAIR_1, hub.port.A, hub.port.B)
=== 
while True:
=== 
   if color_sensor.color(hub.port.C) == color.BLUE:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 
   else:
=== 
       motor_pair.move(motor_pair.PAIR_1, 60)
=== 
   utime.sleep(0.1)
=== 

============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_RRDctde5vx9JfDe7ktkE3SwX', 'output': '\r\n=== \nimport hub, utime, color_sensor, motor_pair, color\r\n=== \n\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, hub.port.A, hub.port.B)\r\n=== \nwhile True:\r\n=== \n   if color_sensor.color(hub.port.C) == color.BLUE:\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n   else:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 60)\r\n=== \n   utime.sleep(0.1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Is the robot following the blue line correctly?"
}
Hey Human, Is the robot following the blue line correctly?
Submitting tool outputs: [{'tool_call_id': 'call_EcnO5feRrjL5L45brxLZLDCP', 'output': "no, i isn't moving once it sees blue"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import hub, utime, color_sensor, motor_pair, color\n\nmotor_pair.pair(motor_pair.PAIR_1, hub.port.A, hub.port.B)\nwhile True:\n    if color_sensor.color(hub.port.C) != color.BLUE:\n        motor_pair.stop(motor_pair.PAIR_1)\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 60)\n    utime.sleep(0.1)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import hub, utime, color_sensor, motor_pair, color

motor_pair.pair(motor_pair.PAIR_1, hub.port.A, hub.port.B)
while True:
   if color_sensor.color(hub.port.C) != color.BLUE:
       motor_pair.stop(motor_pair.PAIR_1)
   else:
       motor_pair.move(motor_pair.PAIR_1, 60)
   utime.sleep(0.1)
RESETING
 - Status: 
Traceback (most recent call last):
  File "<stdin>", line 11, in <module>
KeyboardInterrupt: 
>>> 
>>> 
MPY: sync filesystems
MPY: soft reboot

RESETED
======================== SERIAL OUPUT =========================
 - Status: 
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_sDfzIsDckZROdDtLoUbwfSOr', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Is the robot following the blue line correctly now?"
}
Hey Human, Is the robot following the blue line correctly now?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:15:52

 - Status: THREAD_ID: thread_zO4azrdQGvF0UijpkPkmWrMn
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:19:34

 - Status: THREAD_ID: thread_wEtvqbyOXQS014M1k6nNzceP
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:19:56

 - Status: THREAD_ID: thread_e9vS888opsC97jgXGndQcwdv
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:20:59

 - Status: THREAD_ID: thread_7QOBUJOsh24EIJeXUf6kKxNx
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:23:24

 - Status: THREAD_ID: thread_FqYf5SQsfFwgFDROvLkjUrzA
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:23:47

 - Status: THREAD_ID: thread_fpLTV6xCPCDQaoXav0kzii6a
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:25:32

 - Status: THREAD_ID: thread_q0EhfRc3XOE6Mm81eVc4u6uT
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:26:36

 - Status: THREAD_ID: thread_Ad46CNNXX8tr1b00n9rld3Kv
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:28:01

 - Status: THREAD_ID: thread_YLccJbkPGWIqzISzisQvc3O6
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:29:05

 - Status: THREAD_ID: thread_gFr7PFTlYvhjzGTmkp1agEd9
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:29:42

 - Status: THREAD_ID: thread_ijSHAH3e9FTKq65zFudZHlON
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:29:59

 - Status: THREAD_ID: thread_VFUVtYdPYXyoHmJ6h2pYIHCd
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_gAgu96cR5CeFweyCx0LudM8c', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "force_sensor"
}
Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_TdPPBbv3ooxASXg0BuHrgxJ9', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import force_sensor \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0, velocity=100) \n     if force_sensor.pressed(port.F): \n         motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=-100) \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import motor_pair 
from hub import port 
import force_sensor 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=100) 
    if force_sensor.pressed(port.F): 
        motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=-100) 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
RESETING

>>> 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
import force_sensor 
=== 
while True: 
=== 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=100) 
=== 
    if force_sensor.pressed(port.F): 
=== 
        motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=-100) 
=== 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_XDsDjZepE13XzVnO7uJtFhyS', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport force_sensor \r\n=== \nwhile True: \r\n=== \n    motor_pair.move(motor_pair.PAIR_1, 0, velocity=100) \r\n=== \n    if force_sensor.pressed(port.F): \r\n=== \n        motor_pair.move_for_time(motor_pair.PAIR_1, 2000, 0, velocity=-100) \r\n=== \n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forwards until it hit something, back up, turn and then move forwards again"
}
Hey Human, Did the robot move forwards until it hit something, back up, turn and then move forwards again
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:32:04

 - Status: THREAD_ID: thread_ApDYCN2CHAT4nKUVHyKrpp8U
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_bRGq8JAbV5lRhRXcApTOhx9d', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "force_sensor"
}
Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_e8tCH5nseJ1rAHx1PMCLgggL', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import force_sensor \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move(motor_pair.PAIR_1, 1000) \n while True: \n     if force_sensor.pressed(port.F): \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, -360, 0, velocity=200) \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 100, velocity=200) \n motor_pair.move(motor_pair.PAIR_1, 1000)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import motor_pair 
from hub import port 
import force_sensor 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move(motor_pair.PAIR_1, 1000) 
while True: 
    if force_sensor.pressed(port.F): 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, -360, 0, velocity=200) 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 100, velocity=200) 
motor_pair.move(motor_pair.PAIR_1, 1000)
RESETING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
import force_sensor 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move(motor_pair.PAIR_1, 1000) 
=== 
while True: 
=== 
    if force_sensor.pressed(port.F): 
=== 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, -360, 0, velocity=200) 
=== 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 100, velocity=200) 
=== 
motor_pair.move(motor_pair.PAIR_1, 1000)
=== 

============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_4A8xVc9PeOvJdjHGeYjdcWnD', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport force_sensor \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move(motor_pair.PAIR_1, 1000) \r\n=== \nwhile True: \r\n=== \n    if force_sensor.pressed(port.F): \r\n=== \n        motor_pair.move_for_degrees(motor_pair.PAIR_1, -360, 0, velocity=200) \r\n=== \n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 100, velocity=200) \r\n=== \nmotor_pair.move(motor_pair.PAIR_1, 1000)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forwards indefinitely until it hit a wall and then did it back up, turn, and then move forwards again?"
}
Hey Human, Did the robot move forwards indefinitely until it hit a wall and then did it back up, turn, and then move forwards again?
Submitting tool outputs: [{'tool_call_id': 'call_274YDr8nHIYUEEgxKlekfH4r', 'output': 'run for longer'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import force_sensor \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move(motor_pair.PAIR_1, 1000) \n while True: \n     if force_sensor.pressed(port.F): \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, -360, 0, velocity=200) \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 100, velocity=200) \n motor_pair.move(motor_pair.PAIR_1, 1000)",
"runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import motor_pair 
from hub import port 
import force_sensor 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move(motor_pair.PAIR_1, 1000) 
while True: 
    if force_sensor.pressed(port.F): 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, -360, 0, velocity=200) 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 100, velocity=200) 
motor_pair.move(motor_pair.PAIR_1, 1000)
RESETING
 - Status: 
Traceback (most recent call last):
  File "<stdin>", line 9, in <module>
KeyboardInterrupt: 
>>> 
>>> 
MPY: sync filesystems
MPY: soft reboot

RESETED
======================== SERIAL OUPUT =========================
 - Status: 
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_w5y9YDYZ4XxOrDUy9uXK9Of2', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forwards indefinitely until it hit a wall and then did it back up, turn, and then move forwards again?"
}
Hey Human, Did the robot move forwards indefinitely until it hit a wall and then did it back up, turn, and then move forwards again?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:36:10

 - Status: THREAD_ID: thread_N5i0trWxICN2krEnq3oF3wNc
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor"
}
Querying documentation for: motor
{'name': 'motor', 'description': 'a class that allows access to spike prime motors', 'initialization': 'none', 'required imports': 'import motor \n from hub import port', 'function': {'name': 'Run motor for degrees', 'syntax': 'motor.run_for_degrees(port.B, 360, 75)', 'parameters': {'parameter': [{'name': 'Port', 'description': 'Port of spike prime to which motor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}, {'name': 'Degrees', 'description': 'Degrees for which the motor should turn.', 'values': 'any integer'}, {'name': 'Speed', 'description': 'Speed at which the motor should run in degrees per second.', 'values': 'any integer'}]}}}
Submitting tool outputs: [{'tool_call_id': 'call_XAxVgD8MDP5Q5NCneqvV7oaJ', 'output': '{"name": "motor", "description": "a class that allows access to spike prime motors", "initialization": "none", "required imports": "import motor \\n from hub import port", "function": {"name": "Run motor for degrees", "syntax": "motor.run_for_degrees(port.B, 360, 75)", "parameters": {"parameter": [{"name": "Port", "description": "Port of spike prime to which motor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}, {"name": "Degrees", "description": "Degrees for which the motor should turn.", "values": "any integer"}, {"name": "Speed", "description": "Speed at which the motor should run in degrees per second.", "values": "any integer"}]}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_MQBRJVknrBaQhxNGg5phXvKf', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "force_sensor"
}
Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_ipQI3LBlgn2dBi8KdyL9gEQZ', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import force_sensor \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) \n     if force_sensor.pressed(port.F): \n         motor_pair.stop(motor_pair.PAIR_1) \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200) \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, -100, velocity=200)",
"runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import motor_pair 
from hub import port 
import force_sensor 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
    if force_sensor.pressed(port.F): 
        motor_pair.stop(motor_pair.PAIR_1) 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200) 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, -100, velocity=200)
RESETING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
import force_sensor 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
while True: 
=== 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
=== 
    if force_sensor.pressed(port.F): 
=== 
        motor_pair.stop(motor_pair.PAIR_1) 
=== 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200) 
=== 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, -100, velocity=200)
=== 

============================= END =============================
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_7pYMRwYnJocs9rXr6JmzIJVe', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport force_sensor \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nwhile True: \r\n=== \n    motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) \r\n=== \n    if force_sensor.pressed(port.F): \r\n=== \n        motor_pair.stop(motor_pair.PAIR_1) \r\n=== \n        motor_pair.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200) \r\n=== \n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, -100, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward ? Did it stop and move back when the force sensor is pressed ?"
}
Hey Human, Did the robot move forward ? Did it stop and move back when the force sensor is pressed ?
Submitting tool outputs: [{'tool_call_id': 'call_7Mx6eNAgJAlTdju2YoamyAhZ', 'output': 'yes, but very slowly, try not having the motor stop'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import force_sensor \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) \n     if force_sensor.pressed(port.F): \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, -180, 0, velocity=200) \n         motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, -100, velocity=200)",
"runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import motor_pair 
from hub import port 
import force_sensor 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
    if force_sensor.pressed(port.F): 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, -180, 0, velocity=200) 
        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, -100, velocity=200)
RESETING
 - Status: <awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>
<awaitable>

Traceback (most recent call last):
  File "<stdin>", line 8, in <module>
KeyboardInterrupt: 
>>> 
>>> 
MPY: sync filesystems
MPY: soft reboot

RESETED
======================== SERIAL OUPUT =========================
 - Status: 
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_u3B5FbXMgyh3dVs0Av6Z2Ipe', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward ? Did it move back and turn when the force sensor is pressed ?"
}
Hey Human, Did the robot move forward ? Did it move back and turn when the force sensor is pressed ?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:40:30

 - Status: THREAD_ID: thread_rO5Mz1SumeWcFWkQiwGP8rKv
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Could you please confirm the ports? Are the motors connected to ports A and B and the distance sensor to port D?"
}
Hey Human, Could you please confirm the ports? Are the motors connected to ports A and B and the distance sensor to port D?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:41:13

 - Status: THREAD_ID: thread_iTVV3OkUwP4KodKNBOP1svJL
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_sM5RrN63DLP2tQVFzwYIyAvz', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "2"
}
================== RUNNING CODE (2 seconds) ===================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
RESETING

>>> 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_l3WDulAMfhl7I1aA8XkP6Wiy', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_DoRQMLp8OeXAXDydZ4zJubaC', 'output': 'ya'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_CT6CsO1XiLKVHRNvYcSOi597', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 100, velocity=200) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "8"
}
================== RUNNING CODE (8 seconds) ===================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200) 
motor_pair.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200) 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 100, velocity=200) 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200) 
=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200) 
=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 100, velocity=200) 
=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_a5Vclqyg5k4UaJpeAIy9spzN', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, -90, 0, velocity=200) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 100, velocity=200) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward, then backward, rotate 180 degrees, and then move forward again?"
}
Hey Human, Did the robot move forward, then backward, rotate 180 degrees, and then move forward again?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:43:26

 - Status: THREAD_ID: thread_y9TPhlhT6VmjS8TIGpffRBia
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_13A2i0vnVVnaqxpWYYOkwERD', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=-200)",
  "runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=-200)
RESETING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=-200)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_84bKGM4lylceih734PolnJXJ', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=-200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot move backwards?"
}
Hey Human, Did the robot move backwards?
Submitting tool outputs: [{'tool_call_id': 'call_5ySxhE6ocptLtW0IrwY0MxNQ', 'output': 'yeah! im so proud of you'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "sound"
}
Querying documentation for: sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_4AT8HAjT916BbN4oilFq3Nkz', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import sound \n sound.beep(freq=1000, duration=500, volume=100)",
  "runtime": "1"
}
================== RUNNING CODE (1 seconds) ===================
from hub import sound 
sound.beep(freq=1000, duration=500, volume=100)
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
from hub import sound 
=== 
sound.beep(freq=1000, duration=500, volume=100)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_VGWcDsJTO3UgfvIgWjJDpkuu', 'output': '\r\n=== \nfrom hub import sound \r\n=== \nsound.beep(freq=1000, duration=500, volume=100)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot make a beeping sound?"
}
Hey Human, Did the robot make a beeping sound?
Submitting tool outputs: [{'tool_call_id': 'call_z1KKXEA9tsqNlgUX9SSAbD6t', 'output': 'ya'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "light_matrix"
}
Querying documentation for: light_matrix
{'name': 'light_matrix', 'description': 'a class that enables control of built in SPIKE Prime led matrix', 'initialization': 'none', 'required imports': 'from hub import light_matrix', 'function': [{'name': 'clear', 'syntax': 'color_matrix.clear()', 'parameters': 'none', 'returns': 'none'}, {'name': 'set_pixel', 'syntax': 'light_matrix.set_pixel(2,2,100)', 'parameters': [{'name': 'x value', 'description': 'the x position of led on the matrix', 'values': 'integer 0:4'}, {'name': 'y value', 'description': 'the y position of led on the matrix', 'values': 'integer 0:4'}, {'name': 'brightness', 'description': 'the light intensity of the pixel', 'values': 'integer 1:100'}]}, {'name': 'show', 'syntax': 'light_matrix.show(list[int])', 'parameters': [{'name': 'pixel list', 'description': 'a list of length 25 corresponding to each pixel in the 5x5 led matrix', 'values': 'legnth 25 list of integers with values 1:100'}], 'example': '# Create a list with 25 identical intensity values \r\n pixels = [100] * 25 \r\n # Update all pixels to show same intensity \r\n light_matrix.show(pixels)'}, {'name': 'show_image', 'syntax': 'light_matrix.show_image(light_matrix.IMAGE_HAPPY)', 'parameters': [{'name': 'image id', 'description': 'The id of the image to show. The range of available images is 1 to 67. There are consts on the light_matrix module for these.', 'values': 'int 1:67'}], 'example': 'from hub import light_matrix\r\n# Show a small heart\r\nlight_matrix.show_image(2)'}, {'name': 'write', 'syntax': 'light_matrix.write(text: str, intensity: int = 100, time_per_character: int = 500)', 'parameters': [{'name': 'text', 'description': 'the text to display on the matrix', 'values': 'string'}, {'name': 'intensity', 'description': 'the brightness of the leds', 'values': 'integer 1:100'}, {'name': 'time per character', 'description': 'How long to show each character on the display in milliseconds', 'values': 'positive integer'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_qbJfnE6YOlig8CU6F2JVvd3A', 'output': '{"name": "light_matrix", "description": "a class that enables control of built in SPIKE Prime led matrix", "initialization": "none", "required imports": "from hub import light_matrix", "function": [{"name": "clear", "syntax": "color_matrix.clear()", "parameters": "none", "returns": "none"}, {"name": "set_pixel", "syntax": "light_matrix.set_pixel(2,2,100)", "parameters": [{"name": "x value", "description": "the x position of led on the matrix", "values": "integer 0:4"}, {"name": "y value", "description": "the y position of led on the matrix", "values": "integer 0:4"}, {"name": "brightness", "description": "the light intensity of the pixel", "values": "integer 1:100"}]}, {"name": "show", "syntax": "light_matrix.show(list[int])", "parameters": [{"name": "pixel list", "description": "a list of length 25 corresponding to each pixel in the 5x5 led matrix", "values": "legnth 25 list of integers with values 1:100"}], "example": "# Create a list with 25 identical intensity values \\r\\n pixels = [100] * 25 \\r\\n # Update all pixels to show same intensity \\r\\n light_matrix.show(pixels)"}, {"name": "show_image", "syntax": "light_matrix.show_image(light_matrix.IMAGE_HAPPY)", "parameters": [{"name": "image id", "description": "The id of the image to show. The range of available images is 1 to 67. There are consts on the light_matrix module for these.", "values": "int 1:67"}], "example": "from hub import light_matrix\\r\\n# Show a small heart\\r\\nlight_matrix.show_image(2)"}, {"name": "write", "syntax": "light_matrix.write(text: str, intensity: int = 100, time_per_character: int = 500)", "parameters": [{"name": "text", "description": "the text to display on the matrix", "values": "string"}, {"name": "intensity", "description": "the brightness of the leds", "values": "integer 1:100"}, {"name": "time per character", "description": "How long to show each character on the display in milliseconds", "values": "positive integer"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import light_matrix \n light_matrix.write(text='...', intensity=100, time_per_character=500)",
  "runtime": "2"
}
================== RUNNING CODE (2 seconds) ===================
from hub import light_matrix 
light_matrix.write(text='...', intensity=100, time_per_character=500)
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
from hub import light_matrix 
=== 
light_matrix.write(text='...', intensity=100, time_per_character=500)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_rimag5gpUAYj2O1mbI7zOqHI', 'output': "\r\n=== \nfrom hub import light_matrix \r\n=== \nlight_matrix.write(text='...', intensity=100, time_per_character=500)\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot display '...' on the light matrix?"
}
Hey Human, Did the robot display '...' on the light matrix?
Submitting tool outputs: [{'tool_call_id': 'call_WhVjc5vpfZMztbODlD11bHwX', 'output': 'no try again'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import light_matrix \n light_matrix.write(text=':(', intensity=100, time_per_character=500)",
  "runtime": "2"
}
================== RUNNING CODE (2 seconds) ===================
from hub import light_matrix 
light_matrix.write(text=':(', intensity=100, time_per_character=500)
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
from hub import light_matrix 
=== 
light_matrix.write(text=':(', intensity=100, time_per_character=500)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_zk8iPjJHLYzuk3SD7X0G0InE', 'output': "\r\n=== \nfrom hub import light_matrix \r\n=== \nlight_matrix.write(text=':(', intensity=100, time_per_character=500)\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot display a sad face on the light matrix?"
}
Hey Human, Did the robot display a sad face on the light matrix?
Submitting tool outputs: [{'tool_call_id': 'call_Yd6Z9oftJHLDl7AJvH298GKH', 'output': 'no, try with out the intensity and time per char params'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import light_matrix \n light_matrix.write(text=':(')",
  "runtime": "2"
}
================== RUNNING CODE (2 seconds) ===================
from hub import light_matrix 
light_matrix.write(text=':(')
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
from hub import light_matrix 
=== 
light_matrix.write(text=':(')
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Xm858QESgznZ3CgBi83JgaTp', 'output': "\r\n=== \nfrom hub import light_matrix \r\n=== \nlight_matrix.write(text=':(')\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot display a sad face on the light matrix?"
}
Hey Human, Did the robot display a sad face on the light matrix?
Submitting tool outputs: [{'tool_call_id': 'call_LE5z1NBD1rdyBgoxNTkQnLbH', 'output': 'no, try with out text='}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import light_matrix \n light_matrix.write(':(')",
  "runtime": "2"
}
================== RUNNING CODE (2 seconds) ===================
from hub import light_matrix 
light_matrix.write(':(')
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
from hub import light_matrix 
=== 
light_matrix.write(':(')
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_cgJ8XSmLIiIVdtC60TaQBJvq', 'output': "\r\n=== \nfrom hub import light_matrix \r\n=== \nlight_matrix.write(':(')\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot display a sad face on the light matrix?"
}
Hey Human, Did the robot display a sad face on the light matrix?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:51:32

 - Status: THREAD_ID: thread_KYlsXAMMGXADRFDRVPS1WxRl
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "sound"
}
Querying documentation for: sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_76DxJtZJN863hlMDSQ6f5o8E', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import sound \n sound.beep(freq=880, duration=500, volume=100) \n sound.beep(freq=440, duration=500, volume=100)",
  "runtime": "2"
}
================== RUNNING CODE (2 seconds) ===================
from hub import sound 
sound.beep(freq=880, duration=500, volume=100) 
sound.beep(freq=440, duration=500, volume=100)
RESETING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
from hub import sound 
=== 
sound.beep(freq=880, duration=500, volume=100) 
=== 
sound.beep(freq=440, duration=500, volume=100)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_zu8zKcQsTVcXSvLdsoXCDPn4', 'output': '\r\n=== \nfrom hub import sound \r\n=== \nsound.beep(freq=880, duration=500, volume=100) \r\n=== \nsound.beep(freq=440, duration=500, volume=100)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot make two beeping sounds of different frequencies?"
}
Hey Human, Did the robot make two beeping sounds of different frequencies?
Submitting tool outputs: [{'tool_call_id': 'call_qZWSuYDJuU6HXUzibeSlIlDE', 'output': 'ya'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "sound"
}
Querying documentation for: sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_uVDCtuMJKLpMMmV8UsdwZz30', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import sound \n sound.beep(freq=220, duration=1000, volume=100)",
  "runtime": "2"
}
================== RUNNING CODE (2 seconds) ===================
from hub import sound 
sound.beep(freq=220, duration=1000, volume=100)
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
from hub import sound 
=== 
sound.beep(freq=220, duration=1000, volume=100)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_5y7c180QVl6wLkI9Ati12oAm', 'output': '\r\n=== \nfrom hub import sound \r\n=== \nsound.beep(freq=220, duration=1000, volume=100)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot make a single and lower frequency beep sound?"
}
Hey Human, Did the robot make a single and lower frequency beep sound?
Submitting tool outputs: [{'tool_call_id': 'call_FCvloDiiejxPdttWXYRXDdKc', 'output': 'ya'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "light_matrix"
}
Querying documentation for: light_matrix
{'name': 'light_matrix', 'description': 'a class that enables control of built in SPIKE Prime led matrix', 'initialization': 'none', 'required imports': 'from hub import light_matrix', 'function': [{'name': 'clear', 'syntax': 'color_matrix.clear()', 'parameters': 'none', 'returns': 'none'}, {'name': 'set_pixel', 'syntax': 'light_matrix.set_pixel(2,2,100)', 'parameters': [{'name': 'x value', 'description': 'the x position of led on the matrix', 'values': 'integer 0:4'}, {'name': 'y value', 'description': 'the y position of led on the matrix', 'values': 'integer 0:4'}, {'name': 'brightness', 'description': 'the light intensity of the pixel', 'values': 'integer 1:100'}]}, {'name': 'show', 'syntax': 'light_matrix.show(list[int])', 'parameters': [{'name': 'pixel list', 'description': 'a list of length 25 corresponding to each pixel in the 5x5 led matrix', 'values': 'legnth 25 list of integers with values 1:100'}], 'example': '# Create a list with 25 identical intensity values \r\n pixels = [100] * 25 \r\n # Update all pixels to show same intensity \r\n light_matrix.show(pixels)'}, {'name': 'show_image', 'syntax': 'light_matrix.show_image(light_matrix.IMAGE_HAPPY)', 'parameters': [{'name': 'image id', 'description': 'The id of the image to show. The range of available images is 1 to 67. There are consts on the light_matrix module for these.', 'values': 'IMAGE_HEART = 1, IMAGE_HEART_SMALL = 2, IMAGE_HAPPY = 3, IMAGE_SMILE = 4, IMAGE_SAD = 5, IMAGE_CONFUSED = 6, IMAGE_ANGRY = 7, IMAGE_ASLEEP = 8, IMAGE_SURPRISED = 9, IMAGE_SILLY = 10, IMAGE_FABULOUS = 11, IMAGE_MEH = 12, IMAGE_YES = 13, IMAGE_NO = 14'}], 'example': 'from hub import light_matrix\r\n# Show a small heart\r\nlight_matrix.show_image(2)'}, {'name': 'write', 'syntax': 'light_matrix.write(text)', 'parameters': [{'name': 'text', 'description': 'the text to display on the matrix', 'values': 'string'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_mksFTuYPAQlH6bbmtTGQt8b7', 'output': '{"name": "light_matrix", "description": "a class that enables control of built in SPIKE Prime led matrix", "initialization": "none", "required imports": "from hub import light_matrix", "function": [{"name": "clear", "syntax": "color_matrix.clear()", "parameters": "none", "returns": "none"}, {"name": "set_pixel", "syntax": "light_matrix.set_pixel(2,2,100)", "parameters": [{"name": "x value", "description": "the x position of led on the matrix", "values": "integer 0:4"}, {"name": "y value", "description": "the y position of led on the matrix", "values": "integer 0:4"}, {"name": "brightness", "description": "the light intensity of the pixel", "values": "integer 1:100"}]}, {"name": "show", "syntax": "light_matrix.show(list[int])", "parameters": [{"name": "pixel list", "description": "a list of length 25 corresponding to each pixel in the 5x5 led matrix", "values": "legnth 25 list of integers with values 1:100"}], "example": "# Create a list with 25 identical intensity values \\r\\n pixels = [100] * 25 \\r\\n # Update all pixels to show same intensity \\r\\n light_matrix.show(pixels)"}, {"name": "show_image", "syntax": "light_matrix.show_image(light_matrix.IMAGE_HAPPY)", "parameters": [{"name": "image id", "description": "The id of the image to show. The range of available images is 1 to 67. There are consts on the light_matrix module for these.", "values": "IMAGE_HEART = 1, IMAGE_HEART_SMALL = 2, IMAGE_HAPPY = 3, IMAGE_SMILE = 4, IMAGE_SAD = 5, IMAGE_CONFUSED = 6, IMAGE_ANGRY = 7, IMAGE_ASLEEP = 8, IMAGE_SURPRISED = 9, IMAGE_SILLY = 10, IMAGE_FABULOUS = 11, IMAGE_MEH = 12, IMAGE_YES = 13, IMAGE_NO = 14"}], "example": "from hub import light_matrix\\r\\n# Show a small heart\\r\\nlight_matrix.show_image(2)"}, {"name": "write", "syntax": "light_matrix.write(text)", "parameters": [{"name": "text", "description": "the text to display on the matrix", "values": "string"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import light_matrix \n light_matrix.show_image(light_matrix.IMAGE_ANGRY)",
  "runtime": "2"
}
================== RUNNING CODE (2 seconds) ===================
from hub import light_matrix 
light_matrix.show_image(light_matrix.IMAGE_ANGRY)
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
from hub import light_matrix 
=== 
light_matrix.show_image(light_matrix.IMAGE_ANGRY)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ubLDXHeXFRBfHIkJec4EYAGS', 'output': '\r\n=== \nfrom hub import light_matrix \r\n=== \nlight_matrix.show_image(light_matrix.IMAGE_ANGRY)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot display an angry face on the LED matrix?"
}
Hey Human, Did the robot display an angry face on the LED matrix?
Submitting tool outputs: [{'tool_call_id': 'call_s7fvfhSVme9e4iPWNzpn31tG', 'output': 'ya'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-07 17:59:13

 - Status: THREAD_ID: thread_CuwS9BDW6cR7KI4jhLfHWQEy
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Which ports are the motors, and the force sensor connected to?" 
}
Hey Human, Which ports are the motors, and the force sensor connected to?
Submitting tool outputs: [{'tool_call_id': 'call_nCUJ7mHTuwwNrkJaVGg4tIoQ', 'output': 'a and b, the force sensor is in port F'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "force_sensor"
}
Querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_iAVSIOda0pWSn2qys30NXqq2', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_DTmmvwdfsdqdDb6BPPrhj5Fe', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n import force_sensor \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while not force_sensor.pressed(port.F): \n     motor_pair.move(motor_pair.PAIR_1, 0) \n motor_pair.stop(motor_pair.PAIR_1) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200)", 
  "runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import motor_pair 
from hub import port 
import force_sensor 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while not force_sensor.pressed(port.F): 
    motor_pair.move(motor_pair.PAIR_1, 0) 
motor_pair.stop(motor_pair.PAIR_1) 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200)
RESETING

>>> 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
import force_sensor 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
while not force_sensor.pressed(port.F): 
=== 
    motor_pair.move(motor_pair.PAIR_1, 0) 
=== 
motor_pair.stop(motor_pair.PAIR_1) 
=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_k4S5nagQmo6IO9C2sEf3G2VP', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport force_sensor \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nwhile not force_sensor.pressed(port.F): \r\n=== \n    motor_pair.move(motor_pair.PAIR_1, 0) \r\n=== \nmotor_pair.stop(motor_pair.PAIR_1) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot move forward until the force sensor was pressed, then stop and move backward?"
}
Hey Human, Did the robot move forward until the force sensor was pressed, then stop and move backward?
Submitting tool outputs: [{'tool_call_id': 'call_GCxd9MYHcL0JvKA6fhiCz9Za', 'output': 'no try using runloop'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "runloop"
}
Querying documentation for: runloop
{'name': 'runloop', 'description': 'The runloop module contains all functions and constants to use the Runloop.', 'initialization': 'none', 'required imports': 'import runloop', 'function': [{'name': 'run', 'description': 'Start any number of parallel async functions. This is the function you should use to create programs with a similar structure to Word Blocks.', 'syntax': 'runloop.run(some_async_function())', 'parameters': 'none', 'returns': 'none'}, {'name': 'sleep', 'description': 'Pause the execution of the application for any amount of milliseconds.', 'syntax': 'await runloop.sleep_ms(10000)', 'parameters': 'time in milliseconds', 'returns': 'none', 'example': "from hub import light_matrix\r\nimport runloop\r\nasync def main():\r\n    light_matrix.write('Hi!')\r\n    # Wait for ten seconds \r\n    await runloop.sleep_ms(10000)\r\n    light_matrix.write('Are you still here?')                \r\nrunloop.run(main())"}]}
Submitting tool outputs: [{'tool_call_id': 'call_iyf1uDnwyqGWZ7XHFWMr7Y92', 'output': '{"name": "runloop", "description": "The runloop module contains all functions and constants to use the Runloop.", "initialization": "none", "required imports": "import runloop", "function": [{"name": "run", "description": "Start any number of parallel async functions. This is the function you should use to create programs with a similar structure to Word Blocks.", "syntax": "runloop.run(some_async_function())", "parameters": "none", "returns": "none"}, {"name": "sleep", "description": "Pause the execution of the application for any amount of milliseconds.", "syntax": "await runloop.sleep_ms(10000)", "parameters": "time in milliseconds", "returns": "none", "example": "from hub import light_matrix\\r\\nimport runloop\\r\\nasync def main():\\r\\n    light_matrix.write(\'Hi!\')\\r\\n    # Wait for ten seconds \\r\\n    await runloop.sleep_ms(10000)\\r\\n    light_matrix.write(\'Are you still here?\')                \\r\\nrunloop.run(main())"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n import force_sensor \n import runloop \n \n def drive(): \n     motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n     while not force_sensor.pressed(port.F): \n         motor_pair.move(motor_pair.PAIR_1, 0) \n \n def stop_and_reverse(): \n     motor_pair.stop(motor_pair.PAIR_1) \n     motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200) \n \n runloop.run(drive()) \n runloop.run(stop_and_reverse())", 
  "runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import motor_pair 
from hub import port 
import force_sensor 
import runloop 

def drive(): 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
    while not force_sensor.pressed(port.F): 
        motor_pair.move(motor_pair.PAIR_1, 0) 

def stop_and_reverse(): 
    motor_pair.stop(motor_pair.PAIR_1) 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200) 

runloop.run(drive()) 
runloop.run(stop_and_reverse())
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
import force_sensor 
=== 
import runloop 
=== 

=== 
def drive(): 
=== 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
    while not force_sensor.pressed(port.F): 
=== 
        motor_pair.move(motor_pair.PAIR_1, 0) 
=== 

=== 
def stop_and_reverse(): 
=== 
    motor_pair.stop(motor_pair.PAIR_1) 
=== 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200) 
=== 

=== 
runloop.run(drive()) 
=== 
runloop.run(stop_and_reverse())
=== 

Traceback (most recent call last):
File "<stdin>", line 17, in <module>
TypeError: 'NoneType' object isn't an iterator
============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_cyZQ0VOl1XuOjW2nMH0vTuYg', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport force_sensor \r\n=== \nimport runloop \r\n=== \n\r\n=== \ndef drive(): \r\n=== \n    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n    while not force_sensor.pressed(port.F): \r\n=== \n        motor_pair.move(motor_pair.PAIR_1, 0) \r\n=== \n\r\n=== \ndef stop_and_reverse(): \r\n=== \n    motor_pair.stop(motor_pair.PAIR_1) \r\n=== \n    motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200) \r\n=== \n\r\n=== \nrunloop.run(drive()) \r\n=== \nrunloop.run(stop_and_reverse())\r\n=== \n\nTraceback (most recent call last):\nFile "<stdin>", line 17, in <module>\nTypeError: \'NoneType\' object isn\'t an iterator'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "There seems to be an error with the code, can you tell where the issue might be?"
}
Hey Human, There seems to be an error with the code, can you tell where the issue might be?
Submitting tool outputs: [{'tool_call_id': 'call_ajOQPkEDYEusEpS6GpB0SFMZ', 'output': 'drive has to be async'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n import force_sensor \n import runloop \n \n async def drive(): \n     motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n     while not force_sensor.pressed(port.F): \n         motor_pair.move(motor_pair.PAIR_1, 0) \n \n async def stop_and_reverse(): \n     motor_pair.stop(motor_pair.PAIR_1) \n     motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200) \n \n runloop.run(drive()) \n runloop.run(stop_and_reverse())", 
  "runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import motor_pair 
from hub import port 
import force_sensor 
import runloop 

async def drive(): 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
    while not force_sensor.pressed(port.F): 
        motor_pair.move(motor_pair.PAIR_1, 0) 

async def stop_and_reverse(): 
    motor_pair.stop(motor_pair.PAIR_1) 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200) 

runloop.run(drive()) 
runloop.run(stop_and_reverse())
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
import force_sensor 
=== 
import runloop 
=== 

=== 
async def drive(): 
=== 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
    while not force_sensor.pressed(port.F): 
=== 
        motor_pair.move(motor_pair.PAIR_1, 0) 
=== 

=== 
async def stop_and_reverse(): 
=== 
    motor_pair.stop(motor_pair.PAIR_1) 
=== 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200) 
=== 

=== 
runloop.run(drive()) 
=== 
runloop.run(stop_and_reverse())
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_hn9A4nIaDC8p4qPfTXdxGx30', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport force_sensor \r\n=== \nimport runloop \r\n=== \n\r\n=== \nasync def drive(): \r\n=== \n    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n    while not force_sensor.pressed(port.F): \r\n=== \n        motor_pair.move(motor_pair.PAIR_1, 0) \r\n=== \n\r\n=== \nasync def stop_and_reverse(): \r\n=== \n    motor_pair.stop(motor_pair.PAIR_1) \r\n=== \n    motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200) \r\n=== \n\r\n=== \nrunloop.run(drive()) \r\n=== \nrunloop.run(stop_and_reverse())\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot move forward until the force sensor was pressed, then stop and move backward?"
}
Hey Human, Did the robot move forward until the force sensor was pressed, then stop and move backward?
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-11 10:41:00

 - Status: THREAD_ID: thread_FvVDsCcNCQlWUcostZU19xbp
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which ports are the drive motors connected to?"
}
Hey Human, Which ports are the drive motors connected to?
Submitting tool outputs: [{'tool_call_id': 'call_PKLnytimfljcLH32xSRQ2CYw', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_Ose6xAQIdW3snyKzRMC3KaRG', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
RESETING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
MPY: sync filesystems
MPY: soft reboot


MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_D99x35iLTAvha1HPtytMrB3W', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_qNT6683d94NlvlWDw7daiCYw', 'output': 'yes but very briefly'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)",
"runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_jAi5sDVSy643A3i5LLbWAxTL', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward for a longer time?"
}
Hey Human, Did the robot move forward for a longer time?
Submitting tool outputs: [{'tool_call_id': 'call_zSGxFrc982G9QbEtrH8Qbh7h', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
Querying documentation for: distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_b7i34zw5ao4cMwXzV8ZeGnjS', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "runloop"
}
Querying documentation for: runloop
{'name': 'runloop', 'description': 'The runloop module contains all functions and constants to use the Runloop. To effectively use awaitable code with the flexibility to run commands either concurrently or sequentially, you must run your code in an asynchronous function using a run loop. The runloop module controls the run loop on the Hub, and lets you run asynchronous functions with its run() function. An asynchronous function, also known as a coroutine, is an awaitable that uses the async keyword before the function definition. The convention is to name the coroutine containing your main program main(). In the body of a coroutine, you can use the await keyword before calling an awaitable command. This pauses the coroutine until the command completes. Without the keyword, the program immediately continues to the next line of code in the coroutine. You can still use regular (not awaitable) code inside the coroutine. However, doing so will always pause or block the whole program until the command completes.', 'initialization': 'none', 'required imports': 'import runloop', 'function': [{'name': 'run', 'description': 'Start any number of parallel async functions. This is the function you should use to create programs with a similar structure to Word Blocks.', 'syntax': 'runloop.run(some_async_function())', 'parameters': 'none', 'returns': 'none', 'example': 'import runloop\r\nasync def main():\r\n    # Write your program here.\r\n        runloop.run(main())'}, {'name': 'sleep', 'description': 'Pause the execution of the application for any amount of milliseconds.', 'syntax': 'await runloop.sleep_ms(10000)', 'parameters': 'time in milliseconds', 'returns': 'none', 'example': "from hub import light_matrix\r\nimport runloop\r\nasync def main():\r\n    light_matrix.write('Hi!')\r\n    # Wait for ten seconds \r\n    await runloop.sleep_ms(10000)\r\n    light_matrix.write('Are you still here?')                \r\nrunloop.run(main())"}]}
Submitting tool outputs: [{'tool_call_id': 'call_PWetqsRnUPE7UpQkM6KWgR7S', 'output': '{"name": "runloop", "description": "The runloop module contains all functions and constants to use the Runloop. To effectively use awaitable code with the flexibility to run commands either concurrently or sequentially, you must run your code in an asynchronous function using a run loop. The runloop module controls the run loop on the Hub, and lets you run asynchronous functions with its run() function. An asynchronous function, also known as a coroutine, is an awaitable that uses the async keyword before the function definition. The convention is to name the coroutine containing your main program main(). In the body of a coroutine, you can use the await keyword before calling an awaitable command. This pauses the coroutine until the command completes. Without the keyword, the program immediately continues to the next line of code in the coroutine. You can still use regular (not awaitable) code inside the coroutine. However, doing so will always pause or block the whole program until the command completes.", "initialization": "none", "required imports": "import runloop", "function": [{"name": "run", "description": "Start any number of parallel async functions. This is the function you should use to create programs with a similar structure to Word Blocks.", "syntax": "runloop.run(some_async_function())", "parameters": "none", "returns": "none", "example": "import runloop\\r\\nasync def main():\\r\\n    # Write your program here.\\r\\n        runloop.run(main())"}, {"name": "sleep", "description": "Pause the execution of the application for any amount of milliseconds.", "syntax": "await runloop.sleep_ms(10000)", "parameters": "time in milliseconds", "returns": "none", "example": "from hub import light_matrix\\r\\nimport runloop\\r\\nasync def main():\\r\\n    light_matrix.write(\'Hi!\')\\r\\n    # Wait for ten seconds \\r\\n    await runloop.sleep_ms(10000)\\r\\n    light_matrix.write(\'Are you still here?\')                \\r\\nrunloop.run(main())"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import distance_sensor \n import runloop \n def main(): \n     motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n     target_distance = 100 \n     while True: \n         current_distance = distance_sensor.distance(port.D) \n         if current_distance < target_distance: \n             motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200) \n         if current_distance > target_distance: \n             motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=-200) \n runloop.run(main())",
"runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import motor_pair 
from hub import port 
import distance_sensor 
import runloop 
def main(): 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
    target_distance = 100 
    while True: 
        current_distance = distance_sensor.distance(port.D) 
        if current_distance < target_distance: 
            motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200) 
        if current_distance > target_distance: 
            motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=-200) 
runloop.run(main())
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
import distance_sensor 
=== 
import runloop 
=== 
def main(): 
=== 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
    target_distance = 100 
=== 
    while True: 
=== 
        current_distance = distance_sensor.distance(port.D) 
=== 
        if current_distance < target_distance: 
=== 
            motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200) 
=== 
        if current_distance > target_distance: 
=== 
            motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=-200) 
=== 
runloop.run(main())
=== 

============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_atRRHSmTyD7jI25i4EWDTB3F', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport distance_sensor \r\n=== \nimport runloop \r\n=== \ndef main(): \r\n=== \n    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n    target_distance = 100 \r\n=== \n    while True: \r\n=== \n        current_distance = distance_sensor.distance(port.D) \r\n=== \n        if current_distance < target_distance: \r\n=== \n            motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200) \r\n=== \n        if current_distance > target_distance: \r\n=== \n            motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=-200) \r\n=== \nrunloop.run(main())\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot maintain a constant distance to an object in front of it?"
}
Hey Human, Did the robot maintain a constant distance to an object in front of it?
Submitting tool outputs: [{'tool_call_id': 'call_GhvwAoOFTBUMZHSN23iAZqjf', 'output': 'no, the reaction time is far too delayed'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import distance_sensor \n import runloop \n def main(): \n     motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n     target_distance = 100 \n     while True: \n         current_distance = distance_sensor.distance(port.D) \n         if current_distance < target_distance: \n             motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) \n         if current_distance > target_distance: \n             motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200) \n runloop.run(main())",
"runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import motor_pair 
from hub import port 
import distance_sensor 
import runloop 
def main(): 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
    target_distance = 100 
    while True: 
        current_distance = distance_sensor.distance(port.D) 
        if current_distance < target_distance: 
            motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
        if current_distance > target_distance: 
            motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200) 
runloop.run(main())
RESETING
 - Status: 
Traceback (most recent call last):
  File "<stdin>", line 16, in <module>
  File "<stdin>", line 13, in main
KeyboardInterrupt: 
>>> 
>>> 
MPY: sync filesystems
MPY: soft reboot

RESETED
======================== SERIAL OUPUT =========================
 - Status: 
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_9USoZJt6nCIVpndz5mJy3edl', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot maintain a constant distance to an object in front of it?"
}
Hey Human, Did the robot maintain a constant distance to an object in front of it?
Submitting tool outputs: [{'tool_call_id': 'call_goTiRqU4KF4WKp8EGT464LRi', 'output': 'no the motors didnt move at all'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import distance_sensor \n import runloop \n def main(): \n     motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n     target_distance = 100 \n     while True: \n         current_distance = distance_sensor.distance(port.D) \n         if current_distance < target_distance: \n             motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) \n         elif current_distance > target_distance: \n             motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200) \n         else: \n             motor_pair.stop(motor_pair.PAIR_1) \n runloop.run(main())",
"runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import motor_pair 
from hub import port 
import distance_sensor 
import runloop 
def main(): 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
    target_distance = 100 
    while True: 
        current_distance = distance_sensor.distance(port.D) 
        if current_distance < target_distance: 
            motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
        elif current_distance > target_distance: 
            motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200) 
        else: 
            motor_pair.stop(motor_pair.PAIR_1) 
runloop.run(main())
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
import distance_sensor 
=== 
import runloop 
=== 
def main(): 
=== 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
    target_distance = 100 
=== 
    while True: 
=== 
        current_distance = distance_sensor.distance(port.D) 
=== 
        if current_distance < target_distance: 
=== 
            motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
=== 
        elif current_distance > target_distance: 
=== 
            motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200) 
=== 
        else: 
=== 
            motor_pair.stop(motor_pair.PAIR_1) 
=== 
runloop.run(main())
=== 

============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_6WRLcLsGmLjBYJBi8oHvXM0M', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport distance_sensor \r\n=== \nimport runloop \r\n=== \ndef main(): \r\n=== \n    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n    target_distance = 100 \r\n=== \n    while True: \r\n=== \n        current_distance = distance_sensor.distance(port.D) \r\n=== \n        if current_distance < target_distance: \r\n=== \n            motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) \r\n=== \n        elif current_distance > target_distance: \r\n=== \n            motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200) \r\n=== \n        else: \r\n=== \n            motor_pair.stop(motor_pair.PAIR_1) \r\n=== \nrunloop.run(main())\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot maintain a constant distance to an object in front of it?"
}
Hey Human, Did the robot maintain a constant distance to an object in front of it?
Submitting tool outputs: [{'tool_call_id': 'call_qDqdJz5ThZClzufDUey84ovi', 'output': 'almost, i think the drive directions are flipped'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import distance_sensor \n import runloop \n def main(): \n     motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n     target_distance = 100 \n     while True: \n         current_distance = distance_sensor.distance(port.D) \n         if current_distance < target_distance: \n             motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200) \n         elif current_distance > target_distance: \n             motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) \n         else: \n             motor_pair.stop(motor_pair.PAIR_1) \n runloop.run(main())",
"runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import motor_pair 
from hub import port 
import distance_sensor 
import runloop 
def main(): 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
    target_distance = 100 
    while True: 
        current_distance = distance_sensor.distance(port.D) 
        if current_distance < target_distance: 
            motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200) 
        elif current_distance > target_distance: 
            motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
        else: 
            motor_pair.stop(motor_pair.PAIR_1) 
runloop.run(main())
RESETING
 - Status: 
Traceback (most recent call last):
  File "<stdin>", line 18, in <module>
  File "<stdin>", line 13, in main
KeyboardInterrupt: 
>>> 
>>> 
MPY: sync filesystems
MPY: soft reboot

RESETED
======================== SERIAL OUPUT =========================
 - Status: 
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_zNhD1xH7vtqd2GsYuTI0GhlR', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot maintain a constant distance to an object in front of it?"
}
Hey Human, Did the robot maintain a constant distance to an object in front of it?
Submitting tool outputs: [{'tool_call_id': 'call_iCUvweYgH0XgOg6mFhKJjN6t', 'output': 'try running the same code again'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import distance_sensor \n import runloop \n def main(): \n     motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n     target_distance = 100 \n     while True: \n         current_distance = distance_sensor.distance(port.D) \n         if current_distance < target_distance: \n             motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200) \n         elif current_distance > target_distance: \n             motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) \n         else: \n             motor_pair.stop(motor_pair.PAIR_1) \n runloop.run(main())",
"runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import motor_pair 
from hub import port 
import distance_sensor 
import runloop 
def main(): 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
    target_distance = 100 
    while True: 
        current_distance = distance_sensor.distance(port.D) 
        if current_distance < target_distance: 
            motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200) 
        elif current_distance > target_distance: 
            motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
        else: 
            motor_pair.stop(motor_pair.PAIR_1) 
runloop.run(main())
RESETING
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
import distance_sensor 
=== 
import runloop 
=== 
def main(): 
=== 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
    target_distance = 100 
=== 
    while True: 
=== 
        current_distance = distance_sensor.distance(port.D) 
=== 
        if current_distance < target_distance: 
=== 
            motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200) 
=== 
        elif current_distance > target_distance: 
=== 
            motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
=== 
        else: 
=== 
            motor_pair.stop(motor_pair.PAIR_1) 
=== 
runloop.run(main())
=== 

============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ZxUXlK8bUaVMKuFsfWuVkbtC', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport distance_sensor \r\n=== \nimport runloop \r\n=== \ndef main(): \r\n=== \n    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n    target_distance = 100 \r\n=== \n    while True: \r\n=== \n        current_distance = distance_sensor.distance(port.D) \r\n=== \n        if current_distance < target_distance: \r\n=== \n            motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200) \r\n=== \n        elif current_distance > target_distance: \r\n=== \n            motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) \r\n=== \n        else: \r\n=== \n            motor_pair.stop(motor_pair.PAIR_1) \r\n=== \nrunloop.run(main())\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot maintain a constant distance to an object in front of it this time?"
}
Hey Human, Did the robot maintain a constant distance to an object in front of it this time?
Submitting tool outputs: [{'tool_call_id': 'call_yQLoDeNkENLzFK28dRcODvGn', 'output': 'yes! it worked perfectly'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-11 11:05:04

 - Status: THREAD_ID: thread_LJFNDPNH8MZigp2cK4MAc7Nr
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Which ports are the two motors connected to?"
}
Hey Human, Which ports are the two motors connected to?
Submitting tool outputs: [{'tool_call_id': 'call_rpBj7sZIwKZk7Gg1dVYJFFd8', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_zUKYTzSBsSyQnjSYzcKirUhk', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub, motor_pair \n motor_pair.pair(motor_pair.PAIR_1, hub.port.A, hub.port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0)",
  "runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import hub, motor_pair 
motor_pair.pair(motor_pair.PAIR_1, hub.port.A, hub.port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-11 11:06:55

 - Status: THREAD_ID: thread_9XdHR3kWJ7GtJ6d0yiucpeje
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-11 11:07:25

 - Status: THREAD_ID: thread_aIsSxReJH5HSfuK0JITCOOxZ
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Please provide the port numbers for the two motors that drive the robot"
}
Alchemist: Hey Human, Please provide the port numbers for the two motors that drive the robot
Submitting tool outputs: [{'tool_call_id': 'call_bUbDa44dD0ARNMVDQstxgCvZ', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
Alchemist: Querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_joZgK1mQXCiS2HOkXOIitXCX', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0)",
  "runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: 
 - Status: 
RESETTED
======================== SERIAL OUPUT =========================
 - Status: 
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_v8CftQmWdJ8mZxxHp5NZcX8Z', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot move forward continuously?"
}
Alchemist: Hey Human, Did the robot move forward continuously?
Submitting tool outputs: [{'tool_call_id': 'call_VrZ7rawq5Sqw65BQCjw20ykG', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 14:15:43

 - Status: THREAD_ID: thread_ntja737sAO9Dw3ZfacxNhGm5
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 14:16:39

 - Status: THREAD_ID: thread_VlhMg72HjGmFhYn4ryOID04t
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 14:17:32

 - Status: THREAD_ID: thread_dqvOZUJ4P6wKWk4bYybSZH3R
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which ports are the left and right motors plugged into?"
}
AIAlchemist: Hey Human, Which ports are the left and right motors plugged into?
Submitting tool outputs: [{'tool_call_id': 'call_kZXathKaZnmMhoQTeghTEFO6', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_Waz1PABrHsai3l0szqbrtLRV', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)",
"runtime": "2"
}
================== RUNNING CODE (2 seconds) ===================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)
RESETTING

>>> 
MPY: sync filesystems
MPY: soft reboot

 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETTED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_WhjeVmRIYBALSjsVPDYr9jCh', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
AIAlchemist: Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_oLBf60TRd0hPmEk4bKGvDnJy', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 14:19:34

 - Status: THREAD_ID: thread_2eFj2qhrX1ltOHaOL8K5Lsl5
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Which ports are the left and right motors plugged into?"
}
AIAlchemist: Hey Human, Which ports are the left and right motors plugged into?
Submitting tool outputs: [{'tool_call_id': 'call_PLmzLB1be2EHbQSuFeW1lchg', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
AIAlchemist: I am querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_SUYtILtpYA7uM2NlwN7O2KIP', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move(motor_pair.PAIR_1, 0)",
  "runtime": "5"
}
================== RUNNING CODE (5 seconds) ===================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
MPY: sync filesystems
MPY: soft reboot

 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETTED
======================== SERIAL OUPUT =========================

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move(motor_pair.PAIR_1, 0)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_2LoV6dkVHxc0ZSCDiTwTAwFk', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move(motor_pair.PAIR_1, 0)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot move forward?"
}
AIAlchemist: Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_JBwgxFi2slXFfLIBsRnL2zFW', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 14:21:46

 - Status: THREAD_ID: thread_hFBCdTiaSytpfa0D0eklgkP1
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which ports are the left and right motors connected to?"
}
AIAlchemist: Hey Human, Which ports are the left and right motors connected to?
Submitting tool outputs: [{'tool_call_id': 'call_bgDeO0g4hghasezbO2u6kCpv', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_qbv6vdPuDD1qJlyvXzooCe5y', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200)",
"runtime": "2"
}
================== RUNNING CODE (2 seconds) ===================
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
MPY: sync filesystems
MPY: soft reboot

 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETTED
======================== SERIAL OUPUT =========================

=== 
import motor_pair
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_I52KpdMpJt89mJWYIK1bwc55', 'output': '\r\n=== \nimport motor_pair\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 180, 0, velocity=-200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move backwards?"
}
AIAlchemist: Hey Human, Did the robot move backwards?
Submitting tool outputs: [{'tool_call_id': 'call_nwLdxaXelFqH8vTIDZTHQmTM', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which port is the force sensor connected to?"
}
AIAlchemist: Hey Human, Which port is the force sensor connected to?
Submitting tool outputs: [{'tool_call_id': 'call_N7qT5FKb1YnCRoJfGvCoWEI7', 'output': 'F'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "force_sensor"
}
AIAlchemist: I am querying documentation for: force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_pSf0nOFyc7KvEQZ2h79iOOHn', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import futures\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    if force_sensor.pressed(port.F):\n        motor_pair.stop(motor_pair.PAIR_1)\n        break\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import motor_pair
import force_sensor
from hub import futures
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   if force_sensor.pressed(port.F):
       motor_pair.stop(motor_pair.PAIR_1)
       break
   else:
       motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETTED
======================== SERIAL OUPUT =========================

=== 
import motor_pair
=== 
import force_sensor
=== 
from hub import futures
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
while True:
=== 
   if force_sensor.pressed(port.F):
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 
       break
=== 
   else:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_x0xxhaXli2ohJLf3ELmw8qxF', 'output': '\r\n=== \nimport motor_pair\r\n=== \nimport force_sensor\r\n=== \nfrom hub import futures\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \nwhile True:\r\n=== \n   if force_sensor.pressed(port.F):\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n       break\r\n=== \n   else:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward and stop when the force sensor was hit?"
}
AIAlchemist: Hey Human, Did the robot move forward and stop when the force sensor was hit?
Submitting tool outputs: [{'tool_call_id': 'call_hjnvhit0hiFHFDDucqbxjiR9', 'output': 'no nothing happened'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move(motor_pair.PAIR_1, 0)\nwhile not force_sensor.pressed(port.F):\n    pass\nmotor_pair.stop(motor_pair.PAIR_1)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import motor_pair
import force_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move(motor_pair.PAIR_1, 0)
while not force_sensor.pressed(port.F):
   pass
motor_pair.stop(motor_pair.PAIR_1)
RESETTING
 - Status: 
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETTED
======================== SERIAL OUPUT =========================

=== 
import motor_pair
=== 
import force_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
motor_pair.move(motor_pair.PAIR_1, 0)
=== 
while not force_sensor.pressed(port.F):
=== 
   pass
=== 
motor_pair.stop(motor_pair.PAIR_1)
=== 

============================= END =============================

MPY: sync filesystems
MPY: soft reboot

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_zYtrIG8qZPiiss5S8dgYOW7A', 'output': '\r\n=== \nimport motor_pair\r\n=== \nimport force_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \nmotor_pair.move(motor_pair.PAIR_1, 0)\r\n=== \nwhile not force_sensor.pressed(port.F):\r\n=== \n   pass\r\n=== \nmotor_pair.stop(motor_pair.PAIR_1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward and stop when the force sensor was hit?"
}
AIAlchemist: Hey Human, Did the robot move forward and stop when the force sensor was hit?
Submitting tool outputs: [{'tool_call_id': 'call_XiUWHmv6ht3vZR2TMFiUScua', 'output': 'yes it worked great'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    if force_sensor.pressed(port.F):\n        motor_pair.stop(motor_pair.PAIR_1)\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import motor_pair
import force_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   if force_sensor.pressed(port.F):
       motor_pair.stop(motor_pair.PAIR_1)
   else:
       motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETTED
======================== SERIAL OUPUT =========================

=== 
import motor_pair
=== 
import force_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
while True:
=== 
   if force_sensor.pressed(port.F):
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 
   else:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0)
=== 

============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_hgPKyWvGMDXzkyo20T6LVLE5', 'output': '\r\n=== \nimport motor_pair\r\n=== \nimport force_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \nwhile True:\r\n=== \n   if force_sensor.pressed(port.F):\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n   else:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot continue to move forward after the force sensor was released?"
}
AIAlchemist: Hey Human, Did the robot continue to move forward after the force sensor was released?
Submitting tool outputs: [{'tool_call_id': 'call_8XLViQLxetTa0Efac6YR6E7b', 'output': 'yes it worked great'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Does the robot's design permit it to turn its wheels simultaneously in different directions for steering?"
}
AIAlchemist: Hey Human, Does the robot's design permit it to turn its wheels simultaneously in different directions for steering?
Submitting tool outputs: [{'tool_call_id': 'call_MkuP0zb1zHVKkk3k4jLIJKo7', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    if force_sensor.pressed(port.F):\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, -100, velocity=200)\n        force_sensor.pressed(port.F) == False\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import motor_pair
import force_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   if force_sensor.pressed(port.F):
       motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, -100, velocity=200)
       force_sensor.pressed(port.F) == False
   else:
       motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: 
Traceback (most recent call last):
  File "<stdin>", line 11, in <module>
KeyboardInterrupt: 
>>> 
>>> 
MPY: sync filesystems
MPY: soft reboot

RESETTED
======================== SERIAL OUPUT =========================
 - Status: 
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_q2KDEm0JcMCcjE9C5Qk1ynHc', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot manage to maneuver around the pole after hitting the force sensor and then continue moving forward?"
}
AIAlchemist: Hey Human, Did the robot manage to maneuver around the pole after hitting the force sensor and then continue moving forward?
Submitting tool outputs: [{'tool_call_id': 'call_YZIIAKC8Yh1kChCb79PvHTNP', 'output': 'no nothing happened'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    if force_sensor.pressed(port.F):\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, -100, velocity=-200)\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "10"
}
================== RUNNING CODE (10 seconds) ==================
import motor_pair
import force_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   if force_sensor.pressed(port.F):
       motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, -100, velocity=-200)
   else:
       motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETTED
======================== SERIAL OUPUT =========================

=== 
import motor_pair
=== 
import force_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
while True:
=== 
   if force_sensor.pressed(port.F):
=== 
       motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, -100, velocity=-200)
=== 
   else:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0)
=== 

<awaitab
le>
<aw
aitable>
<await
able>
<
awaitable>
<awaitabl
e>
<awa
============================= END =============================
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_7UY84T0NtZ3LO6E5s31FcMsg', 'output': '\r\n=== \nimport motor_pair\r\n=== \nimport force_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \nwhile True:\r\n=== \n   if force_sensor.pressed(port.F):\r\n=== \n       motor_pair.move_for_degrees(motor_pair.PAIR_1, 180, -100, velocity=-200)\r\n=== \n   else:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0)\r\n=== \n\n<awaitab\nle>\n<aw\naitable>\n<await\nable>\n<\nawaitable>\n<awaitabl\ne>\n<awa'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot manage to steer around the pole after hitting the force sensor and then continue moving forward?"
}
AIAlchemist: Hey Human, Did the robot manage to steer around the pole after hitting the force sensor and then continue moving forward?
Submitting tool outputs: [{'tool_call_id': 'call_aHgjXJA7J0nXjwnV8mw7FJtK', 'output': 'yes it worked great'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    if force_sensor.pressed(port.F):\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, -100, velocity=-200)\n        force_sensor.pressed(port.F) == False\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "20"
}
================== RUNNING CODE (20 seconds) ==================
import motor_pair
import force_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   if force_sensor.pressed(port.F):
       motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, -100, velocity=-200)
       force_sensor.pressed(port.F) == False
   else:
       motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
RESETTED
======================== SERIAL OUPUT =========================
<awaitab
le>
<aw
aitable>
<await
able>
<
awaitable>
<awaitabl
e>
<awa
itable>
<awaita
ble>
<a
waitable>
<awaitable
>
<awai
table>
============================= END =============================
 - Status: Program ended
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot manage to steer around the wide pole after hitting the force sensor and then continue moving forward?"
}
AIAlchemist: Hey Human, Did the robot manage to steer around the wide pole after hitting the force sensor and then continue moving forward?
Submitting tool outputs: [{'tool_call_id': 'call_5mES8zryPFBOGVNjA881F7a8', 'output': 'no nothing happened'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nforce_hit = False\nwhile True:\n    if force_sensor.pressed(port.F) and not force_hit:\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, -100, velocity=-200)\n        force_hit = True\n    elif not force_sensor.pressed(port.F) and force_hit:\n        force_hit = False\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "30"
}
================== RUNNING CODE (30 seconds) ==================
import motor_pair
import force_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
force_hit = False
while True:
   if force_sensor.pressed(port.F) and not force_hit:
       motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, -100, velocity=-200)
       force_hit = True
   elif not force_sensor.pressed(port.F) and force_hit:
       force_hit = False
   else:
       motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
RESETTED
======================== SERIAL OUPUT =========================
============================= END =============================
 - Status: Program ended
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot manage to steer around the wide pole after hitting the force sensor and then continue moving forward?"
}
AIAlchemist: Hey Human, Did the robot manage to steer around the wide pole after hitting the force sensor and then continue moving forward?
Submitting tool outputs: [{'tool_call_id': 'call_tKxMo4jUBnMKy9JZ3u9I2nuN', 'output': 'no, when it hits the pole it just keeps on moving forward'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nforce_hit = False\nwhile True:\n    if force_sensor.pressed(port.F):\n        motor_pair.stop(motor_pair.PAIR_1)\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)\n        force_hit = True\n    elif not force_sensor.pressed(port.F) and force_hit:\n        force_hit = False\n        motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "1"
}
================== RUNNING CODE (1 seconds) ===================
import motor_pair
import force_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
force_hit = False
while True:
   if force_sensor.pressed(port.F):
       motor_pair.stop(motor_pair.PAIR_1)
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)
       force_hit = True
   elif not force_sensor.pressed(port.F) and force_hit:
       force_hit = False
       motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
Traceback (most recent call last):
  File "<stdin>", line 15, in <module>
KeyboardInterrupt: 
>>> 
>>> 
MPY: sync filesystems
MPY: soft reboot

RESETTED
======================== SERIAL OUPUT =========================
 - Status: 
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_JWleb7UcI1P4hVogrDxqKQg9', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot manage to steer around the wide pole after hitting the force sensor and then continue moving forward?"
}
AIAlchemist: Hey Human, Did the robot manage to steer around the wide pole after hitting the force sensor and then continue moving forward?
Submitting tool outputs: [{'tool_call_id': 'call_wVauY774f4xDs4mdQn5RWNLB', 'output': 'nothing happened'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nforce_hit = False\nwhile True:\n    if force_sensor.pressed(port.F):\n        motor_pair.stop(motor_pair.PAIR_1)\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)\n        while force_sensor.pressed(port.F):\n            pass\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "30"
}
================== RUNNING CODE (30 seconds) ==================
import motor_pair
import force_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
force_hit = False
while True:
   if force_sensor.pressed(port.F):
       motor_pair.stop(motor_pair.PAIR_1)
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)
       while force_sensor.pressed(port.F):
           pass
   else:
       motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETTED
======================== SERIAL OUPUT =========================

=== 
import motor_pair
=== 
import force_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
force_hit = False
=== 
while True:
=== 
   if force_sensor.pressed(port.F):
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)
=== 
       while force_sensor.pressed(port.F):
=== 
           pass
=== 
   else:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0)
=== 

============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_QHeCXVzDByU4COSQ1wFrBzrH', 'output': '\r\n=== \nimport motor_pair\r\n=== \nimport force_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \nforce_hit = False\r\n=== \nwhile True:\r\n=== \n   if force_sensor.pressed(port.F):\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n       motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)\r\n=== \n       while force_sensor.pressed(port.F):\r\n=== \n           pass\r\n=== \n   else:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot manage to steer around the wide pole after hitting the force sensor and then continue moving forward?"
}
AIAlchemist: Hey Human, Did the robot manage to steer around the wide pole after hitting the force sensor and then continue moving forward?
Submitting tool outputs: [{'tool_call_id': 'call_Ud9aSUW6j1wo1wGWikZwNe9S', 'output': 'try making it go backwards before turning'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nforce_hit = False\nwhile True:\n    if force_sensor.pressed(port.F):\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, -100, -100, velocity=-200)\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)\n        while force_sensor.pressed(port.F):\n            pass\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "30"
}
================== RUNNING CODE (30 seconds) ==================
import motor_pair
import force_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
force_hit = False
while True:
   if force_sensor.pressed(port.F):
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -100, -100, velocity=-200)
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)
       while force_sensor.pressed(port.F):
           pass
   else:
       motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
Traceback (most recent call last):
  File "<stdin>", line 9, in <module>
KeyboardInterrupt: 
>>> 
>>> 
MPY: sync filesystems
MPY: soft reboot

RESETTED
======================== SERIAL OUPUT =========================
 - Status: 
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_oCp0pup6LdQqK905WDgLubCz', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot manage to steer around the wide pole after backing up, turning, and then continuing forward?"
}
AIAlchemist: Hey Human, Did the robot manage to steer around the wide pole after backing up, turning, and then continuing forward?
Submitting tool outputs: [{'tool_call_id': 'call_KCO1y5xVsSVYaMV1t0zzvMc0', 'output': 'nothing happened'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nforce_hit = False\nwhile True:\n    if force_sensor.pressed(port.F):\n        motor_pair.stop(motor_pair.PAIR_1)\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, -100, 0, velocity=-200)\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)\n        while force_sensor.pressed(port.F):\n            pass\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "30"
}
================== RUNNING CODE (30 seconds) ==================
import motor_pair
import force_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
force_hit = False
while True:
   if force_sensor.pressed(port.F):
       motor_pair.stop(motor_pair.PAIR_1)
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -100, 0, velocity=-200)
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)
       while force_sensor.pressed(port.F):
           pass
   else:
       motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETTED
======================== SERIAL OUPUT =========================

=== 
import motor_pair
=== 
import force_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
force_hit = False
=== 
while True:
=== 
   if force_sensor.pressed(port.F):
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -100, 0, velocity=-200)
=== 
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)
=== 
       while force_sensor.pressed(port.F):
=== 
           pass
=== 
   else:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0)
=== 

============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_axxHyEf7YBSEtrjApfduCGg1', 'output': '\r\n=== \nimport motor_pair\r\n=== \nimport force_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \nforce_hit = False\r\n=== \nwhile True:\r\n=== \n   if force_sensor.pressed(port.F):\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n       motor_pair.move_for_degrees(motor_pair.PAIR_1, -100, 0, velocity=-200)\r\n=== \n       motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)\r\n=== \n       while force_sensor.pressed(port.F):\r\n=== \n           pass\r\n=== \n   else:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot manage to steer around the wide pole after backing up, turning, and then continuing forward?"
}
AIAlchemist: Hey Human, Did the robot manage to steer around the wide pole after backing up, turning, and then continuing forward?
Submitting tool outputs: [{'tool_call_id': 'call_3MGHh1VRJ6gxM5KufwWO6ba0', 'output': 'you need to go backwards for longer before turning'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nforce_hit = False\nwhile True:\n    if force_sensor.pressed(port.F):\n        motor_pair.stop(motor_pair.PAIR_1)\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, -500, 0, velocity=-200)\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)\n        while force_sensor.pressed(port.F):\n            pass\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "30"
}
================== RUNNING CODE (30 seconds) ==================
import motor_pair
import force_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
force_hit = False
while True:
   if force_sensor.pressed(port.F):
       motor_pair.stop(motor_pair.PAIR_1)
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -500, 0, velocity=-200)
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)
       while force_sensor.pressed(port.F):
           pass
   else:
       motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
RESETTED
======================== SERIAL OUPUT =========================
 - Status: 
============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_csqCBg48jo37Zb6v5cPBlSUH', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot manage to steer around the wide pole after backing up for a longer distance, turning, and then continuing forward?"
}
AIAlchemist: Hey Human, Did the robot manage to steer around the wide pole after backing up for a longer distance, turning, and then continuing forward?
Submitting tool outputs: [{'tool_call_id': 'call_6Qn0yfBPXwReoGpiqzZkuEYF', 'output': 'nothing happened try again'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nimport force_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nforce_hit = False\nwhile True:\n    if force_sensor.pressed(port.F):\n        motor_pair.stop(motor_pair.PAIR_1)\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, -500, 0, velocity=-200)\n        motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)\n        while force_sensor.pressed(port.F):\n            pass\n    else:\n        motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "30"
}
================== RUNNING CODE (30 seconds) ==================
import motor_pair
import force_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
force_hit = False
while True:
   if force_sensor.pressed(port.F):
       motor_pair.stop(motor_pair.PAIR_1)
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -500, 0, velocity=-200)
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)
       while force_sensor.pressed(port.F):
           pass
   else:
       motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: 

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

RESETTED
======================== SERIAL OUPUT =========================

=== 
import motor_pair
=== 
import force_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
force_hit = False
=== 
while True:
=== 
   if force_sensor.pressed(port.F):
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -500, 0, velocity=-200)
=== 
       motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)
=== 
       while force_sensor.pressed(port.F):
=== 
           pass
=== 
   else:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0)
=== 

============================= END =============================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_UiQPMujlh974nc7h1cBTwoKO', 'output': '\r\n=== \nimport motor_pair\r\n=== \nimport force_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \nforce_hit = False\r\n=== \nwhile True:\r\n=== \n   if force_sensor.pressed(port.F):\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n       motor_pair.move_for_degrees(motor_pair.PAIR_1, -500, 0, velocity=-200)\r\n=== \n       motor_pair.move_for_degrees(motor_pair.PAIR_1, -720, -100, velocity=200)\r\n=== \n       while force_sensor.pressed(port.F):\r\n=== \n           pass\r\n=== \n   else:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot manage to steer around the wide pole after backing up for a longer distance, turning, and then continuing forward?"
}
AIAlchemist: Hey Human, Did the robot manage to steer around the wide pole after backing up for a longer distance, turning, and then continuing forward?
Submitting tool outputs: [{'tool_call_id': 'call_xFiDNJmODDhTtc7gT5kREqk6', 'output': 'yes great job'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 14:45:40

 - Status: THREAD_ID: thread_WSAu7iB8swvHrpkBjvJNdSjU
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which ports are the two motors connected to?"
}
AIAlchemist: Hey Human, Which ports are the two motors connected to?
Submitting tool outputs: [{'tool_call_id': 'call_nd1JNJencywIHlV4BGAXDm3f', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'awaitable': 'yes, query async and runloop', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'awaitable': 'yes, query async and runloop', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'awaitable': 'yes, query async and runloop', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'awaitable': 'yes, query async and runloop', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'awaitable': 'yes, query async and runloop', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_PckRJYLkXg1IPPfwtR77LaJ9', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "awaitable": "yes, query async and runloop", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "awaitable": "yes, query async and runloop", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "awaitable": "yes, query async and runloop", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "awaitable": "yes, query async and runloop", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "awaitable": "yes, query async and runloop", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "runloop"
}
AIAlchemist: I am querying documentation for: runloop
{'name': 'runloop', 'description': 'The runloop module contains all functions and constants to use the Runloop. To effectively use awaitable code with the flexibility to run commands either concurrently or sequentially, you must run your code in an asynchronous function using a run loop. The runloop module controls the run loop on the Hub, and lets you run asynchronous functions with its run() function. An asynchronous function, also known as a coroutine, is an awaitable that uses the async keyword before the function definition. The convention is to name the coroutine containing your main program main(). In the body of a coroutine, you can use the await keyword before calling an awaitable command. This pauses the coroutine until the command completes. Without the keyword, the program immediately continues to the next line of code in the coroutine. You can still use regular (not awaitable) code inside the coroutine. However, doing so will always pause or block the whole program until the command completes.', 'initialization': 'none', 'required imports': 'import runloop', 'function': [{'name': 'run', 'description': 'Start any number of parallel async functions. This is the function you should use to create programs with a similar structure to Word Blocks.', 'syntax': 'runloop.run(some_async_function())', 'parameters': 'none', 'returns': 'none', 'example': 'import runloop\r\nasync def main():\r\n    # Write your program here.\r\n        runloop.run(main())'}, {'name': 'sleep', 'description': 'Pause the execution of the application for any amount of milliseconds.', 'syntax': 'await runloop.sleep_ms(10000)', 'parameters': 'time in milliseconds', 'returns': 'none', 'example': "from hub import light_matrix\r\nimport runloop\r\nasync def main():\r\n    light_matrix.write('Hi!')\r\n    # Wait for ten seconds \r\n    await runloop.sleep_ms(10000)\r\n    light_matrix.write('Are you still here?')                \r\nrunloop.run(main())"}]}
Submitting tool outputs: [{'tool_call_id': 'call_PgZmMnA1nR7XfI8AYLEkbyZN', 'output': '{"name": "runloop", "description": "The runloop module contains all functions and constants to use the Runloop. To effectively use awaitable code with the flexibility to run commands either concurrently or sequentially, you must run your code in an asynchronous function using a run loop. The runloop module controls the run loop on the Hub, and lets you run asynchronous functions with its run() function. An asynchronous function, also known as a coroutine, is an awaitable that uses the async keyword before the function definition. The convention is to name the coroutine containing your main program main(). In the body of a coroutine, you can use the await keyword before calling an awaitable command. This pauses the coroutine until the command completes. Without the keyword, the program immediately continues to the next line of code in the coroutine. You can still use regular (not awaitable) code inside the coroutine. However, doing so will always pause or block the whole program until the command completes.", "initialization": "none", "required imports": "import runloop", "function": [{"name": "run", "description": "Start any number of parallel async functions. This is the function you should use to create programs with a similar structure to Word Blocks.", "syntax": "runloop.run(some_async_function())", "parameters": "none", "returns": "none", "example": "import runloop\\r\\nasync def main():\\r\\n    # Write your program here.\\r\\n        runloop.run(main())"}, {"name": "sleep", "description": "Pause the execution of the application for any amount of milliseconds.", "syntax": "await runloop.sleep_ms(10000)", "parameters": "time in milliseconds", "returns": "none", "example": "from hub import light_matrix\\r\\nimport runloop\\r\\nasync def main():\\r\\n    light_matrix.write(\'Hi!\')\\r\\n    # Wait for ten seconds \\r\\n    await runloop.sleep_ms(10000)\\r\\n    light_matrix.write(\'Are you still here?\')                \\r\\nrunloop.run(main())"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import runloop \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n async def main(): \n     while True: \n         motor_pair.move(motor_pair.PAIR_1, 0) \n runloop.run(main())",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair 
from hub import port 
import runloop 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
async def main(): 
    while True: 
        motor_pair.move(motor_pair.PAIR_1, 0) 
runloop.run(main())
RESETTING
 - Status: 
 - Status: 
 - Status: 
RESETTED
================================== SERIAL OUPUT ===================================
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_GhoDsSDdRxa5iKzfpmZEWrWn', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot drive forward?"
}
AIAlchemist: Hey Human, Did the robot drive forward?
Submitting tool outputs: [{'tool_call_id': 'call_xCJX97CBXezSCMDB167P1xDQ', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import runloop \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n async def main(): \n     while True: \n         await motor_pair.move(motor_pair.PAIR_1, 0) \n runloop.run(main())",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair 
from hub import port 
import runloop 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
async def main(): 
    while True: 
        await motor_pair.move(motor_pair.PAIR_1, 0) 
runloop.run(main())
RESETTING
 - Status: 
 - Status: 
 - Status: 
RESETTED
================================== SERIAL OUPUT ===================================
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Be9rw74UC2yGC1MdiEDJ7arF', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot drive forward?"
}
AIAlchemist: Hey Human, Did the robot drive forward?
Submitting tool outputs: [{'tool_call_id': 'call_MkgI1LQ5vNe4BxkNkQouCSLx', 'output': 'nothing happened try again'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import runloop \n import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n async def main(): \n     while True: \n         motor_pair.move(motor_pair.PAIR_1, 0) \n         await runloop.sleep_ms(1000) \n runloop.run(main())",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import runloop 
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
async def main(): 
    while True: 
        motor_pair.move(motor_pair.PAIR_1, 0) 
        await runloop.sleep_ms(1000) 
runloop.run(main())
RESETTING
 - Status: 
 - Status: 
 - Status: 
RESETTED
================================== SERIAL OUPUT ===================================
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_otRDh13rTIOR5dZeOqwfXjOm', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot drive forward this time?"
}
AIAlchemist: Hey Human, Did the robot drive forward this time?
Submitting tool outputs: [{'tool_call_id': 'call_z62VeM0agfDOAZIhbi7ctznj', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 14:52:40

 - Status: THREAD_ID: thread_QNwtrfknbdnoteCMOoTC82A7
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 14:55:35

 - Status: THREAD_ID: thread_KSBfesN21YGfYidv4nyNEAvG
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which ports are the motors plugged into?"
}
AIAlchemist: Hey Human, Which ports are the motors plugged into?
Submitting tool outputs: [{'tool_call_id': 'call_QunspqZivtyIbZ4EoZ5x9uY5', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_RpzUh5B9vSFHnExW3V5SBWAg', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: 
 - Status: 
RESETTED
================================== SERIAL OUPUT ===================================
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_t2wO6NUVJlnW5lxKNQBobuUF', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
AIAlchemist: Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_nqpljTOo1KGnTysdf2gpgUoZ', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 14:56:58

 - Status: THREAD_ID: thread_gnHyK1pfZl93DlNo7sG6NyxX
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 14:57:30

 - Status: THREAD_ID: thread_b3qlVZ5IXngd5LoIqhvEykGo
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for: motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_IqjLna4XHMRlU6mqEKgzFyas', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: 
RESETTED
================================== SERIAL OUPUT ===================================
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_2kOY9HzZA9lxh4x4y1fBzfs7', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
AIAlchemist: Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_hpisZFVMaoFiItPZl2HkWoJO', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 16:32:25

 - Status: THREAD_ID: thread_OGwiCja4aidDWfL4yp5lwIo4
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "To which ports are the motors connected?"
}
AIAlchemist: Hey Human, To which ports are the motors connected?
Submitting tool outputs: [{'tool_call_id': 'call_J3tnMQzKUADhPr89rfCTIrGq', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_1EZBrmdHAKotQgSfohOfXt7f', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "10000"
}
========================== RUNNING CODE (10000 seconds) ===========================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0)
================================== SERIAL OUPUT ===================================
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 16:33:36

 - Status: THREAD_ID: thread_31ebD44Yqmpuho2vzuoim7Iy
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which ports are the motors connected to?"
}
AIAlchemist: Hey Human, Which ports are the motors connected to?
Submitting tool outputs: [{'tool_call_id': 'call_OM31jELLgMM79PVc8lmzCBBc', 'output': 'port a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_VbhTnT3zYfHUkKjmUGmJQkaT', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 100)",
"runtime": "5"
}
============================ RUNNING CODE (5 seconds) =============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 100)
================================== SERIAL OUPUT ===================================
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 16:34:16

 - Status: THREAD_ID: thread_GkwD5HFn8Ljv0UxWB7WvPbEW
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Could you let me know what ports are the drive motors connected to on the robot?"
}
AIAlchemist: Hey Human, Could you let me know what ports are the drive motors connected to on the robot?
Submitting tool outputs: [{'tool_call_id': 'call_wgBRE8aJZVEO0OmwBrz1A0gY', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_jZ6AgRVNvbXjgElDkjCOup4J', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move(motor_pair.PAIR_1, 0)",
  "runtime": "1"
}
============================ RUNNING CODE (1 seconds) =============================
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move(motor_pair.PAIR_1, 0)
================================== SERIAL OUPUT ===================================
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 16:36:04

 - Status: THREAD_ID: thread_UviBwabKnON3TEuxSkETHleo
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Which ports are the left and right motors connected to?"
}
AIAlchemist: Hey Human, Which ports are the left and right motors connected to?
Submitting tool outputs: [{'tool_call_id': 'call_LcK3stYw9gzw2ct4hKMdphZ7', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_ktMw2phLIN3tqCYdGCC9HzsV', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    motor_pair.move(motor_pair.PAIR_1, 0)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   motor_pair.move(motor_pair.PAIR_1, 0)
================================== SERIAL OUPUT ===================================
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 16:40:04

 - Status: THREAD_ID: thread_6ARhuc6gDp7452i7z4QBGyzO
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Which ports are the motors connected to?"
}
AIAlchemist: Hey Human, Which ports are the motors connected to?
Submitting tool outputs: [{'tool_call_id': 'call_CFOW63OxSMRnCoswlPjU4Xcn', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_RMBNf8w1f5N467s2l9NJfALv', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
================================== SERIAL OUPUT ===================================
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_w5NGG8KzO2ROEYs6lOoYxqQ7', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot move forward?"
}
AIAlchemist: Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_JsCcsjBamW9fO8JXHODZ7M4k', 'output': 'i want to go home'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 16:43:00

 - Status: THREAD_ID: thread_kfY5gT2r5wA8ISXOGfqYfLvt
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What ports are the motors connected to on your robot?"
}
AIAlchemist: Hey Human, What ports are the motors connected to on your robot?
Submitting tool outputs: [{'tool_call_id': 'call_ekuSjEqAGbaTxag19uuXRurU', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_AbGFybAiDQDKJrEUyRsf8sP1', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "5"
}
============================ RUNNING CODE (5 seconds) =============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0)
================================== SERIAL OUPUT ===================================
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_1hPBEZq1UxANkEeO34GHmiVr', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move? (Yes/No)"
}
AIAlchemist: Hey Human, Did the robot move? (Yes/No)
Submitting tool outputs: [{'tool_call_id': 'call_cyAoBm7F22zDpms9WW1yr97j', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 16:46:08

 - Status: THREAD_ID: thread_zNO71b94pOL7TLSfXmkEFKAf
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 16:46:21

 - Status: THREAD_ID: thread_M6swAUCAQeHSFOR43ruX7vsO
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 16:46:40

 - Status: THREAD_ID: thread_2Q2xzHSiyWOxriqtVY7rCusa
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which ports are the left and right motors connected to?"
}
AIAlchemist: Hey Human, Which ports are the left and right motors connected to?
Submitting tool outputs: [{'tool_call_id': 'call_kSSrUojpEDgJD1mVQbnQIRfT', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_ORuJ6ClluBsdndVn4302yoIh', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)",
"runtime": "5"
}
============================ RUNNING CODE (5 seconds) =============================
import motor_pair 
from hub import port 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
================================== SERIAL OUPUT ===================================
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_BC8oZsYBLsadWvPm6XgaT3I8', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward continuously?"
}
AIAlchemist: Hey Human, Did the robot move forward continuously?
Submitting tool outputs: [{'tool_call_id': 'call_uO4GEQ9MBLjgUxQiW2crGfyj', 'output': 'no it didnt do anything'}]
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 16:48:32

 - Status: THREAD_ID: thread_OW38SfPad3AbVH3SIM2imHHA
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt" : "Which ports are the motors connected to for driving the robot?"
}
AIAlchemist: Hey Human, Which ports are the motors connected to for driving the robot?
Submitting tool outputs: [{'tool_call_id': 'call_mJzwG71ZqGKI8Q778CDxmZXK', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query" : "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_EOBpxqq3pZ9XkuNLzaWhdXGV', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code" : "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)",
  "runtime" : "20"
}
============================ RUNNING CODE (20 seconds) ============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
================================== SERIAL OUPUT ===================================
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_bkYRf6gHuNbO7WisTawybjF9', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt" : "Did the robot move forward?"
}
AIAlchemist: Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_8q7y58P9RHXD0YBHQgG8Sv4P', 'output': 'no try again'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code" : "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)",
  "runtime" : "20"
}
============================ RUNNING CODE (20 seconds) ============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
================================== SERIAL OUPUT ===================================
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_HXlGJf4Ra4QZsXrJ6a6guDEN', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt" : "Did the robot move forward?"
}
AIAlchemist: Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_m4ZM0kulpxDD5WRtZ7rBRAD2', 'output': 'i want to go home'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 16:57:43

 - Status: THREAD_ID: thread_0NuwKzMdpEbtdJ41n2BFkcXB
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Which ports are the left and right motors of the robot connected to?"
}
AIAlchemist: Hey Human, Which ports are the left and right motors of the robot connected to?
Submitting tool outputs: [{'tool_call_id': 'call_ESZ5G095v8MacUDiDn0r6mmq', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{ 
  "query": "motor_pair" 
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_A0BqPzuwwztepslnDsSR4BHD', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0)",
  "runtime": "5"
}
============================ RUNNING CODE (5 seconds) =============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0)
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 16:59:39

 - Status: THREAD_ID: thread_y4HExfpCaDBvf1DIzV7OtOo2
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What ports are the left and right motors connected to?"
}
AIAlchemist: Hey Human, What ports are the left and right motors connected to?
Submitting tool outputs: [{'tool_call_id': 'call_mgvDRjOq3E6kYVsXW5yjWFdN', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_FlcyDed28TCo7eGEvMGna0Mh', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   motor_pair.move(motor_pair.PAIR_1, 0)
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:00:20

 - Status: THREAD_ID: thread_06VKb33UZCoCw0ZkWkMTFd5q
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:00:41

 - Status: THREAD_ID: thread_qrqUID3lfxWjKjRKOYlH6MXS
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_ASWMzY4idkCgfMd00Co2J9Qx', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    motor_pair.move(motor_pair.PAIR_1, 0, velocity=100)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   motor_pair.move(motor_pair.PAIR_1, 0, velocity=100)
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:03:01

 - Status: THREAD_ID: thread_Euc6LzJbDrfDSnla5nyjWvix
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_xdvJ8iByFhGQl2sAiCtfw0eP', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0)
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_dy3WHC13xpZmnEX9SPj5UU02', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
AIAlchemist: Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_MXAlSytE9GsXbGtJmTkUJEeN', 'output': 'no, im done'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:05:53

 - Status: THREAD_ID: thread_hu43CMd3DJ2v7zZwM9T4eX4E
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_Pob6LLRxz9CT3AQjzR7DapeH', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n \
from hub import port \n \
import time \n \
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n \
while True: \n \
    motor_pair.move(motor_pair.PAIR_1, 0, velocity = 50) \n \
    time.sleep(1)",
"runtime": "5"
}
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:09:20

 - Status: THREAD_ID: thread_cuzi9xKe8j7EJLwmiu18Rpu8
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_bIypFoHGPIchBY2V8HBFDdfU', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "5"
}
============================ RUNNING CODE (5 seconds) =============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_YBgkzyXgxppXA3hoDbCdIrcd', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forwards?"
}
AIAlchemist: Hey Human, Did the robot move forwards?
Submitting tool outputs: [{'tool_call_id': 'call_TGikiA4MWP5XP3ZNA5csdpee', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:11:22

 - Status: THREAD_ID: thread_VvfZf5nCYpJ6tTlSOt0gVFf7
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_zuIRKbySwbHTQZCymWxhDgab', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\n\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)",
"runtime": "5"
}
============================ RUNNING CODE (5 seconds) =============================
import motor_pair
from hub import port

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_eIJY76rc0nz5EdA0EMoTUP0g', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
AIAlchemist: Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_x9uc82LnoyQzovuxBGQmIQg9', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:13:15

 - Status: THREAD_ID: thread_XLQwVGxQEOlQzj03eaxR5nRi
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_6yAk8fiYug84KBTYCYWjvLDy', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "3"
}
============================ RUNNING CODE (3 seconds) =============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_KSKxaQv4h68iqSasQts5SBQT', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move straight forward?"
}
AIAlchemist: Hey Human, Did the robot move straight forward?
Submitting tool outputs: [{'tool_call_id': 'call_oWjoE4BqAxgpVyUUXoa6Kxo3', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:14:23

 - Status: THREAD_ID: thread_k2J8pbOfNXwGppeh7aT2DUoB
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_co8kMtwUrYplvGCI1MRg4v0H', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_6r98bM0iGDO9ib5igoAoo1r8', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
AIAlchemist: Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_IcP7uY1DPZSDEEcrL7Av4NBC', 'output': 'no try again'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    motor_pair.move(motor_pair.PAIR_1, 0, velocity=300)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   motor_pair.move(motor_pair.PAIR_1, 0, velocity=300)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_tWL1b8PwW3GI2YShe2vXir1Z', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward this time?"
}
AIAlchemist: Hey Human, Did the robot move forward this time?
Submitting tool outputs: [{'tool_call_id': 'call_nXOPO5r4eZJVpCmrgG7oCx0b', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:15:39

 - Status: THREAD_ID: thread_iU4qVyYE7siwAZ0My4JAFZF3
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_AEiRufXV5OX5d5BlupQmLLUn', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "5"
}
============================ RUNNING CODE (5 seconds) =============================
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_q36ICcBk74CTi6pK3BAJoC0m', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forwards continuously?"
}
AIAlchemist: Hey Human, Did the robot move forwards continuously?
Submitting tool outputs: [{'tool_call_id': 'call_J32xktU8P1rHMWUCUWiUE0Pw', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:17:52

 - Status: THREAD_ID: thread_hcLX7d3i0zAGYZ7ii03UCkkY
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_XVz4r2k2kMFdhLuomiOkFdg8', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motion_sensor"
}
AIAlchemist: I am querying documentation for motion_sensor
{'name': 'motion_sensor', 'description': 'a class that allows access to spike prime motion sensors', 'initialization': 'none', 'required imports': 'from hub import motion_sensor \n from hub import port', 'function': [{'name': 'acceleration', 'syntax': 'motion_sensor.acceleration()', 'parameters': 'none', 'returns': {'name': 'a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G', 'values': '[int, int, int]'}}, {'name': 'tilt angles', 'syntax': 'motion_sensor.tilt_angles()', 'parameters': 'none', 'returns': {'name': 'a tuple containing yaw pitch and roll values as integers. Values are decidegrees', 'values': '[int, int, int]'}}, {'name': 'angular velocity', 'syntax': 'motion_sensor.angular_velocity()', 'parameters': 'none', 'returns': {'name': 'a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second', 'values': '[int, int, int]'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_rdbtrODAnqPcBezOFwCKcMH4', 'output': '{"name": "motion_sensor", "description": "a class that allows access to spike prime motion sensors", "initialization": "none", "required imports": "from hub import motion_sensor \\n from hub import port", "function": [{"name": "acceleration", "syntax": "motion_sensor.acceleration()", "parameters": "none", "returns": {"name": "a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G", "values": "[int, int, int]"}}, {"name": "tilt angles", "syntax": "motion_sensor.tilt_angles()", "parameters": "none", "returns": {"name": "a tuple containing yaw pitch and roll values as integers. Values are decidegrees", "values": "[int, int, int]"}}, {"name": "angular velocity", "syntax": "motion_sensor.angular_velocity()", "parameters": "none", "returns": {"name": "a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second", "values": "[int, int, int]"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What ports are the motors connected to?"
}
AIAlchemist: Hey Human, What ports are the motors connected to?
Submitting tool outputs: [{'tool_call_id': 'call_FnUCXlOSjOYZAgExXfGrzV5D', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\nfrom hub import motion_sensor\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nmotor_pair.move(motor_pair.PAIR_1, 0, velocity=100)\nwhile True:\n    if motion_sensor.acceleration()[2] < 800:\n        motor_pair.stop(motor_pair.PAIR_1)\n        break",
"runtime": "60"
}
============================ RUNNING CODE (60 seconds) ============================
import motor_pair
from hub import port
from hub import motion_sensor
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
motor_pair.move(motor_pair.PAIR_1, 0, velocity=100)
while True:
   if motion_sensor.acceleration()[2] < 800:
       motor_pair.stop(motor_pair.PAIR_1)
       break
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_pB6NSBMEicQ0ZSfqWbst3QOy', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot stop when you picked it up?"
}
AIAlchemist: Hey Human, Did the robot stop when you picked it up?
Submitting tool outputs: [{'tool_call_id': 'call_PqqtnmTPgs0Kgn1USS3LAq5E', 'output': 'yes, this time have the motors keep going when i put it back down'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\nfrom hub import motion_sensor\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    if motion_sensor.acceleration()[2] > 800:\n        motor_pair.move(motor_pair.PAIR_1, 0, velocity=100)\n    else:\n        motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "60"
}
============================ RUNNING CODE (60 seconds) ============================
import motor_pair
from hub import port
from hub import motion_sensor
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   if motion_sensor.acceleration()[2] > 800:
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=100)
   else:
       motor_pair.stop(motor_pair.PAIR_1)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ovngvchIKbHoi6SGTBtxomYk', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot start moving again when you put it down?"
}
AIAlchemist: Hey Human, Did the robot start moving again when you put it down?
Submitting tool outputs: [{'tool_call_id': 'call_g4KFIIyY1hCgTrmelpA0aJf3', 'output': 'yeah great job buddy!!!!'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:24:38

 - Status: THREAD_ID: thread_3yHxgArXu9lO7BfPVDjmamz4
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motion_sensor"
}
AIAlchemist: I am querying documentation for motion_sensor
{'name': 'motion_sensor', 'description': 'a class that allows access to spike prime motion sensors', 'initialization': 'none', 'required imports': 'from hub import motion_sensor \n from hub import port', 'function': [{'name': 'acceleration', 'syntax': 'motion_sensor.acceleration()', 'parameters': 'none', 'returns': {'name': 'a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G', 'values': '[int, int, int]'}}, {'name': 'tilt angles', 'syntax': 'motion_sensor.tilt_angles()', 'parameters': 'none', 'returns': {'name': 'a tuple containing yaw pitch and roll values as integers. Values are decidegrees', 'values': '[int, int, int]'}}, {'name': 'angular velocity', 'syntax': 'motion_sensor.angular_velocity()', 'parameters': 'none', 'returns': {'name': 'a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second', 'values': '[int, int, int]'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_RBnKkAzc5VeM8MjJLEDB7jfP', 'output': '{"name": "motion_sensor", "description": "a class that allows access to spike prime motion sensors", "initialization": "none", "required imports": "from hub import motion_sensor \\n from hub import port", "function": [{"name": "acceleration", "syntax": "motion_sensor.acceleration()", "parameters": "none", "returns": {"name": "a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G", "values": "[int, int, int]"}}, {"name": "tilt angles", "syntax": "motion_sensor.tilt_angles()", "parameters": "none", "returns": {"name": "a tuple containing yaw pitch and roll values as integers. Values are decidegrees", "values": "[int, int, int]"}}, {"name": "angular velocity", "syntax": "motion_sensor.angular_velocity()", "parameters": "none", "returns": {"name": "a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second", "values": "[int, int, int]"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "from hub import motion_sensor \n print(motion_sensor.tilt_angles())",
"runtime": "5"
}
============================ RUNNING CODE (5 seconds) =============================
from hub import motion_sensor 
print(motion_sensor.tilt_angles())
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_kQ3OwN1Agq3os8kdhR49jCNE', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_eWGLVb4WPuwBYSWinpLaxYBP', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "from hub import motion_sensor \n import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n kp = 1.0 \n kd = 1.0 \n prev_error = 0 \n while True: \n     error = motion_sensor.tilt_angles()[1] \n     adjustment = kp * error + kd * (error - prev_error) \n     motor_pair.move_tank(motor_pair.PAIR_1, 50 + adjustment, 50 - adjustment) \n     prev_error = error",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
from hub import motion_sensor 
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
kp = 1.0 
kd = 1.0 
prev_error = 0 
while True: 
    error = motion_sensor.tilt_angles()[1] 
    adjustment = kp * error + kd * (error - prev_error) 
    motor_pair.move_tank(motor_pair.PAIR_1, 50 + adjustment, 50 - adjustment) 
    prev_error = error
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_DjVt4nINrwO6tWMCAJgZYrCu', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:30:52

 - Status: THREAD_ID: thread_hgKF6N45I1jZLuPGNR1LICzP
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
============================ RUNNING CODE (1 seconds) =============================
print('hello world')
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_pN4pjgaS9mz5fLyBQJR7Xpba', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the hello world message print to the terminal?"
}
AIAlchemist: Hey Human, Did the hello world message print to the terminal?
Submitting tool outputs: [{'tool_call_id': 'call_w1KB4YYi2foR50Kp0XCAyWVk', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:33:06

 - Status: THREAD_ID: thread_xmaHNj2DBpzOgfWfnIdKmpCN
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "2"
}
============================ RUNNING CODE (2 seconds) =============================
print('hello world')
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_JliuF6abAtEm33yv3x1vpJzE', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the 'hello world' print to the terminal successfully?"
}
AIAlchemist: Hey Human, Did the 'hello world' print to the terminal successfully?
Submitting tool outputs: [{'tool_call_id': 'call_WgPurZEhISfDTj7ORazeI1z7', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:35:27

 - Status: THREAD_ID: thread_NupFyy95sRWyf2Gzu3qWPhYE
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello World')",
"runtime": "2"
}
============================ RUNNING CODE (2 seconds) =============================
print('Hello World')
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_FccYQlrc89TNJAzyaIy5FDAg', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the print('Hello World') statement execute successfully?"
}
AIAlchemist: Hey Human, Did the print('Hello World') statement execute successfully?
Submitting tool outputs: [{'tool_call_id': 'call_4bMXTIRpRm7KhgvSWKUgTeJ8', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:38:51

 - Status: THREAD_ID: thread_PijjR4bsKmmvlGwPR7mEzkRi
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')", 
"runtime": "1"
}
============================ RUNNING CODE (1 seconds) =============================
print('hello world')
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:39:14

 - Status: THREAD_ID: thread_6Xz0LpK7mt9Ses0oWJgooYAw
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
============================ RUNNING CODE (1 seconds) =============================
print('hello world')
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_qOSPccemRwf8UtyEnlNBvqu2', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What did you see in the terminal when the print statement was run?"
}
AIAlchemist: Hey Human, What did you see in the terminal when the print statement was run?
Submitting tool outputs: [{'tool_call_id': 'call_CjLNPfkqP0INHxYD9yI9rNJj', 'output': 'dont u have access to serial output'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print((234567854321*5643234234+34363233424) % 31)",
"runtime": "1"
}
============================ RUNNING CODE (1 seconds) =============================
print((234567854321*5643234234+34363233424) % 31)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_wdfZ0conx4agiUN0jgtkFNGB', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "What was the value printed to the terminal when the numerical operation was conducted?"
}
AIAlchemist: Hey Human, What was the value printed to the terminal when the numerical operation was conducted?
Submitting tool outputs: [{'tool_call_id': 'call_ZPaO16L3SQYTWAe83l9Bo2e1', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:43:32

 - Status: THREAD_ID: thread_LS5afF7BJdt5fhCGVZvSYETl
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:45:38

 - Status: THREAD_ID: thread_Bnb2pBgZ4320MlQpf7AkE2v8
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Which ports are the left and right motors connected to? And, is the robot's drive a differential drive? Also, could you tell me which port the motion sensor is plugged into?"
}
AIAlchemist: Hey Human, Which ports are the left and right motors connected to? And, is the robot's drive a differential drive? Also, could you tell me which port the motion sensor is plugged into?
Submitting tool outputs: [{'tool_call_id': 'call_CUjuSmsBme8Vd7tL7BNUjqm9', 'output': 'a and b, the motion sensor is built into the spike prime'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from spike import Motor, hub, wait_for_seconds\n\
left_motor = Motor('A')\n\
right_motor = Motor('B')\n\
try:\n\
    while True:\n\
        tilt_angle = hub.motion_sensor.get_tilt_angle('up')\n\
        if tilt_angle > 5:\n\
            left_motor.run_for_time(-100, 0.2)\n\
            right_motor.run_for_time(-100, 0.2)\n\
        elif tilt_angle < -5:\n\
            left_motor.run_for_time(100, 0.2)\n\
            right_motor.run_for_time(100, 0.2)\n\
        else:\n\
            left_motor.stop()\n\
            right_motor.stop()\n\
        wait_for_seconds(0.2)\n\
except:\n\
    left_motor.stop()\n\
    right_motor.stop()",
  "runtime": "10"
}
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-12 17:47:18

 - Status: THREAD_ID: thread_yQBjUsXVHb1o8YMEUKwtoP2p
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motion_sensor"
}
AIAlchemist: I am querying documentation for motion_sensor
{'name': 'motion_sensor', 'description': 'a class that allows access to spike prime motion sensors', 'initialization': 'none', 'required imports': 'from hub import motion_sensor', 'function': [{'name': 'acceleration', 'syntax': 'motion_sensor.acceleration()', 'parameters': 'none', 'returns': {'name': 'a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G', 'values': '[int, int, int]'}}, {'name': 'tilt angles', 'syntax': 'motion_sensor.tilt_angles()', 'parameters': 'none', 'returns': {'name': 'a tuple containing yaw pitch and roll values as integers. Values are decidegrees', 'values': '[int, int, int]'}}, {'name': 'angular velocity', 'syntax': 'motion_sensor.angular_velocity()', 'parameters': 'none', 'returns': {'name': 'a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second', 'values': '[int, int, int]'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_6f0BStYBKRetryVIXuupIYBC', 'output': '{"name": "motion_sensor", "description": "a class that allows access to spike prime motion sensors", "initialization": "none", "required imports": "from hub import motion_sensor", "function": [{"name": "acceleration", "syntax": "motion_sensor.acceleration()", "parameters": "none", "returns": {"name": "a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G", "values": "[int, int, int]"}}, {"name": "tilt angles", "syntax": "motion_sensor.tilt_angles()", "parameters": "none", "returns": {"name": "a tuple containing yaw pitch and roll values as integers. Values are decidegrees", "values": "[int, int, int]"}}, {"name": "angular velocity", "syntax": "motion_sensor.angular_velocity()", "parameters": "none", "returns": {"name": "a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second", "values": "[int, int, int]"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import motion_sensor\nfrom spike import MotorPair\n\n# Initialize the motor pair\nmotor_pair = MotorPair('A', 'B')\n\n# Start a loop that will continue to run\nwhile True:\n    # Get the current tilt of the robot\n    _, pitch, _ = motion_sensor.tilt_angles()\n\n    # If the pitch is positive (robot is tilted forward), move the robot forward\n    if pitch > 0:\n        motor_pair.start(0)\n    # If the pitch is negative (robot is tilted backward), move the robot backwards\n    elif pitch < 0:\n        motor_pair.start(0)\n\n    else:\n        # If the pitch is zero (robot is perfectly balanced), stop the motors\n        motor_pair.stop()",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
from hub import motion_sensor
from spike import MotorPair

# Initialize the motor pair
motor_pair = MotorPair('A', 'B')

# Start a loop that will continue to run
while True:
   # Get the current tilt of the robot
   _, pitch, _ = motion_sensor.tilt_angles()

   # If the pitch is positive (robot is tilted forward), move the robot forward
   if pitch > 0:
       motor_pair.start(0)
   # If the pitch is negative (robot is tilted backward), move the robot backwards
   elif pitch < 0:
       motor_pair.start(0)

   else:
       # If the pitch is zero (robot is perfectly balanced), stop the motors
       motor_pair.stop()
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_rxZJ8VZcL2AP5BwDzNTMCEh4', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Can you verify if the robot was balancing itself on the platform?"
}
AIAlchemist: Hey Human, Can you verify if the robot was balancing itself on the platform?
Submitting tool outputs: [{'tool_call_id': 'call_DBl78lM0zXu5pEJpnrAyxHio', 'output': 'the motors did not move'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import motion_sensor\nfrom spike import MotorPair\n\n# Initialize the motor pair\nmotor_pair = MotorPair('A', 'B')\n\n# Start a loop that will continue to run\nwhile True:\n    # Get the current tilt of the robot\n    _, pitch, _ = motion_sensor.tilt_angles()\n\n    # If the pitch is positive (robot is tilted forward), move the robot forward\n    if pitch > 0:\n        motor_pair.start(50)\n    # If the pitch is negative (robot is tilted backward), move the robot backwards\n    elif pitch < 0:\n        motor_pair.start(-50)\n\n    else:\n        # If the pitch is zero (robot is perfectly balanced), stop the motors\n        motor_pair.stop()",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
from hub import motion_sensor
from spike import MotorPair

# Initialize the motor pair
motor_pair = MotorPair('A', 'B')

# Start a loop that will continue to run
while True:
   # Get the current tilt of the robot
   _, pitch, _ = motion_sensor.tilt_angles()

   # If the pitch is positive (robot is tilted forward), move the robot forward
   if pitch > 0:
       motor_pair.start(50)
   # If the pitch is negative (robot is tilted backward), move the robot backwards
   elif pitch < 0:
       motor_pair.start(-50)

   else:
       # If the pitch is zero (robot is perfectly balanced), stop the motors
       motor_pair.stop()
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_IfUKAbNaafxBPgU6JkYYBjm4', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot attempt to balance itself on the platform this time?"
}
AIAlchemist: Hey Human, Did the robot attempt to balance itself on the platform this time?
Submitting tool outputs: [{'tool_call_id': 'call_SvL6f7vm5a6us4pyaTeCZrbY', 'output': 'i think you are using the wrong motor pair syntax'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
AIAlchemist: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_sHWK0LytTxheizwEKW43kxKU', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize the motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Start a loop that will continue to run\nwhile True:\n    # Get the current tilt of the robot\n    _, pitch, _ = motion_sensor.tilt_angles()\n\n    # If the pitch is positive (robot is tilted forward), move the robot forward\n    if pitch > 0:\n        motor_pair.move(motor_pair.PAIR_1, 50)\n    # If the pitch is negative (robot is tilted backward), move the robot backwards\n    elif pitch < 0:\n        motor_pair.move(motor_pair.PAIR_1, -50)\n    else:\n        # If the pitch is zero (robot is perfectly balanced), stop the motors\n        motor_pair.stop(motor_pair.PAIR_1)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize the motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Start a loop that will continue to run
while True:
   # Get the current tilt of the robot
   _, pitch, _ = motion_sensor.tilt_angles()

   # If the pitch is positive (robot is tilted forward), move the robot forward
   if pitch > 0:
       motor_pair.move(motor_pair.PAIR_1, 50)
   # If the pitch is negative (robot is tilted backward), move the robot backwards
   elif pitch < 0:
       motor_pair.move(motor_pair.PAIR_1, -50)
   else:
       # If the pitch is zero (robot is perfectly balanced), stop the motors
       motor_pair.stop(motor_pair.PAIR_1)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_LufGjO9nkiKcoZmzswpmzYJb', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Is the robot now moving correctly to balance itself on the platform?"
}
AIAlchemist: Hey Human, Is the robot now moving correctly to balance itself on the platform?
Submitting tool outputs: [{'tool_call_id': 'call_eXQViqtqUJ2vUmgCpmbe2zlX', 'output': 'it was turning instead of driving straight'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize the motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Start a loop that will continue to run\nwhile True:\n    # Get the current tilt of the robot\n    _, pitch, _ = motion_sensor.tilt_angles()\n\n    # If the pitch is positive (robot is tilted forward), move the robot forward\n    if pitch > 0:\n        motor_pair.move(motor_pair.PAIR_1, 0, 50)\n    # If the pitch is negative (robot is tilted backward), move the robot backwards\n    elif pitch < 0:\n        motor_pair.move(motor_pair.PAIR_1, 0, -50)\n    else:\n        # If the pitch is zero (robot is perfectly balanced), stop the motors\n        motor_pair.stop(motor_pair.PAIR_1)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize the motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Start a loop that will continue to run
while True:
   # Get the current tilt of the robot
   _, pitch, _ = motion_sensor.tilt_angles()

   # If the pitch is positive (robot is tilted forward), move the robot forward
   if pitch > 0:
       motor_pair.move(motor_pair.PAIR_1, 0, 50)
   # If the pitch is negative (robot is tilted backward), move the robot backwards
   elif pitch < 0:
       motor_pair.move(motor_pair.PAIR_1, 0, -50)
   else:
       # If the pitch is zero (robot is perfectly balanced), stop the motors
       motor_pair.stop(motor_pair.PAIR_1)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_t4dSMbnuNjFPFDg8yg8unObR', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Is the robot driving straight forward and backward to balance itself on the platform?"
}
AIAlchemist: Hey Human, Is the robot driving straight forward and backward to balance itself on the platform?
Submitting tool outputs: [{'tool_call_id': 'call_uDA8D4uCPOh4jtigkGZvMU0I', 'output': 'nothing happened'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize the motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Start a loop that will continue to run\nwhile True:\n    # Get the current tilt of the robot\n    _, pitch, _ = motion_sensor.tilt_angles()\n\n    # If the pitch is positive (robot is tilted forward), move the robot forward\n    if pitch > 0:\n        motor_pair.move_tank(motor_pair.PAIR_1, 50, 50)\n    # If the pitch is negative (robot is tilted backward), move the robot backwards\n    elif pitch < 0:\n        motor_pair.move_tank(motor_pair.PAIR_1, -50, -50)\n    else:\n        # If the pitch is zero (robot is perfectly balanced), stop the motors\n        motor_pair.stop(motor_pair.PAIR_1)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize the motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Start a loop that will continue to run
while True:
   # Get the current tilt of the robot
   _, pitch, _ = motion_sensor.tilt_angles()

   # If the pitch is positive (robot is tilted forward), move the robot forward
   if pitch > 0:
       motor_pair.move_tank(motor_pair.PAIR_1, 50, 50)
   # If the pitch is negative (robot is tilted backward), move the robot backwards
   elif pitch < 0:
       motor_pair.move_tank(motor_pair.PAIR_1, -50, -50)
   else:
       # If the pitch is zero (robot is perfectly balanced), stop the motors
       motor_pair.stop(motor_pair.PAIR_1)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_QVWyPoZ66gPWXxVFaO83nzFh', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot attempt to balance itself on the platform this time by moving straight forward and backward?"
}
AIAlchemist: Hey Human, Did the robot attempt to balance itself on the platform this time by moving straight forward and backward?
Submitting tool outputs: [{'tool_call_id': 'call_3RpaBEiW28HNj9lr0Jy9pUul', 'output': 'yes, very slowly though'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize the motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Start a loop that will continue to run\nwhile True:\n    # Get the current tilt of the robot\n    _, pitch, _ = motion_sensor.tilt_angles()\n\n    # If the pitch is positive (robot is tilted forward), move the robot forward\n    if pitch > 0:\n        motor_pair.move_tank(motor_pair.PAIR_1, 100, 100)\n    # If the pitch is negative (robot is tilted backward), move the robot backwards\n    elif pitch < 0:\n        motor_pair.move_tank(motor_pair.PAIR_1, -100, -100)\n    else:\n        # If the pitch is zero (robot is perfectly balanced), stop the motors\n        motor_pair.stop(motor_pair.PAIR_1)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize the motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Start a loop that will continue to run
while True:
   # Get the current tilt of the robot
   _, pitch, _ = motion_sensor.tilt_angles()

   # If the pitch is positive (robot is tilted forward), move the robot forward
   if pitch > 0:
       motor_pair.move_tank(motor_pair.PAIR_1, 100, 100)
   # If the pitch is negative (robot is tilted backward), move the robot backwards
   elif pitch < 0:
       motor_pair.move_tank(motor_pair.PAIR_1, -100, -100)
   else:
       # If the pitch is zero (robot is perfectly balanced), stop the motors
       motor_pair.stop(motor_pair.PAIR_1)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_qCfp3bkJVNpMd3CDhwmu6yIw', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Does increasing the velocity to 100 improve the robot's ability to balance itself on the platform?"
}
AIAlchemist: Hey Human, Does increasing the velocity to 100 improve the robot's ability to balance itself on the platform?
Submitting tool outputs: [{'tool_call_id': 'call_zZAGW9RoRIh4ZKouL5srNyXx', 'output': 'yeah, try increasing it even more and also the run time'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize the motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Start a loop that will continue to run\nwhile True:\n    # Get the current tilt of the robot\n    _, pitch, _ = motion_sensor.tilt_angles()\n\n    # If the pitch is positive (robot is tilted forward), move the robot forward\n    if pitch > 0:\n        motor_pair.move_tank(motor_pair.PAIR_1, 100, 100)\n    # If the pitch is negative (robot is tilted backward), move the robot backwards\n    elif pitch < 0:\n        motor_pair.move_tank(motor_pair.PAIR_1, -100, -100)\n    else:\n        # If the pitch is zero (robot is perfectly balanced), stop the motors\n        motor_pair.stop(motor_pair.PAIR_1)",
  "runtime": "30"
}
============================ RUNNING CODE (30 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize the motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Start a loop that will continue to run
while True:
   # Get the current tilt of the robot
   _, pitch, _ = motion_sensor.tilt_angles()

   # If the pitch is positive (robot is tilted forward), move the robot forward
   if pitch > 0:
       motor_pair.move_tank(motor_pair.PAIR_1, 100, 100)
   # If the pitch is negative (robot is tilted backward), move the robot backwards
   elif pitch < 0:
       motor_pair.move_tank(motor_pair.PAIR_1, -100, -100)
   else:
       # If the pitch is zero (robot is perfectly balanced), stop the motors
       motor_pair.stop(motor_pair.PAIR_1)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_h6CuAY11ktk53UCWBvrR8WQA', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Does increasing the runtime to 30 seconds help the robot in maintaining balance on the seesaw?"
}
AIAlchemist: Hey Human, Does increasing the runtime to 30 seconds help the robot in maintaining balance on the seesaw?
Submitting tool outputs: [{'tool_call_id': 'call_NhQ65oKw9SXy95nSKsYGwfp0', 'output': 'yes, try using proportional control and also speeds over 100'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize the motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Start a loop that will continue to run\nwhile True:\n    # Get the current tilt of the robot\n    _, pitch, _ = motion_sensor.tilt_angles()\n\n    # Using proportional control: our gain factor will be 2 to stay within -100 to 100 range\n    move_speed = pitch * 2\n\n    if abs(move_speed) > 100:  # cap the maximum speed\n        move_speed = 100 if move_speed > 0 else -100\n\n    # Adjust the motor speed based on the tilt\n    motor_pair.move_tank(motor_pair.PAIR_1, move_speed, move_speed)",
  "runtime": "60"
}
============================ RUNNING CODE (60 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize the motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Start a loop that will continue to run
while True:
   # Get the current tilt of the robot
   _, pitch, _ = motion_sensor.tilt_angles()

   # Using proportional control: our gain factor will be 2 to stay within -100 to 100 range
   move_speed = pitch * 2

   if abs(move_speed) > 100:  # cap the maximum speed
       move_speed = 100 if move_speed > 0 else -100

   # Adjust the motor speed based on the tilt
   motor_pair.move_tank(motor_pair.PAIR_1, move_speed, move_speed)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_HN5lTXSUTZac6mEdAyyQpyZ7', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "With the proportional control implemented, does the robot dynamically adjust its speed based on the pitch angle to balance itself effectively?"
}
AIAlchemist: Hey Human, With the proportional control implemented, does the robot dynamically adjust its speed based on the pitch angle to balance itself effectively?
Submitting tool outputs: [{'tool_call_id': 'call_Of5gfmYAH88GXj6mTNTLEpfX', 'output': 'yeah but its hard to tell, try using a move speed range of -1000 to 1000, i promise you can go faster'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize the motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Start a loop that will continue to run\nwhile True:\n    # Get the current tilt of the robot\n    _, pitch, _ = motion_sensor.tilt_angles()\n\n    # Using proportional control: our gain factor will be 20\n    move_speed = pitch * 20\n\n    if abs(move_speed) > 1000:  # cap the maximum speed\n        move_speed = 1000 if move_speed > 0 else -1000\n\n    # Adjust the motor speed based on the tilt\n    motor_pair.move_tank(motor_pair.PAIR_1, move_speed, move_speed)",
  "runtime": "60"
}
============================ RUNNING CODE (60 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize the motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Start a loop that will continue to run
while True:
   # Get the current tilt of the robot
   _, pitch, _ = motion_sensor.tilt_angles()

   # Using proportional control: our gain factor will be 20
   move_speed = pitch * 20

   if abs(move_speed) > 1000:  # cap the maximum speed
       move_speed = 1000 if move_speed > 0 else -1000

   # Adjust the motor speed based on the tilt
   motor_pair.move_tank(motor_pair.PAIR_1, move_speed, move_speed)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-13 10:32:19

 - Status: THREAD_ID: thread_WhMoodQPYvcY4EQ31QOEWOjk
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Where are the motors mounted on the robot?"
}
ChatGPT: Hey Human, Where are the motors mounted on the robot?
Submitting tool outputs: [{'tool_call_id': 'call_hFK5M0Qur5a8MM8AEManuxbj', 'output': 'ports a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_6MVSL6r5QrwjvrWo9fQ9zFsr', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    motor_pair.move(motor_pair.PAIR_1, 0, velocity=50)\n    utime.sleep(1)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   motor_pair.move(motor_pair.PAIR_1, 0, velocity=50)
   utime.sleep(1)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import hub,utime,motor_pair
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
while True:
=== 
   motor_pair.move(motor_pair.PAIR_1, 0, velocity=50)
=== 
   utime.sleep(1)
=== 


=== 
import hub,utime,motor_pair
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
while True:
=== 
   motor_pair.move(motor_pair.PAIR_1, 0, velocity=50)
=== 
   utime.sleep(1)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_DMbRzMnFq66uz1UXywURr7z0', 'output': '\r\n=== \nimport hub,utime,motor_pair\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \nwhile True:\r\n=== \n   motor_pair.move(motor_pair.PAIR_1, 0, velocity=50)\r\n=== \n   utime.sleep(1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot move forward for 10 seconds?"
}
ChatGPT: Hey Human, Did the robot move forward for 10 seconds?
Submitting tool outputs: [{'tool_call_id': 'call_rB0oCVCqmBQGylDjbfxvoBIa', 'output': 'yes but very slowly'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\n    utime.sleep(1)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
   utime.sleep(1)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import hub,utime,motor_pair
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
while True:
=== 
   motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
=== 
   utime.sleep(1)
=== 


=== 
import hub,utime,motor_pair
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
while True:
=== 
   motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
=== 
   utime.sleep(1)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Y6KNTouap5ErEK1wcgh8RCAj', 'output': '\r\n=== \nimport hub,utime,motor_pair\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \nwhile True:\r\n=== \n   motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\r\n=== \n   utime.sleep(1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot move forward faster this time?"
}
ChatGPT: Hey Human, Did the robot move forward faster this time?
Submitting tool outputs: [{'tool_call_id': 'call_xddiUAArQ88kMsJUvsVDdz40', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "What distance should the robot maintain from the moving wall? Also, which port is the distance sensor connected to?"
}
ChatGPT: Hey Human, What distance should the robot maintain from the moving wall? Also, which port is the distance sensor connected to?
Submitting tool outputs: [{'tool_call_id': 'call_M4R0EtRRzYl1zhBXHPXZRNNB', 'output': 'try 200mm, port d'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "distance_sensor"
}
ChatGPT: I am querying documentation for distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_khdBWX8H97n8Vzb8QiLHBGB7', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,motor_pair,distance_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\ndistance = 200\nwhile True:\n    current_distance = distance_sensor.distance(port.D)\n    if current_distance < distance:\n        motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)\n    elif current_distance > distance:\n        motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\n    else:\n        motor_pair.stop(motor_pair.PAIR_1)\n    utime.sleep(0.01)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,motor_pair,distance_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
distance = 200
while True:
   current_distance = distance_sensor.distance(port.D)
   if current_distance < distance:
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
   elif current_distance > distance:
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
   else:
       motor_pair.stop(motor_pair.PAIR_1)
   utime.sleep(0.01)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
distance = 200
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance < distance:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
=== 
   elif current_distance > distance:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 
   utime.sleep(0.01)
=== 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
distance = 200
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance < distance:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
=== 
   elif current_distance > distance:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 
   utime.sleep(0.01)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_paaGZoARed4l1o9lWGtP57vi', 'output': '\r\n=== \nimport hub,utime,motor_pair,distance_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \ndistance = 200\r\n=== \nwhile True:\r\n=== \n   current_distance = distance_sensor.distance(port.D)\r\n=== \n   if current_distance < distance:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)\r\n=== \n   elif current_distance > distance:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\r\n=== \n   else:\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n   utime.sleep(0.01)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot move forward and backward in response to the moving wall?"
}
ChatGPT: Hey Human, Did the robot move forward and backward in response to the moving wall?
Submitting tool outputs: [{'tool_call_id': 'call_9euFVJOgDU8k808TcTvtdkkT', 'output': 'no it moved backwards'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,motor_pair,distance_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\ndistance = 200\nwhile True:\n    current_distance = distance_sensor.distance(port.D)\n    if current_distance > distance:\n        motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)\n    elif current_distance < distance:\n        motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\n    else:\n        motor_pair.stop(motor_pair.PAIR_1)\n    utime.sleep(0.01)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,motor_pair,distance_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
distance = 200
while True:
   current_distance = distance_sensor.distance(port.D)
   if current_distance > distance:
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
   elif current_distance < distance:
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
   else:
       motor_pair.stop(motor_pair.PAIR_1)
   utime.sleep(0.01)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
distance = 200
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance > distance:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
=== 
   elif current_distance < distance:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 
   utime.sleep(0.01)
=== 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
distance = 200
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance > distance:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
=== 
   elif current_distance < distance:
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 
   utime.sleep(0.01)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_vtOKVU6keLBxaeHusaU7fpob', 'output': '\r\n=== \nimport hub,utime,motor_pair,distance_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \ndistance = 200\r\n=== \nwhile True:\r\n=== \n   current_distance = distance_sensor.distance(port.D)\r\n=== \n   if current_distance > distance:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)\r\n=== \n   elif current_distance < distance:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\r\n=== \n   else:\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n   utime.sleep(0.01)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot move forward and backward in response to the moving wall?"
}
ChatGPT: Hey Human, Did the robot move forward and backward in response to the moving wall?
Submitting tool outputs: [{'tool_call_id': 'call_LWAc62bVMeBHIvSkOGrDzIdk', 'output': 'it didnt react to the wall'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,motor_pair,distance_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\ndistance = 200\nwhile True:\n    current_distance = distance_sensor.distance(port.D)\n    if current_distance == -1:\n        continue\n    else:\n        if current_distance > distance:\n            motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)\n        elif current_distance < distance:\n            motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\n        else:\n            motor_pair.stop(motor_pair.PAIR_1)\n    utime.sleep(0.01)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,motor_pair,distance_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
distance = 200
while True:
   current_distance = distance_sensor.distance(port.D)
   if current_distance == -1:
       continue
   else:
       if current_distance > distance:
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
       elif current_distance < distance:
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
       else:
           motor_pair.stop(motor_pair.PAIR_1)
   utime.sleep(0.01)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
distance = 200
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       if current_distance > distance:
=== 
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
=== 
       elif current_distance < distance:
=== 
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
=== 
       else:
=== 
           motor_pair.stop(motor_pair.PAIR_1)
=== 
   utime.sleep(0.01)
=== 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
distance = 200
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       if current_distance > distance:
=== 
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
=== 
       elif current_distance < distance:
=== 
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
=== 
       else:
=== 
           motor_pair.stop(motor_pair.PAIR_1)
=== 
   utime.sleep(0.01)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_3dAJDT0pGvucj12NL7NlfXO1', 'output': '\r\n=== \nimport hub,utime,motor_pair,distance_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \ndistance = 200\r\n=== \nwhile True:\r\n=== \n   current_distance = distance_sensor.distance(port.D)\r\n=== \n   if current_distance == -1:\r\n=== \n       continue\r\n=== \n   else:\r\n=== \n       if current_distance > distance:\r\n=== \n           motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)\r\n=== \n       elif current_distance < distance:\r\n=== \n           motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\r\n=== \n       else:\r\n=== \n           motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n   utime.sleep(0.01)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot react to the moving wall now?"
}
ChatGPT: Hey Human, Did the robot react to the moving wall now?
Submitting tool outputs: [{'tool_call_id': 'call_NqdrXUuRQctgZAboOuSO82Ju', 'output': 'nothing happened'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,distance_sensor\nfrom hub import port\nfor _ in range(10):\n    print(distance_sensor.distance(port.D))\n    utime.sleep(1)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,distance_sensor
from hub import port
for _ in range(10):
   print(distance_sensor.distance(port.D))
   utime.sleep(1)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
-1


=== 
import hub,utime,distance_sensor
=== 
from hub import port
=== 
for _ in range(10):
=== 
   print(distance_sensor.distance(port.D))
=== 
   utime.sleep(1)
=== 


=== 
import hub,utime,distance_sensor
=== 
from hub import port
=== 
for _ in range(10):
=== 
   print(distance_sensor.distance(port.D))
=== 
   utime.sleep(1)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: -1
-1
 - Status: Line: 
 - Status: Line: 
 - Status: Line: -1
-1
 - Status: Line: 
 - Status: Line: 
 - Status: Line: -1
-1
 - Status: Line: 
 - Status: Line: -1
-1
 - Status: Line: 
 - Status: Line: 
 - Status: Line: -1
-1
 - Status: Line: 
 - Status: Line: 
 - Status: Line: -1
-1
 - Status: Line: 
 - Status: Line: 
 - Status: Line: -1
-1
 - Status: Line: 
 - Status: Line: 
 - Status: Line: -1
-1
 - Status: Line: 
 - Status: Line: -1
-1
 - Status: Line: 
 - Status: Line: 
Line: >>> 
Line: >>> 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_7kOMfcujopC8SD2GIw5rad6H', 'output': '\r\n=== \nimport hub,utime,distance_sensor\r\n=== \nfrom hub import port\r\n=== \nfor _ in range(10):\r\n=== \n   print(distance_sensor.distance(port.D))\r\n=== \n   utime.sleep(1)\r\n=== \n\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "At the time of running these readings, was there an object within a meter of the distance sensor?"
}
ChatGPT: Hey Human, At the time of running these readings, was there an object within a meter of the distance sensor?
Submitting tool outputs: [{'tool_call_id': 'call_iNWOLSOfCKRIxC30PHLtb9Jv', 'output': 'no'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,distance_sensor\nfrom hub import port\nfor _ in range(10):\n    print(distance_sensor.distance(port.D))\n    utime.sleep(1)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,distance_sensor
from hub import port
for _ in range(10):
   print(distance_sensor.distance(port.D))
   utime.sleep(1)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
49


=== 
import hub,utime,distance_sensor
=== 
from hub import port
=== 
for _ in range(10):
=== 
   print(distance_sensor.distance(port.D))
=== 
   utime.sleep(1)
=== 


=== 
import hub,utime,distance_sensor
=== 
from hub import port
=== 
for _ in range(10):
=== 
   print(distance_sensor.distance(port.D))
=== 
   utime.sleep(1)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 49
49
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 49
49
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 49
49
 - Status: Line: 
 - Status: Line: 49
49
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 49
49
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 49
49
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 49
49
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 49
49
 - Status: Line: 
 - Status: Line: 49
49
 - Status: Line: 
 - Status: Line: 
Line: >>> 
Line: >>> 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_XwpsaKtwEC7jxkRLwJONy3EC', 'output': '\r\n=== \nimport hub,utime,distance_sensor\r\n=== \nfrom hub import port\r\n=== \nfor _ in range(10):\r\n=== \n   print(distance_sensor.distance(port.D))\r\n=== \n   utime.sleep(1)\r\n=== \n\n49\n49\n49\n49\n49\n49\n49\n49\n49'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the reported distance of 49mm match the actual distance from the robot to the wall?"
}
ChatGPT: Hey Human, Did the reported distance of 49mm match the actual distance from the robot to the wall?
Submitting tool outputs: [{'tool_call_id': 'call_UmXsLz0xqKfYxfaZpmVAKisH', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,motor_pair,distance_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\ndistance = 100\nwhile True:\n    current_distance = distance_sensor.distance(port.D)\n    if current_distance == -1:\n        continue\n    else:\n        if current_distance > distance:\n            motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)\n        elif current_distance < distance:\n            motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\n        else:\n            motor_pair.stop(motor_pair.PAIR_1)\n    utime.sleep(0.01)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,motor_pair,distance_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
distance = 100
while True:
   current_distance = distance_sensor.distance(port.D)
   if current_distance == -1:
       continue
   else:
       if current_distance > distance:
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
       elif current_distance < distance:
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
       else:
           motor_pair.stop(motor_pair.PAIR_1)
   utime.sleep(0.01)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
distance = 100
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       if current_distance > distance:
=== 
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
=== 
       elif current_distance < distance:
=== 
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
=== 
       else:
=== 
           motor_pair.stop(motor_pair.PAIR_1)
=== 
   utime.sleep(0.01)
=== 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
distance = 100
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       if current_distance > distance:
=== 
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
=== 
       elif current_distance < distance:
=== 
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
=== 
       else:
=== 
           motor_pair.stop(motor_pair.PAIR_1)
=== 
   utime.sleep(0.01)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_5LA0JzioBmQH05ueHpGJFPm8', 'output': '\r\n=== \nimport hub,utime,motor_pair,distance_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \ndistance = 100\r\n=== \nwhile True:\r\n=== \n   current_distance = distance_sensor.distance(port.D)\r\n=== \n   if current_distance == -1:\r\n=== \n       continue\r\n=== \n   else:\r\n=== \n       if current_distance > distance:\r\n=== \n           motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)\r\n=== \n       elif current_distance < distance:\r\n=== \n           motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\r\n=== \n       else:\r\n=== \n           motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n   utime.sleep(0.01)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot react to the moving wall now?"
}
ChatGPT: Hey Human, Did the robot react to the moving wall now?
Submitting tool outputs: [{'tool_call_id': 'call_Uhi9eWPHmt5Lw8ojDeRaOuBQ', 'output': 'it did react, but i think the directions are flipped'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,motor_pair,distance_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\ndistance = 100\nwhile True:\n    current_distance = distance_sensor.distance(port.D)\n    if current_distance == -1:\n        continue\n    else:\n        if current_distance < distance:\n            motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)\n        elif current_distance > distance:\n            motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\n        else:\n            motor_pair.stop(motor_pair.PAIR_1)\n    utime.sleep(0.01)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,motor_pair,distance_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
distance = 100
while True:
   current_distance = distance_sensor.distance(port.D)
   if current_distance == -1:
       continue
   else:
       if current_distance < distance:
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
       elif current_distance > distance:
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
       else:
           motor_pair.stop(motor_pair.PAIR_1)
   utime.sleep(0.01)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
distance = 100
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       if current_distance < distance:
=== 
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
=== 
       elif current_distance > distance:
=== 
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
=== 
       else:
=== 
           motor_pair.stop(motor_pair.PAIR_1)
=== 
   utime.sleep(0.01)
=== 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
distance = 100
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       if current_distance < distance:
=== 
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)
=== 
       elif current_distance > distance:
=== 
           motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)
=== 
       else:
=== 
           motor_pair.stop(motor_pair.PAIR_1)
=== 
   utime.sleep(0.01)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_wZabOw97rqfBgoVeTuTgBRCZ', 'output': '\r\n=== \nimport hub,utime,motor_pair,distance_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \ndistance = 100\r\n=== \nwhile True:\r\n=== \n   current_distance = distance_sensor.distance(port.D)\r\n=== \n   if current_distance == -1:\r\n=== \n       continue\r\n=== \n   else:\r\n=== \n       if current_distance < distance:\r\n=== \n           motor_pair.move(motor_pair.PAIR_1, 0, velocity=-200)\r\n=== \n       elif current_distance > distance:\r\n=== \n           motor_pair.move(motor_pair.PAIR_1, 0, velocity=200)\r\n=== \n       else:\r\n=== \n           motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n   utime.sleep(0.01)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot react correctly to the moving wall now?"
}
ChatGPT: Hey Human, Did the robot react correctly to the moving wall now?
Submitting tool outputs: [{'tool_call_id': 'call_VULHvSbpEKPwpwUeGenA9mgh', 'output': 'yes it worked great this time'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,motor_pair,distance_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\ndesired_distance = 100\nk_p = 1.2\nwhile True:\n    current_distance = distance_sensor.distance(port.D)\n    if current_distance == -1:\n        continue\n    else:\n        error = desired_distance - current_distance\n        velocity = k_p * error\n        motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))\n    utime.sleep(0.01)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,motor_pair,distance_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
desired_distance = 100
k_p = 1.2
while True:
   current_distance = distance_sensor.distance(port.D)
   if current_distance == -1:
       continue
   else:
       error = desired_distance - current_distance
       velocity = k_p * error
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
   utime.sleep(0.01)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
desired_distance = 100
=== 
k_p = 1.2
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       error = desired_distance - current_distance
=== 
       velocity = k_p * error
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
=== 
   utime.sleep(0.01)
=== 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
desired_distance = 100
=== 
k_p = 1.2
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       error = desired_distance - current_distance
=== 
       velocity = k_p * error
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
=== 
   utime.sleep(0.01)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_dwDIwBWl7Z1BhXwrQdedkrMI', 'output': '\r\n=== \nimport hub,utime,motor_pair,distance_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \ndesired_distance = 100\r\n=== \nk_p = 1.2\r\n=== \nwhile True:\r\n=== \n   current_distance = distance_sensor.distance(port.D)\r\n=== \n   if current_distance == -1:\r\n=== \n       continue\r\n=== \n   else:\r\n=== \n       error = desired_distance - current_distance\r\n=== \n       velocity = k_p * error\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))\r\n=== \n   utime.sleep(0.01)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot react smoothly to the moving wall and maintain the desired distance accurately?"
}
ChatGPT: Hey Human, Did the robot react smoothly to the moving wall and maintain the desired distance accurately?
Submitting tool outputs: [{'tool_call_id': 'call_9IUdRtaYSUEKaSaoKmTeRoEj', 'output': 'it did react, but i think the directions are flipped again'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,motor_pair,distance_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\ndesired_distance = 100\nk_p = 1.2\nwhile True:\n    current_distance = distance_sensor.distance(port.D)\n    if current_distance == -1:\n        continue\n    else:\n        error = desired_distance - current_distance\n        velocity = -k_p * error\n        motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))\n    utime.sleep(0.01)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,motor_pair,distance_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
desired_distance = 100
k_p = 1.2
while True:
   current_distance = distance_sensor.distance(port.D)
   if current_distance == -1:
       continue
   else:
       error = desired_distance - current_distance
       velocity = -k_p * error
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
   utime.sleep(0.01)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
desired_distance = 100
=== 
k_p = 1.2
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       error = desired_distance - current_distance
=== 
       velocity = -k_p * error
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
=== 
   utime.sleep(0.01)
=== 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
desired_distance = 100
=== 
k_p = 1.2
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       error = desired_distance - current_distance
=== 
       velocity = -k_p * error
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
=== 
   utime.sleep(0.01)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_vC4DaUGQC9FuDQ5e6UqsXu3L', 'output': '\r\n=== \nimport hub,utime,motor_pair,distance_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \ndesired_distance = 100\r\n=== \nk_p = 1.2\r\n=== \nwhile True:\r\n=== \n   current_distance = distance_sensor.distance(port.D)\r\n=== \n   if current_distance == -1:\r\n=== \n       continue\r\n=== \n   else:\r\n=== \n       error = desired_distance - current_distance\r\n=== \n       velocity = -k_p * error\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))\r\n=== \n   utime.sleep(0.01)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot react correctly to the moving wall now?"
}
ChatGPT: Hey Human, Did the robot react correctly to the moving wall now?
Submitting tool outputs: [{'tool_call_id': 'call_n7UneBOgIAue7dNZt2QtvI0v', 'output': 'nothing happened'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,motor_pair,distance_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\ndesired_distance = 100\nk_p = 2.0\nwhile True:\n    current_distance = distance_sensor.distance(port.D)\n    if current_distance == -1:\n        continue\n    else:\n        error = desired_distance - current_distance\n        velocity = -k_p * error\n        motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))\n    utime.sleep(0.01)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,motor_pair,distance_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
desired_distance = 100
k_p = 2.0
while True:
   current_distance = distance_sensor.distance(port.D)
   if current_distance == -1:
       continue
   else:
       error = desired_distance - current_distance
       velocity = -k_p * error
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
   utime.sleep(0.01)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
desired_distance = 100
=== 
k_p = 2.0
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       error = desired_distance - current_distance
=== 
       velocity = -k_p * error
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
=== 
   utime.sleep(0.01)
=== 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
desired_distance = 100
=== 
k_p = 2.0
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       error = desired_distance - current_distance
=== 
       velocity = -k_p * error
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
=== 
   utime.sleep(0.01)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_iEkYA3UcLNLSNccrQFiI4nNP', 'output': '\r\n=== \nimport hub,utime,motor_pair,distance_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \ndesired_distance = 100\r\n=== \nk_p = 2.0\r\n=== \nwhile True:\r\n=== \n   current_distance = distance_sensor.distance(port.D)\r\n=== \n   if current_distance == -1:\r\n=== \n       continue\r\n=== \n   else:\r\n=== \n       error = desired_distance - current_distance\r\n=== \n       velocity = -k_p * error\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))\r\n=== \n   utime.sleep(0.01)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot react to the moving wall now?"
}
ChatGPT: Hey Human, Did the robot react to the moving wall now?
Submitting tool outputs: [{'tool_call_id': 'call_t8WzCJd8haWknRly2tDB9C2e', 'output': 'nothing happened'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,motor_pair,distance_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\ndesired_distance = 100\nk_p = 5.0\nwhile True:\n    current_distance = distance_sensor.distance(port.D)\n    if current_distance == -1:\n        continue\n    else:\n        error = desired_distance - current_distance\n        velocity = -k_p * error\n        if velocity > 0:\n            velocity = max(velocity, 50)\n        else:\n            velocity = min(velocity, -50)\n        motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))\n    utime.sleep(0.01)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import hub,utime,motor_pair,distance_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
desired_distance = 100
k_p = 5.0
while True:
   current_distance = distance_sensor.distance(port.D)
   if current_distance == -1:
       continue
   else:
       error = desired_distance - current_distance
       velocity = -k_p * error
       if velocity > 0:
           velocity = max(velocity, 50)
       else:
           velocity = min(velocity, -50)
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
   utime.sleep(0.01)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
desired_distance = 100
=== 
k_p = 5.0
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       error = desired_distance - current_distance
=== 
       velocity = -k_p * error
=== 
       if velocity > 0:
=== 
           velocity = max(velocity, 50)
=== 
       else:
=== 
           velocity = min(velocity, -50)
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
=== 
   utime.sleep(0.01)
=== 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
desired_distance = 100
=== 
k_p = 5.0
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       error = desired_distance - current_distance
=== 
       velocity = -k_p * error
=== 
       if velocity > 0:
=== 
           velocity = max(velocity, 50)
=== 
       else:
=== 
           velocity = min(velocity, -50)
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
=== 
   utime.sleep(0.01)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_MAIGhhSW9jgG2j9VnhbhjXx5', 'output': '\r\n=== \nimport hub,utime,motor_pair,distance_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \ndesired_distance = 100\r\n=== \nk_p = 5.0\r\n=== \nwhile True:\r\n=== \n   current_distance = distance_sensor.distance(port.D)\r\n=== \n   if current_distance == -1:\r\n=== \n       continue\r\n=== \n   else:\r\n=== \n       error = desired_distance - current_distance\r\n=== \n       velocity = -k_p * error\r\n=== \n       if velocity > 0:\r\n=== \n           velocity = max(velocity, 50)\r\n=== \n       else:\r\n=== \n           velocity = min(velocity, -50)\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))\r\n=== \n   utime.sleep(0.01)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Was there a change in the robot's reaction to the moving wall now?"
}
ChatGPT: Hey Human, Was there a change in the robot's reaction to the moving wall now?
Submitting tool outputs: [{'tool_call_id': 'call_OxJwvhBNUZ5wmg4HfariH33c', 'output': 'yes that time it worked great, please run it again so i can take a video of it'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import hub,utime,motor_pair,distance_sensor\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\ndesired_distance = 100\nk_p = 5.0\nwhile True:\n    current_distance = distance_sensor.distance(port.D)\n    if current_distance == -1:\n        continue\n    else:\n        error = desired_distance - current_distance\n        velocity = -k_p * error\n        if velocity > 0:\n            velocity = max(velocity, 50)\n        else:\n            velocity = min(velocity, -50)\n        motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))\n    utime.sleep(0.01)",
  "runtime": "15"
}
============================ RUNNING CODE (15 seconds) ============================
import hub,utime,motor_pair,distance_sensor
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
desired_distance = 100
k_p = 5.0
while True:
   current_distance = distance_sensor.distance(port.D)
   if current_distance == -1:
       continue
   else:
       error = desired_distance - current_distance
       velocity = -k_p * error
       if velocity > 0:
           velocity = max(velocity, 50)
       else:
           velocity = min(velocity, -50)
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
   utime.sleep(0.01)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
desired_distance = 100
=== 
k_p = 5.0
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       error = desired_distance - current_distance
=== 
       velocity = -k_p * error
=== 
       if velocity > 0:
=== 
           velocity = max(velocity, 50)
=== 
       else:
=== 
           velocity = min(velocity, -50)
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
=== 
   utime.sleep(0.01)
=== 


=== 
import hub,utime,motor_pair,distance_sensor
=== 
from hub import port
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 
desired_distance = 100
=== 
k_p = 5.0
=== 
while True:
=== 
   current_distance = distance_sensor.distance(port.D)
=== 
   if current_distance == -1:
=== 
       continue
=== 
   else:
=== 
       error = desired_distance - current_distance
=== 
       velocity = -k_p * error
=== 
       if velocity > 0:
=== 
           velocity = max(velocity, 50)
=== 
       else:
=== 
           velocity = min(velocity, -50)
=== 
       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))
=== 
   utime.sleep(0.01)
=== 

 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
 - Status: Line: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_JatpwvCZTPtlF2OM7CL9wMjh', 'output': '\r\n=== \nimport hub,utime,motor_pair,distance_sensor\r\n=== \nfrom hub import port\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \ndesired_distance = 100\r\n=== \nk_p = 5.0\r\n=== \nwhile True:\r\n=== \n   current_distance = distance_sensor.distance(port.D)\r\n=== \n   if current_distance == -1:\r\n=== \n       continue\r\n=== \n   else:\r\n=== \n       error = desired_distance - current_distance\r\n=== \n       velocity = -k_p * error\r\n=== \n       if velocity > 0:\r\n=== \n           velocity = max(velocity, 50)\r\n=== \n       else:\r\n=== \n           velocity = min(velocity, -50)\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(velocity))\r\n=== \n   utime.sleep(0.01)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-13 11:01:15

 - Status: THREAD_ID: thread_iDgsmfo6JSD7jKLJJVaGvaBS
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_5BwFbxNiUsdPFz4T25GcWwDG', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n for i in range(2): \n     motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \n     motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) \n     motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \n     motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200)",
"runtime": "30"
}
============================ RUNNING CODE (30 seconds) ============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
for i in range(2): 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
for i in range(2): 
=== 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
=== 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) 
=== 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
=== 
    motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_orBnGxHNAjSqdKcq7lg7ZKjK', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nfor i in range(2): \r\n=== \n    motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \r\n=== \n    motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) \r\n=== \n    motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \r\n=== \n    motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move as expected?"
}
ChatGPT: Hey Human, Did the robot move as expected?
Submitting tool outputs: [{'tool_call_id': 'call_JTR1fzjNezQBDyUqFVjFvotu', 'output': 'no, try awaiting the motor calls'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n for i in range(2): \n     await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \n     await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) \n     await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \n     await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200)",
"runtime": "30"
}
============================ RUNNING CODE (30 seconds) ============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
for i in range(2): 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
Traceback (most recent call last):
  File "<stdin>", line 7, in <module>
SyntaxError: 'await' outside function
>>> 
>>> 

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
for i in range(2): 
=== 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
=== 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) 
=== 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
=== 
    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_MvlFkwUtXk0eE9p6oXjaf3d3', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nfor i in range(2): \r\n=== \n    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \r\n=== \n    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) \r\n=== \n    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \r\n=== \n    await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move as expected?"
}
ChatGPT: Hey Human, Did the robot move as expected?
Submitting tool outputs: [{'tool_call_id': 'call_JeeFlErkDuSRgRJq94GdEtZw', 'output': 'nothing happened, try doing it inside of an async main function'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n async def main(): \n     motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n     for i in range(2): \n         await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \n         await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) \n         await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \n         await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200) \n main()",
"runtime": "30"
}
============================ RUNNING CODE (30 seconds) ============================
import motor_pair 
from hub import port 
async def main(): 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
    for i in range(2): 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200) 
main()
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
<generator object 'main' at 20018220>
>>> 
>>> 

=== 
import motor_pair 
=== 
from hub import port 
=== 
async def main(): 
=== 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
    for i in range(2): 
=== 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
=== 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) 
=== 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
=== 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200) 
=== 
main()
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_RRBBGvuzYJ3nRY285QrzDXrj', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nasync def main(): \r\n=== \n    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n    for i in range(2): \r\n=== \n        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \r\n=== \n        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) \r\n=== \n        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \r\n=== \n        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200) \r\n=== \nmain()\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move as expected?"
}
ChatGPT: Hey Human, Did the robot move as expected?
Submitting tool outputs: [{'tool_call_id': 'call_6vmK4SF9GJmbXzaRiwZaTgIo', 'output': 'no, try using runloop'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "runloop"
}
ChatGPT: I am querying documentation for runloop
{'name': 'runloop', 'description': 'The runloop module contains all functions and constants to use the Runloop. To effectively use awaitable code with the flexibility to run commands either concurrently or sequentially, you must run your code in an asynchronous function using a run loop. The runloop module controls the run loop on the Hub, and lets you run asynchronous functions with its run() function. An asynchronous function, also known as a coroutine, is an awaitable that uses the async keyword before the function definition. The convention is to name the coroutine containing your main program main(). In the body of a coroutine, you can use the await keyword before calling an awaitable command. This pauses the coroutine until the command completes. Without the keyword, the program immediately continues to the next line of code in the coroutine. You can still use regular (not awaitable) code inside the coroutine. However, doing so will always pause or block the whole program until the command completes.', 'initialization': 'none', 'required imports': 'import runloop', 'function': [{'name': 'run', 'description': 'Start any number of parallel async functions. This is the function you should use to create programs with a similar structure to Word Blocks.', 'syntax': 'runloop.run(some_async_function())', 'parameters': 'none', 'returns': 'none', 'example': 'import runloop\r\nasync def main():\r\n    # Write your program here.\r\n        runloop.run(main())'}, {'name': 'sleep', 'description': 'Pause the execution of the application for any amount of milliseconds.', 'syntax': 'await runloop.sleep_ms(10000)', 'parameters': 'time in milliseconds', 'returns': 'none', 'example': ["from hub import light_matrix\r\nimport runloop\r\nasync def main():\r\n    light_matrix.write('Hi!')\r\n    # Wait for ten seconds \r\n    await runloop.sleep_ms(10000)\r\n    light_matrix.write('Are you still here?')                \r\nrunloop.run(main())", 'import motor\r\nimport runloop\r\nfrom hub import port\r\n async def main():\r\n  # Run two motors on ports A and B for 360 degrees at 720 degrees per second.\r\n  # The motors run after each other.\r\n  await motor.run_for_degrees(port.A, 360, 720)\r\n  await motor.run_for_degrees(port.B, 360, 720)\r\nrunloop.run(main())']}]}
Submitting tool outputs: [{'tool_call_id': 'call_HuuSDcdh35YVvC2qwnVyEHEM', 'output': '{"name": "runloop", "description": "The runloop module contains all functions and constants to use the Runloop. To effectively use awaitable code with the flexibility to run commands either concurrently or sequentially, you must run your code in an asynchronous function using a run loop. The runloop module controls the run loop on the Hub, and lets you run asynchronous functions with its run() function. An asynchronous function, also known as a coroutine, is an awaitable that uses the async keyword before the function definition. The convention is to name the coroutine containing your main program main(). In the body of a coroutine, you can use the await keyword before calling an awaitable command. This pauses the coroutine until the command completes. Without the keyword, the program immediately continues to the next line of code in the coroutine. You can still use regular (not awaitable) code inside the coroutine. However, doing so will always pause or block the whole program until the command completes.", "initialization": "none", "required imports": "import runloop", "function": [{"name": "run", "description": "Start any number of parallel async functions. This is the function you should use to create programs with a similar structure to Word Blocks.", "syntax": "runloop.run(some_async_function())", "parameters": "none", "returns": "none", "example": "import runloop\\r\\nasync def main():\\r\\n    # Write your program here.\\r\\n        runloop.run(main())"}, {"name": "sleep", "description": "Pause the execution of the application for any amount of milliseconds.", "syntax": "await runloop.sleep_ms(10000)", "parameters": "time in milliseconds", "returns": "none", "example": ["from hub import light_matrix\\r\\nimport runloop\\r\\nasync def main():\\r\\n    light_matrix.write(\'Hi!\')\\r\\n    # Wait for ten seconds \\r\\n    await runloop.sleep_ms(10000)\\r\\n    light_matrix.write(\'Are you still here?\')                \\r\\nrunloop.run(main())", "import motor\\r\\nimport runloop\\r\\nfrom hub import port\\r\\n async def main():\\r\\n  # Run two motors on ports A and B for 360 degrees at 720 degrees per second.\\r\\n  # The motors run after each other.\\r\\n  await motor.run_for_degrees(port.A, 360, 720)\\r\\n  await motor.run_for_degrees(port.B, 360, 720)\\r\\nrunloop.run(main())"]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n import runloop \n async def main(): \n     motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n     for i in range(2): \n         await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \n         await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) \n         await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) \n         await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200) \n runloop.run(main())",
"runtime": "30"
}
============================ RUNNING CODE (30 seconds) ============================
import motor_pair 
from hub import port 
import runloop 
async def main(): 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
    for i in range(2): 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200) 
runloop.run(main())
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import motor_pair 
=== 
from hub import port 
=== 
import runloop 
=== 
async def main(): 
=== 
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
    for i in range(2): 
=== 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
=== 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, 100, velocity=200) 
=== 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 2000, 0, velocity=200) 
=== 
        await motor_pair.move_for_degrees(motor_pair.PAIR_1, 1000, -100, velocity=200) 
=== 
runloop.run(main())
=== 

 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-13 11:16:20

 - Status: THREAD_ID: thread_p9K1p8KADjwTsfB33kq80jd6
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which ports are the motors connected to?"
}
ChatGPT: Hey Human, Which ports are the motors connected to?
Submitting tool outputs: [{'tool_call_id': 'call_XAkGMRj4F4W7nbJJahCjCymf', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_N4bXpXnjHxUNBFJson3uROg8', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)",
"runtime": "2"
}
============================ RUNNING CODE (2 seconds) =============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_1L1XiAzvK4Qbe00PeMiS9Gks', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move_for_degrees(motor_pair.PAIR_1, 360, 0, velocity=200)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward?"
}
ChatGPT: Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_wbz4EoQ7OPcMHmFpLZQakrht', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-13 11:17:21

 - Status: THREAD_ID: thread_Ho2nlZ6p6fOfouz6fpySb2iM
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "print('hello world')",
  "runtime": "1"
}
============================ RUNNING CODE (1 seconds) =============================
print('hello world')
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
hello world
>>> 
>>> 

=== 
print('hello world')
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_cILOtrmLINzBCDd4HdVudSAG', 'output': "\r\n=== \nprint('hello world')\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the print statement execute successfully?"
}
ChatGPT: Hey Human, Did the print statement execute successfully?
Submitting tool outputs: [{'tool_call_id': 'call_1lxmt8BkSN49UB1BhoPiWwkI', 'output': 'no'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "print('hello world')",
  "runtime": "1"
}
============================ RUNNING CODE (1 seconds) =============================
print('hello world')
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
hello world
>>> 
>>> 

=== 
print('hello world')
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_5x4WchpLshwlWpYigyCAy9mM', 'output': "\r\n=== \nprint('hello world')\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the print statement execute successfully?"
}
ChatGPT: Hey Human, Did the print statement execute successfully?
Submitting tool outputs: [{'tool_call_id': 'call_fvQmHAZNPBQicZ5SxLLIv12o', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-13 11:18:57

 - Status: THREAD_ID: thread_JrzbQZ0hGMC5hsROTI0erT04
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
============================ RUNNING CODE (1 seconds) =============================
print('hello world')
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
hello world
>>> 
>>> 

=== 
print('hello world')
=== 


=== 
print('hello world')
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Gcgk0PFaDgIy3axzoNRpkdFi', 'output': "\r\n=== \nprint('hello world')\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the print command work correctly?"
}
ChatGPT: Hey Human, Did the print command work correctly?
Submitting tool outputs: [{'tool_call_id': 'call_qXTit0Olt7Gxa53IRMyytBLr', 'output': 'try printing it in a loop 10 times'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "for i in range(10): \n    print('hello world')",
"runtime": "1"
}
============================ RUNNING CODE (1 seconds) =============================
for i in range(10): 
   print('hello world')
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
hello world
hello world
hello world
hello world
hello world
hello world
hello world
hello world
hello world
hello world
>>> 
>>> 

=== 
for i in range(10): 
=== 
   print('hello world')
=== 


=== 
for i in range(10): 
=== 
   print('hello world')
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_G2F8jBx2ksN2R7oxljX3lABY', 'output': "\r\n=== \nfor i in range(10): \r\n=== \n   print('hello world')\r\n=== \n"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the print command work correctly?"
}
ChatGPT: Hey Human, Did the print command work correctly?
Submitting tool outputs: [{'tool_call_id': 'call_3JW00CeJPxSxUZEvZJkq5FuF', 'output': 'try adding time.sleep in between'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "time"
}
ChatGPT: I am querying documentation for time
No available information on time. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help.
Submitting tool outputs: [{'tool_call_id': 'call_Au5iTfKPK6O3pT5TObBceWX6', 'output': '"No available information on time. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "How do I import and use the time library in Micro
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-13 11:32:22

 - Status: THREAD_ID: thread_KkDCgXfHIroIXQkog0KMbdmB
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which ports are the left and right motors connected to?"
}
ChatGPT: Hey Human, Which ports are the left and right motors connected to?
Submitting tool outputs: [{'tool_call_id': 'call_8sGgUShFwPzydJzUxazJz2q3', 'output': 'a and b'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_yjpBCE7QJCOHm1W7Vns9AQtz', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "5"
}
============================ RUNNING CODE (5 seconds) =============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
>>> 
>>> 

=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move(motor_pair.PAIR_1, 0)
=== 


=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
motor_pair.move(motor_pair.PAIR_1, 0)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_kWaYjE1zPc9LgocSe9j7i0Lz', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nmotor_pair.move(motor_pair.PAIR_1, 0)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move?" 
}
ChatGPT: Hey Human, Did the robot move?
Submitting tool outputs: [{'tool_call_id': 'call_JKhzthD2Zu1aDfNDtrGC7zWz', 'output': 'yes it did'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Which port is the distance sensor connected to?"
}
ChatGPT: Hey Human, Which port is the distance sensor connected to?
Submitting tool outputs: [{'tool_call_id': 'call_in4HKRJLgQeIsGyd2Kv1CoN1', 'output': 'port d'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
ChatGPT: I am querying documentation for distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_4dgdo1Lgmiym8HqWGtkOT102', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while distance_sensor.distance(port.D) > 100: \n     motor_pair.move(motor_pair.PAIR_1, 0) \n motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import distance_sensor 
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while distance_sensor.distance(port.D) > 100: 
    motor_pair.move(motor_pair.PAIR_1, 0) 
motor_pair.stop(motor_pair.PAIR_1)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import distance_sensor 
=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
while distance_sensor.distance(port.D) > 100: 
=== 
    motor_pair.move(motor_pair.PAIR_1, 0) 
=== 
motor_pair.stop(motor_pair.PAIR_1)
=== 


=== 
import distance_sensor 
=== 
import motor_pair 
=== 
from hub import port 
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 
while distance_sensor.distance(port.D) > 100: 
=== 
    motor_pair.move(motor_pair.PAIR_1, 0) 
=== 
motor_pair.stop(motor_pair.PAIR_1)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_MOqw6jJtFy18G8qWag42BLte', 'output': '\r\n=== \nimport distance_sensor \r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \nwhile distance_sensor.distance(port.D) > 100: \r\n=== \n    motor_pair.move(motor_pair.PAIR_1, 0) \r\n=== \nmotor_pair.stop(motor_pair.PAIR_1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move and stop before hitting the wall?"
}
ChatGPT: Hey Human, Did the robot move and stop before hitting the wall?
Submitting tool outputs: [{'tool_call_id': 'call_yMc56MBroMLAj1shAyu7cJ2m', 'output': "no it didn't, it only moved forward"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     distance = distance_sensor.distance(port.D) \n     print(distance) \n     if distance < 100: \n         break \n     motor_pair.move(motor_pair.PAIR_1, 0) \n motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "15"
}
============================ RUNNING CODE (15 seconds) ============================
import distance_sensor 
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    distance = distance_sensor.distance(port.D) 
    print(distance) 
    if distance < 100: 
        break 
    motor_pair.move(motor_pair.PAIR_1, 0) 
motor_pair.stop(motor_pair.PAIR_1)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-13 11:35:51

 - Status: THREAD_ID: thread_Z0RFOuir31mkiz5qeAddAJU7
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_IAes71Iw2k93U2ee5qahztMI', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "distance_sensor"
}
ChatGPT: I am querying documentation for distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_hVUQdtPDW8tkveBKZC3aBkCj', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n import distance_sensor \n import time \n \n desired_distance = 100 \n speed = 200 \n variance = 50 \n \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n \n while True: \n     current_distance = distance_sensor.distance(port.D) \n     if  current_distance > desired_distance + variance: \n         motor_pair.move(motor_pair.PAIR_1, 0, velocity=speed) \n     elif current_distance < desired_distance - variance: \n         motor_pair.move(motor_pair.PAIR_1, 0, velocity=-speed) \n     else: \n         motor_pair.stop(motor_pair.PAIR_1) \n     time.sleep(0.1)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair 
from hub import port 
import distance_sensor 
import time 

desired_distance = 100 
speed = 200 
variance = 50 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

while True: 
    current_distance = distance_sensor.distance(port.D) 
    if  current_distance > desired_distance + variance: 
        motor_pair.move(motor_pair.PAIR_1, 0, velocity=speed) 
    elif current_distance < desired_distance - variance: 
        motor_pair.move(motor_pair.PAIR_1, 0, velocity=-speed) 
    else: 
        motor_pair.stop(motor_pair.PAIR_1) 
    time.sleep(0.1)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
Traceback (most recent call last):
  File "<stdin>", line 12, in <module>
ValueError: PORTA is assigned to PAIR_1
>>> 
>>> 

=== 
import motor_pair 
=== 
from hub import port 
=== 
import distance_sensor 
=== 
import time 
=== 

=== 
desired_distance = 100 
=== 
speed = 200 
=== 
variance = 50 
=== 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 

=== 
while True: 
=== 
    current_distance = distance_sensor.distance(port.D) 
=== 
    if  current_distance > desired_distance + variance: 
=== 
        motor_pair.move(motor_pair.PAIR_1, 0, velocity=speed) 
=== 
    elif current_distance < desired_distance - variance: 
=== 
        motor_pair.move(motor_pair.PAIR_1, 0, velocity=-speed) 
=== 
    else: 
=== 
        motor_pair.stop(motor_pair.PAIR_1) 
=== 
    time.sleep(0.1)
=== 


=== 
import motor_pair 
=== 
from hub import port 
=== 
import distance_sensor 
=== 
import time 
=== 

=== 
desired_distance = 100 
=== 
speed = 200 
=== 
variance = 50 
=== 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 

=== 
while True: 
=== 
    current_distance = distance_sensor.distance(port.D) 
=== 
    if  current_distance > desired_distance + variance: 
=== 
        motor_pair.move(motor_pair.PAIR_1, 0, velocity=speed) 
=== 
    elif current_distance < desired_distance - variance: 
=== 
        motor_pair.move(motor_pair.PAIR_1, 0, velocity=-speed) 
=== 
    else: 
=== 
        motor_pair.stop(motor_pair.PAIR_1) 
=== 
    time.sleep(0.1)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_kaDGij8mUZk32nbzUzrFJ9dU', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport distance_sensor \r\n=== \nimport time \r\n=== \n\r\n=== \ndesired_distance = 100 \r\n=== \nspeed = 200 \r\n=== \nvariance = 50 \r\n=== \n\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n\r\n=== \nwhile True: \r\n=== \n    current_distance = distance_sensor.distance(port.D) \r\n=== \n    if  current_distance > desired_distance + variance: \r\n=== \n        motor_pair.move(motor_pair.PAIR_1, 0, velocity=speed) \r\n=== \n    elif current_distance < desired_distance - variance: \r\n=== \n        motor_pair.move(motor_pair.PAIR_1, 0, velocity=-speed) \r\n=== \n    else: \r\n=== \n        motor_pair.stop(motor_pair.PAIR_1) \r\n=== \n    time.sleep(0.1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{ "prompt": "Did the robot move in relation to the wall as expected?" }
ChatGPT: Hey Human, Did the robot move in relation to the wall as expected?
Submitting tool outputs: [{'tool_call_id': 'call_QzfTj2BnoGhD6ZOaRAmUEtj0', 'output': 'no it didnt move at all'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import distance_sensor \n from hub import port \n distance_sensor.distance(port.D)",
  "runtime": "1"
}
============================ RUNNING CODE (1 seconds) =============================
import distance_sensor 
from hub import port 
distance_sensor.distance(port.D)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
-1
>>> 
>>> 

=== 
import distance_sensor 
=== 
from hub import port 
=== 
distance_sensor.distance(port.D)
=== 


=== 
import distance_sensor 
=== 
from hub import port 
=== 
distance_sensor.distance(port.D)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_vgEjZndaR233RuOYm9IikoKm', 'output': '\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \ndistance_sensor.distance(port.D)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{ "prompt": "What was the displayed output? This will tell us the current reading from the distance sensor in millimeters." }
ChatGPT: Hey Human, What was the displayed output? This will tell us the current reading from the distance sensor in millimeters.
Submitting tool outputs: [{'tool_call_id': 'call_T7ugpbJnbML858jIjJ6ymHXJ', 'output': 'try running this in a loop so i can see it for longer'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import distance_sensor \n from hub import port \n import time \n \n for i in range(10): \n     print(distance_sensor.distance(port.D)) \n     time.sleep(1)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import distance_sensor 
from hub import port 
import time 

for i in range(10): 
    print(distance_sensor.distance(port.D)) 
    time.sleep(1)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
-1


=== 
import distance_sensor 
=== 
from hub import port 
=== 
import time 
=== 

=== 
for i in range(10): 
=== 
    print(distance_sensor.distance(port.D)) 
=== 
    time.sleep(1)
=== 


=== 
import distance_sensor 
=== 
from hub import port 
=== 
import time 
=== 

=== 
for i in range(10): 
=== 
    print(distance_sensor.distance(port.D)) 
=== 
    time.sleep(1)
=== 

-1
-1
-1
-1
-1
-1
-1
-1
191
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_gtK8HBwrsOEeBXRH1NfoQLVL', 'output': '\r\n=== \nimport distance_sensor \r\n=== \nfrom hub import port \r\n=== \nimport time \r\n=== \n\r\n=== \nfor i in range(10): \r\n=== \n    print(distance_sensor.distance(port.D)) \r\n=== \n    time.sleep(1)\r\n=== \n\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n191'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{ "prompt": "Did the measured distance shown on the console changed when you moved your hand in front of the robot?" }
ChatGPT: Hey Human, Did the measured distance shown on the console changed when you moved your hand in front of the robot?
Submitting tool outputs: [{'tool_call_id': 'call_B2HNErTCDjykIpoDtnKyGkGx', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n import time \n \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n \n motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) \n time.sleep(2) \n motor_pair.stop(motor_pair.PAIR_1)",
  "runtime": "3"
}
============================ RUNNING CODE (3 seconds) =============================
import motor_pair 
from hub import port 
import time 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
time.sleep(2) 
motor_pair.stop(motor_pair.PAIR_1)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import motor_pair 
=== 
from hub import port 
=== 
import time 
=== 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 

=== 
motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
=== 
time.sleep(2) 
=== 
motor_pair.stop(motor_pair.PAIR_1)
=== 


=== 
import motor_pair 
=== 
from hub import port 
=== 
import time 
=== 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 

=== 
motor_pair.move(motor_pair.PAIR_1, 0, velocity=200) 
=== 
time.sleep(2) 
=== 
motor_pair.stop(motor_pair.PAIR_1)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_N7jArYSYP67l3qzWsmdLSZPM', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport time \r\n=== \n\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n\r\n=== \nmotor_pair.move(motor_pair.PAIR_1, 0, velocity=200) \r\n=== \ntime.sleep(2) \r\n=== \nmotor_pair.stop(motor_pair.PAIR_1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{ "prompt": "Did the robot move forward?" }
ChatGPT: Hey Human, Did the robot move forward?
Submitting tool outputs: [{'tool_call_id': 'call_dO4E83yxnGWASLgRbNVxYHBs', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n import distance_sensor \n import time \n \n desired_distance = 100 \n max_speed = 500 \n \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n \n for i in range(100): \n     current_distance = distance_sensor.distance(port.D) \n     error = desired_distance - current_distance \n     speed = max_speed * error / desired_distance \n     motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(speed)) \n     time.sleep(0.1) \n \n motor_pair.stop(motor_pair.PAIR_1)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair 
from hub import port 
import distance_sensor 
import time 

desired_distance = 100 
max_speed = 500 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

for i in range(100): 
    current_distance = distance_sensor.distance(port.D) 
    error = desired_distance - current_distance 
    speed = max_speed * error / desired_distance 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(speed)) 
    time.sleep(0.1) 

motor_pair.stop(motor_pair.PAIR_1)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import motor_pair 
=== 
from hub import port 
=== 
import distance_sensor 
=== 
import time 
=== 

=== 
desired_distance = 100 
=== 
max_speed = 500 
=== 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 

=== 
for i in range(100): 
=== 
    current_distance = distance_sensor.distance(port.D) 
=== 
    error = desired_distance - current_distance 
=== 
    speed = max_speed * error / desired_distance 
=== 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(speed)) 
=== 
    time.sleep(0.1) 
=== 

=== 
motor_pair.stop(motor_pair.PAIR_1)
=== 


=== 
import motor_pair 
=== 
from hub import port 
=== 
import distance_sensor 
=== 
import time 
=== 

=== 
desired_distance = 100 
=== 
max_speed = 500 
=== 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 

=== 
for i in range(100): 
=== 
    current_distance = distance_sensor.distance(port.D) 
=== 
    error = desired_distance - current_distance 
=== 
    speed = max_speed * error / desired_distance 
=== 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(speed)) 
=== 
    time.sleep(0.1) 
=== 

=== 
motor_pair.stop(motor_pair.PAIR_1)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_DtKIz2qCoOI9X351P7eZzGOx', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport distance_sensor \r\n=== \nimport time \r\n=== \n\r\n=== \ndesired_distance = 100 \r\n=== \nmax_speed = 500 \r\n=== \n\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n\r\n=== \nfor i in range(100): \r\n=== \n    current_distance = distance_sensor.distance(port.D) \r\n=== \n    error = desired_distance - current_distance \r\n=== \n    speed = max_speed * error / desired_distance \r\n=== \n    motor_pair.move(motor_pair.PAIR_1, 0, velocity=int(speed)) \r\n=== \n    time.sleep(0.1) \r\n=== \n\r\n=== \nmotor_pair.stop(motor_pair.PAIR_1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{ "prompt": "Did the robot move in relation to the wall as expected?" }
ChatGPT: Hey Human, Did the robot move in relation to the wall as expected?
Submitting tool outputs: [{'tool_call_id': 'call_gjDnN3CerRhbcDJ7LGp3axJd', 'output': 'it went the wrong direction'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n import distance_sensor \n import time \n \n desired_distance = 100 \n max_speed = 500 \n \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n \n for i in range(100): \n     current_distance = distance_sensor.distance(port.D) \n     error = desired_distance - current_distance \n     speed = max_speed * error / desired_distance \n     motor_pair.move(motor_pair.PAIR_1, 0, velocity=-int(speed)) \n     time.sleep(0.1) \n \n motor_pair.stop(motor_pair.PAIR_1)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair 
from hub import port 
import distance_sensor 
import time 

desired_distance = 100 
max_speed = 500 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

for i in range(100): 
    current_distance = distance_sensor.distance(port.D) 
    error = desired_distance - current_distance 
    speed = max_speed * error / desired_distance 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=-int(speed)) 
    time.sleep(0.1) 

motor_pair.stop(motor_pair.PAIR_1)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
import motor_pair 
=== 
from hub import port 
=== 
import distance_sensor 
=== 
import time 
=== 

=== 
desired_distance = 100 
=== 
max_speed = 500 
=== 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 

=== 
for i in range(100): 
=== 
    current_distance = distance_sensor.distance(port.D) 
=== 
    error = desired_distance - current_distance 
=== 
    speed = max_speed * error / desired_distance 
=== 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=-int(speed)) 
=== 
    time.sleep(0.1) 
=== 

=== 
motor_pair.stop(motor_pair.PAIR_1)
=== 


=== 
import motor_pair 
=== 
from hub import port 
=== 
import distance_sensor 
=== 
import time 
=== 

=== 
desired_distance = 100 
=== 
max_speed = 500 
=== 

=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
=== 

=== 
for i in range(100): 
=== 
    current_distance = distance_sensor.distance(port.D) 
=== 
    error = desired_distance - current_distance 
=== 
    speed = max_speed * error / desired_distance 
=== 
    motor_pair.move(motor_pair.PAIR_1, 0, velocity=-int(speed)) 
=== 
    time.sleep(0.1) 
=== 

=== 
motor_pair.stop(motor_pair.PAIR_1)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_BgulNmAmn4drjMNVwytaevll', 'output': '\r\n=== \nimport motor_pair \r\n=== \nfrom hub import port \r\n=== \nimport distance_sensor \r\n=== \nimport time \r\n=== \n\r\n=== \ndesired_distance = 100 \r\n=== \nmax_speed = 500 \r\n=== \n\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \r\n=== \n\r\n=== \nfor i in range(100): \r\n=== \n    current_distance = distance_sensor.distance(port.D) \r\n=== \n    error = desired_distance - current_distance \r\n=== \n    speed = max_speed * error / desired_distance \r\n=== \n    motor_pair.move(motor_pair.PAIR_1, 0, velocity=-int(speed)) \r\n=== \n    time.sleep(0.1) \r\n=== \n\r\n=== \nmotor_pair.stop(motor_pair.PAIR_1)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{ "prompt": "Did the robot move in the correct direction this time?" }
ChatGPT: Hey Human, Did the robot move in the correct direction this time?
Submitting tool outputs: [{'tool_call_id': 'call_MMOsHTEnSliowWx5DB9HlykV', 'output': 'yes it did! express to us how happy the robot is that it worked'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "light_matrix"
}
ChatGPT: I am querying documentation for light_matrix
{'name': 'light_matrix', 'description': 'a class that enables control of built in SPIKE Prime led matrix', 'initialization': 'none', 'required imports': 'from hub import light_matrix', 'function': [{'name': 'clear', 'syntax': 'color_matrix.clear()', 'parameters': 'none', 'returns': 'none'}, {'name': 'set_pixel', 'syntax': 'light_matrix.set_pixel(2,2,100)', 'parameters': [{'name': 'x value', 'description': 'the x position of led on the matrix', 'values': 'integer 0:4'}, {'name': 'y value', 'description': 'the y position of led on the matrix', 'values': 'integer 0:4'}, {'name': 'brightness', 'description': 'the light intensity of the pixel', 'values': 'integer 1:100'}]}, {'name': 'show', 'syntax': 'light_matrix.show(list[int])', 'parameters': [{'name': 'pixel list', 'description': 'a list of length 25 corresponding to each pixel in the 5x5 led matrix', 'values': 'legnth 25 list of integers with values 1:100'}], 'example': '# Create a list with 25 identical intensity values \r\n pixels = [100] * 25 \r\n # Update all pixels to show same intensity \r\n light_matrix.show(pixels)'}, {'name': 'show_image', 'syntax': 'light_matrix.show_image(light_matrix.IMAGE_HAPPY)', 'parameters': [{'name': 'image id', 'description': 'The id of the image to show. The range of available images is 1 to 67. There are consts on the light_matrix module for these.', 'values': 'IMAGE_HEART = 1, IMAGE_HEART_SMALL = 2, IMAGE_HAPPY = 3, IMAGE_SMILE = 4, IMAGE_SAD = 5, IMAGE_CONFUSED = 6, IMAGE_ANGRY = 7, IMAGE_ASLEEP = 8, IMAGE_SURPRISED = 9, IMAGE_SILLY = 10, IMAGE_FABULOUS = 11, IMAGE_MEH = 12, IMAGE_YES = 13, IMAGE_NO = 14'}], 'example': 'from hub import light_matrix\r\n# Show a small heart\r\nlight_matrix.show_image(2)'}, {'name': 'write', 'syntax': 'light_matrix.write(text)', 'parameters': [{'name': 'text', 'description': 'the text to display on the matrix', 'values': 'string'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_JOyl00S2lQHPFb48kCdgDRCT', 'output': '{"name": "light_matrix", "description": "a class that enables control of built in SPIKE Prime led matrix", "initialization": "none", "required imports": "from hub import light_matrix", "function": [{"name": "clear", "syntax": "color_matrix.clear()", "parameters": "none", "returns": "none"}, {"name": "set_pixel", "syntax": "light_matrix.set_pixel(2,2,100)", "parameters": [{"name": "x value", "description": "the x position of led on the matrix", "values": "integer 0:4"}, {"name": "y value", "description": "the y position of led on the matrix", "values": "integer 0:4"}, {"name": "brightness", "description": "the light intensity of the pixel", "values": "integer 1:100"}]}, {"name": "show", "syntax": "light_matrix.show(list[int])", "parameters": [{"name": "pixel list", "description": "a list of length 25 corresponding to each pixel in the 5x5 led matrix", "values": "legnth 25 list of integers with values 1:100"}], "example": "# Create a list with 25 identical intensity values \\r\\n pixels = [100] * 25 \\r\\n # Update all pixels to show same intensity \\r\\n light_matrix.show(pixels)"}, {"name": "show_image", "syntax": "light_matrix.show_image(light_matrix.IMAGE_HAPPY)", "parameters": [{"name": "image id", "description": "The id of the image to show. The range of available images is 1 to 67. There are consts on the light_matrix module for these.", "values": "IMAGE_HEART = 1, IMAGE_HEART_SMALL = 2, IMAGE_HAPPY = 3, IMAGE_SMILE = 4, IMAGE_SAD = 5, IMAGE_CONFUSED = 6, IMAGE_ANGRY = 7, IMAGE_ASLEEP = 8, IMAGE_SURPRISED = 9, IMAGE_SILLY = 10, IMAGE_FABULOUS = 11, IMAGE_MEH = 12, IMAGE_YES = 13, IMAGE_NO = 14"}], "example": "from hub import light_matrix\\r\\n# Show a small heart\\r\\nlight_matrix.show_image(2)"}, {"name": "write", "syntax": "light_matrix.write(text)", "parameters": [{"name": "text", "description": "the text to display on the matrix", "values": "string"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import light_matrix \n light_matrix.show_image(light_matrix.IMAGE_HAPPY)",
  "runtime": "2"
}
============================ RUNNING CODE (2 seconds) =============================
from hub import light_matrix 
light_matrix.show_image(light_matrix.IMAGE_HAPPY)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
>>> 
>>> 

=== 
from hub import light_matrix 
=== 
light_matrix.show_image(light_matrix.IMAGE_HAPPY)
=== 


=== 
from hub import light_matrix 
=== 
light_matrix.show_image(light_matrix.IMAGE_HAPPY)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_9DI6NUQK55yJep895XZ6cMfz', 'output': '\r\n=== \nfrom hub import light_matrix \r\n=== \nlight_matrix.show_image(light_matrix.IMAGE_HAPPY)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import light_matrix \n light_matrix.set_pixel(2, 2, 100)",
  "runtime": "2"
}
============================ RUNNING CODE (2 seconds) =============================
from hub import light_matrix 
light_matrix.set_pixel(2, 2, 100)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl                  
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
>>> 
>>> 

=== 
from hub import light_matrix 
=== 
light_matrix.set_pixel(2, 2, 100)
=== 


=== 
from hub import light_matrix 
=== 
light_matrix.set_pixel(2, 2, 100)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_gIuKYo2XPT5erKKsU5MkWhsl', 'output': '\r\n=== \nfrom hub import light_matrix \r\n=== \nlight_matrix.set_pixel(2, 2, 100)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{ "prompt": "Did a single pixel in the center of the Light Matrix light up?" }
ChatGPT: Hey Human, Did a single pixel in the center of the Light Matrix light up?
Submitting tool outputs: [{'tool_call_id': 'call_YFxCcuKfk2G8txRoQBAoiTaj', 'output': 'no but its okay'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-13 11:44:15

 - Status: THREAD_ID: thread_UtsLacDYueRXUmRbKq0NAIGL
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_KhLunqAXP3JvrkjKygpEmcQO', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motion_sensor"
}
ChatGPT: I am querying documentation for motion_sensor
{'name': 'motion_sensor', 'description': 'a class that allows access to spike prime motion sensors', 'initialization': 'none', 'required imports': 'from hub import motion_sensor', 'function': [{'name': 'acceleration', 'syntax': 'motion_sensor.acceleration()', 'parameters': 'none', 'returns': {'name': 'a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G', 'values': '[int, int, int]'}}, {'name': 'tilt angles', 'syntax': 'motion_sensor.tilt_angles()', 'parameters': 'none', 'returns': {'name': 'a tuple containing yaw pitch and roll values as integers. Values are decidegrees', 'values': '[int, int, int]'}}, {'name': 'angular velocity', 'syntax': 'motion_sensor.angular_velocity()', 'parameters': 'none', 'returns': {'name': 'a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second', 'values': '[int, int, int]'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_0Brc2LvYlxHftrKW1bEpFga9', 'output': '{"name": "motion_sensor", "description": "a class that allows access to spike prime motion sensors", "initialization": "none", "required imports": "from hub import motion_sensor", "function": [{"name": "acceleration", "syntax": "motion_sensor.acceleration()", "parameters": "none", "returns": {"name": "a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G", "values": "[int, int, int]"}}, {"name": "tilt angles", "syntax": "motion_sensor.tilt_angles()", "parameters": "none", "returns": {"name": "a tuple containing yaw pitch and roll values as integers. Values are decidegrees", "values": "[int, int, int]"}}, {"name": "angular velocity", "syntax": "motion_sensor.angular_velocity()", "parameters": "none", "returns": {"name": "a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second", "values": "[int, int, int]"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "from hub import motion_sensor \n from hub import port \n import motor_pair \n \
\n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n \
\n while True: \n     x_acceleration, _, _ = motion_sensor.acceleration() \n     if x_acceleration > 50: \n         motor_pair.move_tank(motor_pair.PAIR_1, 20, -20) \n     elif x_acceleration < -50: \n         motor_pair.move_tank(motor_pair.PAIR_1, -20, 20) \n     else: \n         motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "10"
}
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-13 11:47:24

 - Status: THREAD_ID: thread_OBj9Vi5Ol6qNPlmIBgl6WRns
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_NMouIQL2YGS6PcU04pjhewUA', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motion_sensor"
}
ChatGPT: I am querying documentation for motion_sensor
{'name': 'motion_sensor', 'description': 'a class that allows access to spike prime motion sensors', 'initialization': 'none', 'required imports': 'from hub import motion_sensor', 'function': [{'name': 'acceleration', 'syntax': 'motion_sensor.acceleration()', 'parameters': 'none', 'returns': {'name': 'a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G', 'values': '[int, int, int]'}}, {'name': 'tilt angles', 'syntax': 'motion_sensor.tilt_angles()', 'parameters': 'none', 'returns': {'name': 'a tuple containing yaw pitch and roll values as integers. Values are decidegrees', 'values': '[int, int, int]'}}, {'name': 'angular velocity', 'syntax': 'motion_sensor.angular_velocity()', 'parameters': 'none', 'returns': {'name': 'a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second', 'values': '[int, int, int]'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_bxElGRLuYgizJ97eVhpu31lI', 'output': '{"name": "motion_sensor", "description": "a class that allows access to spike prime motion sensors", "initialization": "none", "required imports": "from hub import motion_sensor", "function": [{"name": "acceleration", "syntax": "motion_sensor.acceleration()", "parameters": "none", "returns": {"name": "a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G", "values": "[int, int, int]"}}, {"name": "tilt angles", "syntax": "motion_sensor.tilt_angles()", "parameters": "none", "returns": {"name": "a tuple containing yaw pitch and roll values as integers. Values are decidegrees", "values": "[int, int, int]"}}, {"name": "angular velocity", "syntax": "motion_sensor.angular_velocity()", "parameters": "none", "returns": {"name": "a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second", "values": "[int, int, int]"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Start loop\nwhile True:\n    pitch, roll, _ = motion_sensor.tilt_angles()\n    print('Roll: ', roll)\n    if roll > 5:\n        motor_pair.move(motor_pair.PAIR_1, 50)\n    elif roll < -5:\n        motor_pair.move(motor_pair.PAIR_1, -50)\n    else:\n        motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Start loop
while True:
   pitch, roll, _ = motion_sensor.tilt_angles()
   print('Roll: ', roll)
   if roll > 5:
       motor_pair.move(motor_pair.PAIR_1, 50)
   elif roll < -5:
       motor_pair.move(motor_pair.PAIR_1, -50)
   else:
       motor_pair.stop(motor_pair.PAIR_1)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250

=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   if roll > 5:
=== 
       motor_pair.move(motor_pair.PAIR_1, 50)
=== 
   elif roll < -5:
=== 
       motor_pair.move(motor_pair.PAIR_1, -50)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 


=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   if roll > 5:
=== 
       motor_pair.move(motor_pair.PAIR_1, 50)
=== 
   elif roll < -5:
=== 
       motor_pair.move(motor_pair.PAIR_1, -50)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 

Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  279
Roll:  279
Roll:  279
Roll:  279
Roll:  279
Roll:  279
Roll:  281
Roll:  281
Roll:  281
Roll:  281
Roll:  281
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  279
Roll:  279
Roll:  279
Roll:  279
Roll:  279
Roll:  279
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  286
Roll:  286
Roll:  286
Roll:  286
Roll:  286
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  287
Roll:  286
Roll:  286
Roll:  286
Roll:  286
Roll:  286
Roll:  286
Roll:  285
Roll:  285
Roll:  285
Roll:  285
Roll:  285
Roll:  285
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  283
Roll:  283
Roll:  283
Roll:  283
Roll:  283
Roll:  281
Roll:  281
Roll:  281
Roll:  281
Roll:  281
Roll:  281
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  243
Roll:  243
Roll:  243
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  263
Roll:  263
Roll:  263
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  226
Roll:  226
Roll:  226
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
======================================= END =======================================

Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_65iljoZ5TxFaJBhvliV8cSMX', 'output': "\r\n=== \nimport motor_pair\r\n=== \nfrom hub import port, motion_sensor\r\n=== \n\r\n=== \n# Initialize motor pair\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \n\r\n=== \n# Start loop\r\n=== \nwhile True:\r\n=== \n   pitch, roll, _ = motion_sensor.tilt_angles()\r\n=== \n   print('Roll: ', roll)\r\n=== \n   if roll > 5:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, 50)\r\n=== \n   elif roll < -5:\r\n=== \n       motor_pair.move(motor_pair.PAIR_1, -50)\r\n=== \n   else:\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  281\nRoll:  281\nRoll:  281\nRoll:  281\nRoll:  281\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  287\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  285\nRoll:  285\nRoll:  285\nRoll:  285\nRoll:  285\nRoll:  285\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  283\nRoll:  283\nRoll:  283\nRoll:  283\nRoll:  283\nRoll:  281\nRoll:  281\nRoll:  281\nRoll:  281\nRoll:  281\nRoll:  281\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  216\nRoll:  216\nRoll:  216\nRoll:  216\nRoll:  216\nRoll:  216\nRoll:  214\nRoll:  214\nRoll:  214\nRoll:  214\nRoll:  214\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  214\nRoll:  214\nRoll:  214\nRoll:  214\nRoll:  214\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  216\nRoll:  216\nRoll:  216\nRoll:  216\nRoll:  216\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  221\nRoll:  221\nRoll:  221\nRoll:  221\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot react appropriately to the tilt? Did it move forwards when it tilted backwards and vice versa?"
}
ChatGPT: Hey Human, Did the robot react appropriately to the tilt? Did it move forwards when it tilted backwards and vice versa?
Submitting tool outputs: [{'tool_call_id': 'call_G19Hgz72a4OwboEUCgRkejBn', 'output': 'it only moved one motor at a time when it should be moving both'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Start loop\nwhile True:\n    pitch, roll, _ = motion_sensor.tilt_angles()\n    print('Roll: ', roll)\n    if roll > 5:\n        motor_pair.move_tank(motor_pair.PAIR_1, 50, 50)\n    elif roll < -5:\n        motor_pair.move_tank(motor_pair.PAIR_1, -50, -50)\n    else:\n        motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Start loop
while True:
   pitch, roll, _ = motion_sensor.tilt_angles()
   print('Roll: ', roll)
   if roll > 5:
       motor_pair.move_tank(motor_pair.PAIR_1, 50, 50)
   elif roll < -5:
       motor_pair.move_tank(motor_pair.PAIR_1, -50, -50)
   else:
       motor_pair.stop(motor_pair.PAIR_1)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252

=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   if roll > 5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, 50, 50)
=== 
   elif roll < -5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, -50, -50)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 


=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   if roll > 5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, 50, 50)
=== 
   elif roll < -5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, -50, -50)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 

Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  271
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  235
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  237
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  115
Roll:  115
Roll:  115
Roll:  115
Roll:  115
Roll:  115
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  78
Roll:  78
Roll:  78
Roll:  78
Roll:  78
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  74
Roll:  74
Roll:  74
Roll:  74
Roll:  74
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:
47
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:
======================================= END =======================================

Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_RBw1PwJpt8DgQJ82dDBgi8hy', 'output': "\r\n=== \nimport motor_pair\r\n=== \nfrom hub import port, motion_sensor\r\n=== \n\r\n=== \n# Initialize motor pair\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \n\r\n=== \n# Start loop\r\n=== \nwhile True:\r\n=== \n   pitch, roll, _ = motion_sensor.tilt_angles()\r\n=== \n   print('Roll: ', roll)\r\n=== \n   if roll > 5:\r\n=== \n       motor_pair.move_tank(motor_pair.PAIR_1, 50, 50)\r\n=== \n   elif roll < -5:\r\n=== \n       motor_pair.move_tank(motor_pair.PAIR_1, -50, -50)\r\n=== \n   else:\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  271\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  214\nRoll:  214\nRoll:  214\nRoll:  214\nRoll:  214\nRoll:  214\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  220\nRoll:  220\nRoll:  220\nRoll:  220\nRoll:  220\nRoll:  220\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  235\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  237\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  221\nRoll:  221\nRoll:  221\nRoll:  221\nRoll:  221\nRoll:  221\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  216\nRoll:  216\nRoll:  216\nRoll:  216\nRoll:  216\nRoll:  216\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  189\nRoll:  189\nRoll:  189\nRoll:  189\nRoll:  189\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:\n47\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  36\nRoll:  36\nRoll:  36\nRoll:  36\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  22\nRoll:  22\nRoll:  22\nRoll:  22\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  22\nRoll:  22\nRoll:  22\nRoll:  22\nRoll:  22\nRoll:  22\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move both motors simultaneously when it detected a tilt?"
}
ChatGPT: Hey Human, Did the robot move both motors simultaneously when it detected a tilt?
Submitting tool outputs: [{'tool_call_id': 'call_pKuIVvNSIMBGiA0TQSP5DMak', 'output': 'yes, but much too slow'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Start loop\nwhile True:\n    pitch, roll, _ = motion_sensor.tilt_angles()\n    print('Roll: ', roll)\n    if roll > 5:\n        motor_pair.move_tank(motor_pair.PAIR_1, 100, 100)\n    elif roll < -5:\n        motor_pair.move_tank(motor_pair.PAIR_1, -100, -100)\n    else:\n        motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Start loop
while True:
   pitch, roll, _ = motion_sensor.tilt_angles()
   print('Roll: ', roll)
   if roll > 5:
       motor_pair.move_tank(motor_pair.PAIR_1, 100, 100)
   elif roll < -5:
       motor_pair.move_tank(motor_pair.PAIR_1, -100, -100)
   else:
       motor_pair.stop(motor_pair.PAIR_1)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Rol

=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   if roll > 5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, 100, 100)
=== 
   elif roll < -5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, -100, -100)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 


=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   if roll > 5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, 100, 100)
=== 
   elif roll < -5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, -100, -100)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 

l:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  168
Roll:  1
68
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  113
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  1
21
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  221
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  231
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  2
52
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  243
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  241
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  233
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  232
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  230
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  223
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  215
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  1
85
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  75
Roll:  75
Roll:  75
Roll:  75
Roll:  75
Roll:  75
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -53
Roll:  -53
Roll:  -53
Roll:  -53
Roll:  -53
Roll:  -53
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -58
Roll:  -58
Roll:  -58
Roll:  -58
Roll:  -58
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -53
Roll:  -53
Roll:  -53
Roll:  -53
Roll:  -53
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -83
Roll:
-83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -64
Roll:  -64
Roll:  -64
Roll:  -64
Roll:  -64
Roll:  -64
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  31
Roll:  31
Roll:  31
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  61
Roll:  61
Roll:  61
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  102
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  113
Roll:
113
Roll:  113
Roll:  113
Roll:  113
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  167
Roll:  167
Roll:  167
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  164
Roll:  164
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:
======================================= END =======================================
  188
Roll:  188
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  214
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  216
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  217
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  219
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  222
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  225
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  226
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  228
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  230
Roll:
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_yEk0flX9kgrugJE4BDZu8v0J', 'output': "\r\n=== \nimport motor_pair\r\n=== \nfrom hub import port, motion_sensor\r\n=== \n\r\n=== \n# Initialize motor pair\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \n\r\n=== \n# Start loop\r\n=== \nwhile True:\r\n=== \n   pitch, roll, _ = motion_sensor.tilt_angles()\r\n=== \n   print('Roll: ', roll)\r\n=== \n   if roll > 5:\r\n=== \n       motor_pair.move_tank(motor_pair.PAIR_1, 100, 100)\r\n=== \n   elif roll < -5:\r\n=== \n       motor_pair.move_tank(motor_pair.PAIR_1, -100, -100)\r\n=== \n   else:\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n\nl:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  168\nRoll:  1\n68\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  1\n21\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  221\nRoll:  221\nRoll:  221\nRoll:  221\nRoll:  221\nRoll:  221\nRoll:  221\nRoll:  221\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  225\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  231\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  2\n52\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  243\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  241\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  233\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  232\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  230\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  228\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  226\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  223\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  222\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  219\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  217\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  215\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  189\nRoll:  189\nRoll:  189\nRoll:  189\nRoll:  189\nRoll:  189\nRoll:  189\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  1\n85\nRoll:  185\nRoll:  185\nRoll:  185\nRoll:  185\nRoll:  185\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  75\nRoll:  75\nRoll:  75\nRoll:  75\nRoll:  75\nRoll:  75\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  36\nRoll:  36\nRoll:  36\nRoll:  36\nRoll:  36\nRoll:  36\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -53\nRoll:  -53\nRoll:  -53\nRoll:  -53\nRoll:  -53\nRoll:  -53\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -58\nRoll:  -58\nRoll:  -58\nRoll:  -58\nRoll:  -58\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -53\nRoll:  -53\nRoll:  -53\nRoll:  -53\nRoll:  -53\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -44\nRoll:  -44\nRoll:  -44\nRoll:  -44\nRoll:  -44\nRoll:  -44\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -49\nRoll:  -49\nRoll:  -49\nRoll:  -49\nRoll:  -49\nRoll:  -49\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -82\nRoll:  -82\nRoll:  -82\nRoll:  -82\nRoll:  -83\nRoll:\n-83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -82\nRoll:  -82\nRoll:  -82\nRoll:  -82\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -76\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -64\nRoll:  -64\nRoll:  -64\nRoll:  -64\nRoll:  -64\nRoll:  -64\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -49\nRoll:  -49\nRoll:  -49\nRoll:  -49\nRoll:  -49\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  102\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  113\nRoll:\n113\nRoll:  113\nRoll:  113\nRoll:  113\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  128\nRoll:  128\nRoll:  128\nRoll:  128\nRoll:  128\nRoll:  128\nRoll:  131\nRoll:  131\nRoll:  131\nRoll:  131\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  164\nRoll:  164\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot react faster to changes in tilt?"
}
ChatGPT: Hey Human, Did the robot react faster to changes in tilt?
Submitting tool outputs: [{'tool_call_id': 'call_Ncnzy0AMPrb9WKQ68T4g0ohj', 'output': 'yes, but please go even fastr'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Start loop\nwhile True:\n    pitch, roll, _ = motion_sensor.tilt_angles()\n    print('Roll: ', roll)\n    if roll > 5:\n        motor_pair.move_tank(motor_pair.PAIR_1, 200, 200)\n    elif roll < -5:\n        motor_pair.move_tank(motor_pair.PAIR_1, -200, -200)\n    else:\n        motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Start loop
while True:
   pitch, roll, _ = motion_sensor.tilt_angles()
   print('Roll: ', roll)
   if roll > 5:
       motor_pair.move_tank(motor_pair.PAIR_1, 200, 200)
   elif roll < -5:
       motor_pair.move_tank(motor_pair.PAIR_1, -200, -200)
   else:
       motor_pair.stop(motor_pair.PAIR_1)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
R

=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   if roll > 5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, 200, 200)
=== 
   elif roll < -5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, -200, -200)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 


=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   if roll > 5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, 200, 200)
=== 
   elif roll < -5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, -200, -200)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 

oll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -51
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -138
Roll:  -
138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -181
Roll:  -181
Roll:  -181
Roll:  -181
Roll:  -181
Roll:  -181
Roll:  -181
Roll:  -181
Roll:  -181
Roll:  -181
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -189
Roll:  -189
Roll:  -189
Roll:  -189
Roll:  -189
Roll:  -189
Roll:  -189
Roll:  -189
Roll:  -189
Roll:  -189
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -211
Roll:  -211
Roll:  -211
Roll:  -211
Roll:  -211
Roll:  -211
Roll:  -211
Roll:  -211
Roll:  -211
Roll:  -211
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -248
Roll:  -248
Roll:  -248
Roll:  -248
Roll:  -248
Roll:  -248
Roll:  -248
Roll:  -248
Roll:  -248
Roll:  -248
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -293
Roll:  -293
Roll:  -293
Roll:  -293
Roll:  -293
Roll:  -293
Roll:  -293
Roll:  -293
Roll:  -293
Roll:  -293
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -305
Roll:  -305
Roll:  -305
Roll:  -305
Roll:  -305
Roll:  -305
Roll:  -305
Roll:  -305
Roll:  -305
Roll:  -305
Roll:  -307
Roll:  -307
Roll:  -307
Roll:  -307
Roll:  -307
Roll:  -307
Roll:  -307
Roll:  -307
Roll:  -307
Roll:  -307
Roll:  -310
Roll:  -310
Roll:  -310
Roll:  -310
Roll:  -310
Roll:  -310
Roll:  -310
Roll:  -310
Roll:  -310
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -318
Roll:  -318
Roll:  -318
Roll:  -318
Roll:  -318
Roll:  -318
Roll:  -318
Roll:  -321
Roll:  -321
Roll:  -321
Roll:  -321
Roll:  -321
Roll:  -321
Roll:  -321
Roll:  -321
Roll:  -321
Roll:  -321
Roll:  -325
Roll:  -325
Roll:  -325
Roll:  -325
Roll:  -325
Roll:  -325
Roll:  -325
Roll:  -325
Roll:  -325
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -330
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -329
Roll:  -328
Roll:  -328
Roll:  -328
Roll:  -328
Roll:  -328
Roll:  -328
Roll:  -328
Roll:  -328
Roll:  -328
Roll:  -328
Roll:  -327
Roll:  -327
Roll:  -327
Roll:  -327
Roll:  -327
Roll:  -327
Roll:  -327
Roll:  -327
Roll:  -327
Roll:  -325
Roll:  -325
Roll:  -325
Roll:  -325
Roll:  -325
Roll:  -325
Roll:  -325
Roll:  -324
Roll:  -324
Roll:  -324
Roll:  -324
Roll:  -324
Roll:  -324
Roll:  -324
Roll:  -324
Roll:  -324
Roll:  -322
Roll:  -322
Roll:  -322
Roll:  -322
Roll:  -322
Roll:  -322
Roll:  -322
Roll:  -322
Roll:  -322
Roll:  -320
Roll:  -320
Roll:  -320
Roll:  -320
Roll:  -320
Roll:  -320
Roll:  -320
Roll:  -320
Roll:  -320
Roll:  -320
Roll:  -318
Roll:  -318
Roll:  -318
Roll:  -318
Roll:  -318
Roll:  -318
Roll:  -318
Roll:  -318
Roll:  -318
Roll:  -316
Roll:  -316
Roll:  -316
Roll:  -316
Roll:  -316
Roll:  -316
Roll:  -316
Roll:  -316
Roll:  -316
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -314
Roll:  -311
Roll:  -311
Roll:  -311
Roll:  -311
Roll:  -311
Roll:  -311
Roll:  -311
Roll:  -311
Roll:  -311
Roll:  -308
Roll:  -308
Roll:  -308
Roll:  -308
Roll:  -308
Roll:  -308
Roll:  -308
Roll:  -308
Roll:  -308
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Rol
l:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -284
Roll:  -284
Roll:  -284
Roll:  -284
Roll:  -284
Roll:  -284
Roll:  -284
Roll:  -284
Roll:  -284
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -285
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -288
Roll:  -288
Roll:  -288
Roll:  -288
Roll:  -288
Roll:  -288
Roll:  -288
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -295
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -297
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -300
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -302
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -304
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -303
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -301
Roll:  -299
Roll:  -299
Roll:  -299
Roll:  -299
Roll:  -299
Roll:  -299
Roll:  -299
Roll:  -299
Roll:  -299
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -296
Roll:  -294
Roll:  -294
Roll:  -294
Roll:  -294
Roll:  -294
Roll:  -294
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -292
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -291
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -290
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -289
Roll:  -288
Roll:  -288
Roll:  -288
Roll:  -288
Roll:  -288
Roll:  -288
Roll:  -288
Roll:  -288
Roll:  -288
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -287
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -286
Roll:  -284
Roll:  -284
Roll:  -284
Roll:  -284
Roll:  -284
Roll:  -284
Roll:  -284
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -283
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -281
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -280
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -278
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -277
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -276
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -275
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -271
Roll:  -271
Roll:  -271
Roll:  -271
Roll:  -271
Roll:  -271
Roll:  -271
Roll:  -271
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -263
Roll:  -263
Roll:  -263
Roll:  -263
Roll:  -263
Roll:  -263
Roll:  -263
Roll:  -263
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -258
Roll:  -258
Roll:  -258
Roll:  -258
Roll:  -258
Roll:  -258
Roll:  -258
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -259
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -271
Roll:  -271
Roll:  -271
Roll:  -271
Roll:  -271
Roll:  -271
Roll:  -271
Roll:  -271
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -273
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -274
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -272
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -270
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -267
Roll:  -267
Roll:  -267
Roll:  -267
Roll:  -267
Roll:  -267
Roll:  -267
Roll:  -267
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -269
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -268
Roll:  -267
Roll:  -267
Roll:  -267
Roll:  -267
Roll:  -267
Roll:  -267
Roll:  -267
Roll:  -267
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -266
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -265
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -264
Roll:  -263
Roll:  -263
Roll:  -263
Roll:  -263
Roll:  -263
Roll:  -263
Roll:  -263
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -262
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -261
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -260
Roll:  -258
Roll:  -258
Roll:  -258
Roll:  -258
Roll:  -258
Roll:  -258
Roll:  -258
Roll:  -256
Roll:  -256
Roll:  -256
Roll:  -256
Roll:  -256
Roll:  -256
Roll:  -256
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -254
Roll:  -250
Roll:  -250
Roll:  -250
Roll:  -250
Roll:  -250
Roll:  -250
Roll:  -250
Roll:  -247
Roll:  -247
Roll:  -247
Roll:  -247
Roll:  -247
Roll:  -247
Roll:  -247
Roll:  -247
Roll:  -243
Roll:  -243
Roll:  -243
Roll:  -243
Roll:  -243
Roll:  -240
Roll:  -240
Roll:  -240
Roll:  -240
Roll:  -240
Roll:  -240
Roll:  -240
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -214
Roll:  -214
Roll:  -214
Roll:  -214
Roll:  -214
Roll:  -214
Roll:  -214
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -204
Roll:  -204
Roll:  -204
Roll:  -204
Roll:  -204
Roll:  -204
Roll:  -204
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -197
Roll:  -197
Roll:  -197
Roll:  -197
Roll:  -197
Roll:  -197
Roll:  -197
Roll:  -197
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -7
9
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -66
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -64
Roll:  -64
Roll:  -64
Roll:  -64
Roll:  -64
Roll:  -64
Roll:  -62
Roll:  -62
Roll:  -62
Roll:  -62
Roll:  -62
Roll:  -62
Roll:  -62
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -53
Roll:  -53
Roll:  -53
Roll:  -53
Roll:  -53
Roll:  -53
Roll:  -53
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  105
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  168
Roll:  168
Roll:  168
Roll
:  168
Roll:  168
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  98
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  79
Roll:  79
Roll:  79
Roll:  79
Roll:  79
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  75
Roll:  75
Roll:  75
Roll:  75
Roll:  75
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  74
Roll:  74
Roll:  74
Roll:  74
Roll:  74
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  79
Roll:  79
Roll:  79
Roll:  79
Roll:  79
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  94
Roll:  94
Roll:  94
Ro
ll:  94
Roll:  94
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  83
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  95
Roll:  95
Roll:  95
Roll:  95
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  100
Roll:  100
Roll:  100
Roll:  100
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  115
Roll:  115
Roll:  115
Roll:  115
Roll:  115
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  138
Roll:  138
Roll:  138
Roll:  138
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  121
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
======================================= END =======================================

Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_KXeKXrdAi6nkLcXxGyufrb63', 'output': "\r\n=== \nimport motor_pair\r\n=== \nfrom hub import port, motion_sensor\r\n=== \n\r\n=== \n# Initialize motor pair\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \n\r\n=== \n# Start loop\r\n=== \nwhile True:\r\n=== \n   pitch, roll, _ = motion_sensor.tilt_angles()\r\n=== \n   print('Roll: ', roll)\r\n=== \n   if roll > 5:\r\n=== \n       motor_pair.move_tank(motor_pair.PAIR_1, 200, 200)\r\n=== \n   elif roll < -5:\r\n=== \n       motor_pair.move_tank(motor_pair.PAIR_1, -200, -200)\r\n=== \n   else:\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n\noll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -51\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -138\nRoll:  -\n138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -181\nRoll:  -181\nRoll:  -181\nRoll:  -181\nRoll:  -181\nRoll:  -181\nRoll:  -181\nRoll:  -181\nRoll:  -181\nRoll:  -181\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -189\nRoll:  -189\nRoll:  -189\nRoll:  -189\nRoll:  -189\nRoll:  -189\nRoll:  -189\nRoll:  -189\nRoll:  -189\nRoll:  -189\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -211\nRoll:  -211\nRoll:  -211\nRoll:  -211\nRoll:  -211\nRoll:  -211\nRoll:  -211\nRoll:  -211\nRoll:  -211\nRoll:  -211\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -248\nRoll:  -248\nRoll:  -248\nRoll:  -248\nRoll:  -248\nRoll:  -248\nRoll:  -248\nRoll:  -248\nRoll:  -248\nRoll:  -248\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -293\nRoll:  -293\nRoll:  -293\nRoll:  -293\nRoll:  -293\nRoll:  -293\nRoll:  -293\nRoll:  -293\nRoll:  -293\nRoll:  -293\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -305\nRoll:  -305\nRoll:  -305\nRoll:  -305\nRoll:  -305\nRoll:  -305\nRoll:  -305\nRoll:  -305\nRoll:  -305\nRoll:  -305\nRoll:  -307\nRoll:  -307\nRoll:  -307\nRoll:  -307\nRoll:  -307\nRoll:  -307\nRoll:  -307\nRoll:  -307\nRoll:  -307\nRoll:  -307\nRoll:  -310\nRoll:  -310\nRoll:  -310\nRoll:  -310\nRoll:  -310\nRoll:  -310\nRoll:  -310\nRoll:  -310\nRoll:  -310\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -318\nRoll:  -318\nRoll:  -318\nRoll:  -318\nRoll:  -318\nRoll:  -318\nRoll:  -318\nRoll:  -321\nRoll:  -321\nRoll:  -321\nRoll:  -321\nRoll:  -321\nRoll:  -321\nRoll:  -321\nRoll:  -321\nRoll:  -321\nRoll:  -321\nRoll:  -325\nRoll:  -325\nRoll:  -325\nRoll:  -325\nRoll:  -325\nRoll:  -325\nRoll:  -325\nRoll:  -325\nRoll:  -325\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -330\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -329\nRoll:  -328\nRoll:  -328\nRoll:  -328\nRoll:  -328\nRoll:  -328\nRoll:  -328\nRoll:  -328\nRoll:  -328\nRoll:  -328\nRoll:  -328\nRoll:  -327\nRoll:  -327\nRoll:  -327\nRoll:  -327\nRoll:  -327\nRoll:  -327\nRoll:  -327\nRoll:  -327\nRoll:  -327\nRoll:  -325\nRoll:  -325\nRoll:  -325\nRoll:  -325\nRoll:  -325\nRoll:  -325\nRoll:  -325\nRoll:  -324\nRoll:  -324\nRoll:  -324\nRoll:  -324\nRoll:  -324\nRoll:  -324\nRoll:  -324\nRoll:  -324\nRoll:  -324\nRoll:  -322\nRoll:  -322\nRoll:  -322\nRoll:  -322\nRoll:  -322\nRoll:  -322\nRoll:  -322\nRoll:  -322\nRoll:  -322\nRoll:  -320\nRoll:  -320\nRoll:  -320\nRoll:  -320\nRoll:  -320\nRoll:  -320\nRoll:  -320\nRoll:  -320\nRoll:  -320\nRoll:  -320\nRoll:  -318\nRoll:  -318\nRoll:  -318\nRoll:  -318\nRoll:  -318\nRoll:  -318\nRoll:  -318\nRoll:  -318\nRoll:  -318\nRoll:  -316\nRoll:  -316\nRoll:  -316\nRoll:  -316\nRoll:  -316\nRoll:  -316\nRoll:  -316\nRoll:  -316\nRoll:  -316\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -314\nRoll:  -311\nRoll:  -311\nRoll:  -311\nRoll:  -311\nRoll:  -311\nRoll:  -311\nRoll:  -311\nRoll:  -311\nRoll:  -311\nRoll:  -308\nRoll:  -308\nRoll:  -308\nRoll:  -308\nRoll:  -308\nRoll:  -308\nRoll:  -308\nRoll:  -308\nRoll:  -308\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRol\nl:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -284\nRoll:  -284\nRoll:  -284\nRoll:  -284\nRoll:  -284\nRoll:  -284\nRoll:  -284\nRoll:  -284\nRoll:  -284\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -285\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -288\nRoll:  -288\nRoll:  -288\nRoll:  -288\nRoll:  -288\nRoll:  -288\nRoll:  -288\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -295\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -297\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -300\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -302\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -304\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -303\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -301\nRoll:  -299\nRoll:  -299\nRoll:  -299\nRoll:  -299\nRoll:  -299\nRoll:  -299\nRoll:  -299\nRoll:  -299\nRoll:  -299\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -296\nRoll:  -294\nRoll:  -294\nRoll:  -294\nRoll:  -294\nRoll:  -294\nRoll:  -294\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -292\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -291\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -290\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -289\nRoll:  -288\nRoll:  -288\nRoll:  -288\nRoll:  -288\nRoll:  -288\nRoll:  -288\nRoll:  -288\nRoll:  -288\nRoll:  -288\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -287\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -286\nRoll:  -284\nRoll:  -284\nRoll:  -284\nRoll:  -284\nRoll:  -284\nRoll:  -284\nRoll:  -284\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -283\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -281\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -280\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -278\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -277\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -276\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -275\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -271\nRoll:  -271\nRoll:  -271\nRoll:  -271\nRoll:  -271\nRoll:  -271\nRoll:  -271\nRoll:  -271\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -263\nRoll:  -263\nRoll:  -263\nRoll:  -263\nRoll:  -263\nRoll:  -263\nRoll:  -263\nRoll:  -263\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -258\nRoll:  -258\nRoll:  -258\nRoll:  -258\nRoll:  -258\nRoll:  -258\nRoll:  -258\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -259\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -271\nRoll:  -271\nRoll:  -271\nRoll:  -271\nRoll:  -271\nRoll:  -271\nRoll:  -271\nRoll:  -271\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -273\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -274\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -272\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -270\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -267\nRoll:  -267\nRoll:  -267\nRoll:  -267\nRoll:  -267\nRoll:  -267\nRoll:  -267\nRoll:  -267\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -269\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -268\nRoll:  -267\nRoll:  -267\nRoll:  -267\nRoll:  -267\nRoll:  -267\nRoll:  -267\nRoll:  -267\nRoll:  -267\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -266\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -265\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -264\nRoll:  -263\nRoll:  -263\nRoll:  -263\nRoll:  -263\nRoll:  -263\nRoll:  -263\nRoll:  -263\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -262\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -261\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -260\nRoll:  -258\nRoll:  -258\nRoll:  -258\nRoll:  -258\nRoll:  -258\nRoll:  -258\nRoll:  -258\nRoll:  -256\nRoll:  -256\nRoll:  -256\nRoll:  -256\nRoll:  -256\nRoll:  -256\nRoll:  -256\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -254\nRoll:  -250\nRoll:  -250\nRoll:  -250\nRoll:  -250\nRoll:  -250\nRoll:  -250\nRoll:  -250\nRoll:  -247\nRoll:  -247\nRoll:  -247\nRoll:  -247\nRoll:  -247\nRoll:  -247\nRoll:  -247\nRoll:  -247\nRoll:  -243\nRoll:  -243\nRoll:  -243\nRoll:  -243\nRoll:  -243\nRoll:  -240\nRoll:  -240\nRoll:  -240\nRoll:  -240\nRoll:  -240\nRoll:  -240\nRoll:  -240\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -214\nRoll:  -214\nRoll:  -214\nRoll:  -214\nRoll:  -214\nRoll:  -214\nRoll:  -214\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -204\nRoll:  -204\nRoll:  -204\nRoll:  -204\nRoll:  -204\nRoll:  -204\nRoll:  -204\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -197\nRoll:  -197\nRoll:  -197\nRoll:  -197\nRoll:  -197\nRoll:  -197\nRoll:  -197\nRoll:  -197\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -144\nRoll:  -144\nRoll:  -144\nRoll:  -144\nRoll:  -144\nRoll:  -144\nRoll:  -144\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -95\nRoll:  -95\nRoll:  -95\nRoll:  -95\nRoll:  -95\nRoll:  -95\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -7\n9\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -66\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -64\nRoll:  -64\nRoll:  -64\nRoll:  -64\nRoll:  -64\nRoll:  -64\nRoll:  -62\nRoll:  -62\nRoll:  -62\nRoll:  -62\nRoll:  -62\nRoll:  -62\nRoll:  -62\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -53\nRoll:  -53\nRoll:  -53\nRoll:  -53\nRoll:  -53\nRoll:  -53\nRoll:  -53\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  105\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  131\nRoll:  131\nRoll:  131\nRoll:  131\nRoll:  131\nRoll:  131\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  168\nRoll:  168\nRoll:  168\nRoll\n:  168\nRoll:  168\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  128\nRoll:  128\nRoll:  128\nRoll:  128\nRoll:  128\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  98\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  79\nRoll:  79\nRoll:  79\nRoll:  79\nRoll:  79\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  75\nRoll:  75\nRoll:  75\nRoll:  75\nRoll:  75\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  79\nRoll:  79\nRoll:  79\nRoll:  79\nRoll:  79\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  94\nRoll:  94\nRoll:  94\nRo\nll:  94\nRoll:  94\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  83\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  95\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  100\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  138\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  131\nRoll:  131\nRoll:  131\nRoll:  131\nRoll:  131\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  121\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Is the balancing reaction of the robot faster now?"
}
ChatGPT: Hey Human, Is the balancing reaction of the robot faster now?
Submitting tool outputs: [{'tool_call_id': 'call_kexosFD5zZHnMh88kBdq3eb5', 'output': 'yes, please use a max speed of 300'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Start loop\nwhile True:\n    pitch, roll, _ = motion_sensor.tilt_angles()\n    print('Roll: ', roll)\n    if roll > 5:\n        motor_pair.move_tank(motor_pair.PAIR_1, 300, 300)\n    elif roll < -5:\n        motor_pair.move_tank(motor_pair.PAIR_1, -300, -300)\n    else:\n        motor_pair.stop(motor_pair.PAIR_1)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Start loop
while True:
   pitch, roll, _ = motion_sensor.tilt_angles()
   print('Roll: ', roll)
   if roll > 5:
       motor_pair.move_tank(motor_pair.PAIR_1, 300, 300)
   elif roll < -5:
       motor_pair.move_tank(motor_pair.PAIR_1, -300, -300)
   else:
       motor_pair.stop(motor_pair.PAIR_1)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll: 

=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   if roll > 5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, 300, 300)
=== 
   elif roll < -5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, -300, -300)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 


=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   if roll > 5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, 300, 300)
=== 
   elif roll < -5:
=== 
       motor_pair.move_tank(motor_pair.PAIR_1, -300, -300)
=== 
   else:
=== 
       motor_pair.stop(motor_pair.PAIR_1)
=== 

-166
Roll:  -166
Roll:  -166
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -125
Roll:  -125
Roll:  -125
R
oll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -1
07
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  78
Roll:  78
Roll:  78
Roll:  78
Roll:  78
Roll:  78
Roll:  78
Roll:  78
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  88
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  240
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  238
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  284
Roll:  279
Roll:  279
Roll:  279
Roll:  279
Roll:  279
Roll:  279
Roll:  279
Roll:  279
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  266
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  248
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  245
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  244
Roll:  244
Roll:  244
Roll:  244
Roll
:  244
Roll:  244
Roll:  244
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  251
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  260
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  262
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  263
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  276
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  280
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  275
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  274
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  272
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  269
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  265
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  253
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  255
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  257
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  256
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  259
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  261
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  264
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  267
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  270
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  273
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  278
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  282
Roll:  286
Roll:  286
Roll:  286
Roll:  286
Roll:  286
Roll:  286
Roll:  286
Roll:  291
Roll:  291
Roll:  291
Roll:  291
Roll:  291
Roll:  291
Roll:  291
Roll:  297
Roll:  297
Roll:  297
Roll:  297
Roll:  297
Roll:  297
Roll:  297
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  303
Roll:  303
Roll:  303
Roll:  303
Roll:  303
Roll:  303
Roll:  303
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  305
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  304
Roll:  302
Roll:  302
Roll:  302
Roll:  302
Roll:  302
Roll:  302
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  301
Roll:  300
Roll:  300
Roll:  300
Roll:  300
Roll:  300
Roll:  300
Roll:  300
Roll:  299
Roll:  299
Roll:  299
Roll:  299
Roll:  299
Roll:  299
Roll:  299
Roll:  299
Roll:  299
Roll:  299
Roll:  299
Roll:  299
Roll:  299
Roll:  299
Roll:  298
Roll:  298
Roll:  298
Roll:  298
Roll:  298
Roll:  297
Roll:  297
Roll:  297
Roll:  297
Roll:  297
Roll:  297
Roll:  297
Roll:  296
Roll:  296
Roll:  296
Roll:  296
Roll:  296
Roll:  296
Roll:  296
Roll:  298
Roll:  298
Roll:  298
Roll:  298
Roll:  298
Roll:  298
Roll:  303
Roll:  303
Roll:  303
Roll:  303
Roll:  303
Roll:  303
Roll:  303
Roll:  307
Roll:  307
Roll:  307
Roll:  307
Roll:  307
Roll:  307
Roll:  307
Roll:  311
Roll:  311
Roll:  311
Roll:  311
Roll:  311
Roll:  311
Roll:  311
Roll:  318
Roll:  318
Roll
:  318
Roll:  318
Roll:  318
Roll:  318
Roll:  324
Roll:  324
Roll:  324
Roll:  324
Roll:  324
Roll:  324
Roll:  324
Roll:  330
Roll:  330
Roll:  330
Roll:  330
Roll:  330
Roll:  330
Roll:  330
Roll:  336
Roll:  336
Roll:  336
Roll:  336
Roll:  336
Roll:  345
Roll:  345
Roll:  345
Roll:  345
Roll:  345
Roll:  345
Roll:  345
Roll:  357
Roll:  357
Roll:  357
Roll:  357
Roll:  357
Roll:  357
Roll:  357
Roll:  369
Roll:  369
Roll:  369
Roll:  369
Roll:  369
Roll:  369
Roll:  369
Roll:  380
Roll:  380
Roll:  380
Roll:  380
Roll:  380
Roll:  380
Roll:  389
Roll:  389
Roll:  389
Roll:  389
Roll:  389
Roll:  389
Roll:  389
Roll:  394
Roll:  394
Roll:  394
Roll:  394
Roll:  394
Roll:  394
Roll:  394
Roll:  396
Roll:  396
Roll:  396
Roll:  396
Roll:  396
Roll:  396
Roll:  398
Roll:  398
Roll:  398
Roll:  398
Roll:  398
Roll:  398
Roll:  398
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  397
Roll:  397
Roll:  397
Roll:  397
Roll:  397
Roll:  397
Roll:  397
Roll:  394
Roll:  394
Roll:  394
Roll:  394
Roll:  394
Roll:  394
Roll:  396
Roll:  396
Roll:  396
Roll:  396
Roll:  396
Roll:  396
Roll:  396
Roll:  398
Roll:  398
Roll:  398
Roll:  398
Roll:  398
Roll:  398
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  401
Roll:  401
Roll:  401
Roll:  401
Roll:  401
Roll:  401
Roll:  401
Roll:  406
Roll:  406
Roll:  406
Roll:  406
Roll:  406
Roll:  406
Roll:  411
Roll:  411
Roll:  411
Roll:  411
Roll:  411
Roll:  411
Roll:  411
Roll:  414
Roll:  414
Roll:  414
Roll:  414
Roll:  414
Roll:  416
Roll:  416
Roll:  416
Roll:  416
Roll:  416
Roll:  416
Roll:  416
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  420
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  419
Roll:  419
Roll:  419
Roll:  419
Roll:  419
Roll:  419
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  418
Roll:  414
Roll:  414
Roll:  414
Roll:  414
Roll:  414
Roll:  414
Roll:  414
Roll:  417
Roll:  417
Roll:  417
Roll:  417
Roll:  417
Roll:  417
Roll:  421
Roll:  421
Roll:  421
Roll:  421
Roll:  421
Roll:  421
Roll:  421
Roll:  425
Roll:  425
Roll:  425
Roll:  425
Roll:  425
Roll:  425
Roll:  427
Roll:  427
Roll:  427
Roll:  427
Roll:  427
Roll:  427
Roll:  427
Roll:  430
Roll:  430
Roll:  430
Roll:  430
Roll:  430
Roll:  430
Roll:  430
Roll:  430
Roll:  430
Roll:  430
Roll:  430
Roll:  429
Roll:  429
Roll:  429
Roll:  429
Roll:  429
Roll:  429
Roll:  429
Roll:  428
Roll:  428
Roll:  428
Roll:  428
Roll:  428
Roll:  428
Roll:  429
Roll:  429
Roll:  429
Roll:  429
Roll:  429
Roll:  429
Roll:  429
Roll:  434
Roll:  434
Roll:  434
Roll:  434
Roll:  434
Roll:  434
Roll:  441
Roll:  441
Roll:  441
Roll:  441
Roll:  441
Roll:  441
Roll:  441
Roll:  444
Roll:  444
Roll:  444
Roll:  444
Roll:  444
Roll:  444
Roll:  444
Roll:  444
Roll:  444
Roll:  444
Roll:  444
Roll:  444
Roll:  444
Roll:  443
Roll:  443
Roll:  443
Roll:  443
Roll:  443
Roll:  443
Roll:  445
Roll:  445
Roll:  445
Roll:  445
Roll:  445
Roll:  445
Roll:  449
Roll:  449
Roll:  449
Roll:  449
Roll:  449
Roll:  449
Roll:  450
Roll:  450
Roll:  450
Roll:  450
Roll:  450
Roll:  450
Roll:  453
Roll:  453
Roll:  453
Roll:  453
Roll:  453
Roll:  453
Roll:  453
Roll:  454
Roll:  454
Roll:  454
Roll:  454
Roll:  454
Roll:  454
Roll:  456
Roll:  456
Roll:  456
Roll:  456
Roll:  456
Roll:  456
Roll:  460
Roll:  460
Roll:  460
Roll:  460
Roll:  460
Roll:  460
Roll:  460
Roll:  463
Roll:  463
Roll:  463
Roll:  463
Roll:  463
Roll:  463
Roll:  464
Roll:  464
Roll:  464
Roll:  464
Roll:  464
Roll:  464
Roll:  465
Roll:  465
Roll:  465
Roll:  465
Roll:  465
Roll:  465
Roll:  465
Roll:  469
Roll:  469
Roll:  469
Roll:  469
Roll:  469
Roll:  472
Roll:  472
Roll:  472
Roll:  472
Roll:  472
Roll:  472
Roll:  474
Roll:  474
Roll:  474
Roll:  474
Roll:  474
Roll:  474
Roll:  474
Roll:  475
Roll:  475
Roll:  475
Roll:  475
Roll:  475
Roll:  475
Roll:  479
Roll:  479
Roll:  479
Roll:  479
Roll:  479
Roll:  479
Roll:  483
Roll:  483
Roll:  483
Roll:  483
Roll:  483
Roll:  483
Roll:  483
Roll:  487
Roll:  487
Roll:  487
Roll:  487
Roll:  487
Roll:  487
Roll:  490
Roll:  490
Roll:  490
Roll:  490
Roll:  490
Roll:  490
Roll:  492
Roll:  492
Roll:  492
Roll:  492
Roll:  492
Roll:  492
Roll:  496
Roll:  496
Roll:  496
Roll:  496
Roll:  496
Roll:  498
Roll:  498
Roll:  498
Roll:  498
Roll:  498
Roll:  498
Roll:  498
Roll:  500
Roll:  500
Roll:  500
Roll:  500
Roll:  500
Roll:  500
Roll:  503
Roll:  503
Roll:  503
Roll:  503
Roll:  503
Roll:  503
Roll:  505
Roll:  505
Roll:  505
Roll:  505
Roll:  505
Roll:  505
Roll:  505
Roll:  509
Roll:  509
Roll:  509
Roll:  509
Roll:  509
Roll:  509
Roll:  512
Roll:  512
Roll:  512
Roll:  512
Roll:  512
Roll:  512
Roll:  514
Roll:  514
Roll:  514
Roll:  514
Roll:  514
Roll:  514
Roll:  518
Roll:  518
Roll:  518
Roll:  518
Roll:  518
Roll:  518
Roll:  518
Roll:  520
Roll:  520
Roll:  520
Roll:  520
Roll:  521
Roll:  521
Roll:  521
Roll:  521
Roll:  521
Roll:  521
Roll:  521
Roll:  524
Roll:  524
Roll:  524
Roll:  524
Roll:  524
Roll:  524
Roll:  524
Roll:  524
Roll:  524
Roll:  524
Roll:  524
Roll:  524
Roll:  526
Roll:  526
Roll:  526
Roll:  526
Roll:  526
Roll:  526
Roll:  529
Roll:  529
Roll:  529
Roll:  529
Roll:  529
Roll:  529
Roll:  529
Roll:  529
Roll:  529
Roll:  529
Roll:  529
Roll:  529
Roll:  529
Roll:  531
Roll:  531
Roll:  531
Roll:  531
Roll:  531
Roll:  531
Roll:  532
Roll:  532
Roll:  532
Roll:  532
Roll:  532
Roll:  532
Roll:  532
Roll:  532
Roll:  532
Roll:  532
Roll:  532
Roll:  534
Roll:  534
Roll:  534
Roll:  534
Roll:  534
Roll:  534
Roll:  534
Roll:  534
Roll:  534
Roll:  534
Roll:  534
Roll:  534
Roll:  537
Roll:  537
Roll:  537
Roll:  537
Roll:  537
Roll:  537
Roll:  537
Roll:  539
Roll:  539
Roll:  539
Roll:  539
Roll:  539
Roll:  539
Roll:  540
Roll:  540
Roll:  540
Roll:  540
Roll:  540
Roll:  540
Roll:  542
Roll:  542
Roll:  542
Roll:  542
Roll:  542
Roll:  542
Roll:  544
Roll:  544
Roll:  544
Roll:  544
Roll:  544
Roll:  544
Roll:  545
Roll:  545
Roll:  545
Roll:  545
Roll:  545
Roll:  545
Roll:  546
Roll:  546
Roll:  546
Roll:  546
Roll:  546
Roll:  547
Roll:  547
Roll:  547
Roll:  547
Roll:  547
Roll:  547
Roll:  547
Roll:  548
Roll:  548
Roll:  548
Roll:  548
Roll:  548
Roll:  548
Roll:  547
Roll:  547
Roll:  547
Roll:  547
Roll:  547
Roll:  547
Roll:  546
Roll:  546
Roll:  546
Roll:  546
Roll:  546
Roll:  546
Roll:  544
Roll:  544
Roll:  544
Roll:  544
Roll:  544
Roll:  544
Roll:  541
Roll:  541
Roll:  541
Roll:  541
Roll:  541
Roll:  541
Roll:  537
Roll:  537
Roll:  537
Roll:  537
Roll:  537
Roll:  537
Roll:  534
Roll:  534
Roll:  534
Roll:  534
Roll:  534
Roll:  534
Roll:  532
Roll:  532
Roll:  532
Roll:  532
Roll:  532
Roll:  532
Roll:  532
Roll:  531
Roll:  531
Roll:  531
Roll:  531
Roll:  530
Roll:  530
Roll:  530
Roll:  530
Roll:  530
Roll:  530
Roll:  528
Roll:  528
Roll:  528
Roll:  528
Roll:  528
Roll:  528
Roll:  528
Roll:  527
Roll:  527
Roll:  527
Roll:  527
Roll:  527
Roll:  526
Roll:  526
Roll:  526
Roll:  526
Roll:  526
Roll:  526
Roll:  526
Roll:  524
Roll:  524
Roll:  524
Roll:  524
Roll:  524
Roll:  524
Roll:  522
Roll:  522
Roll:  522
Roll:  522
Roll:  522
Roll:  522
Roll:  519
Roll:  519
Roll:  519
Roll:  519
Roll:  519
Roll:  519
Roll:  516
Roll:  516
Roll:  516
Roll:  516
Roll:  516
Roll:  516
Roll:  513
Roll:  513
Roll:  513
Roll:  513
Roll:  513
Roll:  511
Roll:  511
Roll:  511
Roll:  511
Roll:  511
Roll:  511
Roll:  508
Roll:  508
Roll:  508
Roll:  508
Roll:  508
Roll:  508
Roll:  506
Roll:  506
Roll:  506
Roll:  506
Roll:  506
Roll:  506
Roll:  504
Roll:  504
Roll:  504
Roll:  504
Roll:  504
Roll:  504
Roll:  502
Roll:  502
Roll:  502
Roll:  502
Roll:  502
Roll:  502
Roll:  500
Roll:  500
Roll:  500
Roll:  500
Roll:  500
Roll:  500
Roll:  498
Roll:  498
Roll:  498
Roll:  498
Roll:  498
Roll:  498
Roll:  496
Roll:  496
Roll:  496
Roll:  496
Roll:  496
Roll:  496
Roll:  493
Roll:  493
Roll:  493
Roll:  493
Roll:  490
Roll:  490
Roll:  490
Roll:  490
Roll:  490
Roll:  490
Roll:  490
Roll:  490
Roll:  490
Roll:  490
Roll:  490
Roll:  490
Roll:  488
Roll:  488
Roll:  488
Roll:  488
Roll:  488
Roll:  488
Roll:  486
Roll:  486
Roll:  486
Roll:  486
Roll:  486
Roll:  486
Roll:  484
Roll:  484
Roll:  484
Roll:  484
Roll:  484
Roll:  484
Roll:  481
Roll:  481
Roll:  481
Roll:  481
Roll:  481
Roll:  481
Roll:  479
Roll:  479
Roll:  479
Roll:  479
Roll:  479
Roll:  479
Roll:  477
Roll:  477
Roll:  477
Roll:  477
Roll:  477
Roll:  474
Roll:  474
Roll:  474
Roll:  474
Roll:  474
Roll:  474
Roll:  471
Roll:  471
Roll:  471
Roll:  471
Roll:  471
Roll:  471
Roll:  468
Roll:  468
Roll:  468
Roll:  468
Roll:  468
Roll:  468
Roll:  464
Roll:  464
Roll:  464
Roll:  464
Roll:  464
Roll:  464
Roll:  461
Roll:  461
Roll:  461
Roll:  461
Roll:  461
Roll:  457
Roll:  457
Roll:  457
Roll:  457
Roll:  457
Roll:  457
Roll:  453
Roll:  453
Roll:  453
Roll:  453
Roll:  453
Roll:  453
Roll:  449
Roll:  449
Roll
:  449
Roll:  449
Roll:  449
Roll:  449
Roll:  447
Roll:  447
Roll:  447
Roll:  447
Roll:  447
Roll:  447
Roll:  444
Roll:  444
Roll:  444
Roll:  444
Roll:  444
Roll:  442
Roll:  442
Roll:  442
Roll:  442
Roll:  442
Roll:  442
Roll:  440
Roll:  440
Roll:  440
Roll:  440
Roll:  440
Roll:  440
Roll:  437
Roll:  437
Roll:  437
Roll:  437
Roll:  437
Roll:  437
Roll:  434
Roll:  434
Roll:  434
Roll:  434
Roll:  434
Roll:  434
Roll:  430
Roll:  430
Roll:  430
Roll:  430
Roll:  430
Roll:  427
Roll:  427
Roll:  427
Roll:  427
Roll:  427
Roll:  427
Roll:  424
Roll:  424
Roll:  424
Roll:  424
Roll:  424
Roll:  424
Roll:  421
Roll:  421
Roll:  421
Roll:  421
Roll:  421
Roll:  421
Roll:  417
Roll:  417
Roll:  417
Roll:  417
Roll:  417
Roll:  414
Roll:  414
Roll:  414
Roll:  414
Roll:  414
Roll:  414
Roll:  409
Roll:  409
Roll:  409
Roll:  409
Roll:  409
Roll:  405
Roll:  405
Roll:  405
Roll:  405
Roll:  405
Roll:  405
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  400
Roll:  395
Roll:  395
Roll:  395
Roll:  395
Roll:  395
Roll:  395
Roll:  390
Roll:  390
Roll:  390
Roll:  390
Roll:  390
Roll:  390
Roll:  384
Roll:  384
Roll:  384
Roll:  384
Roll:  384
Roll:  379
Roll:  379
Roll:  379
Roll:  379
Roll:  379
Roll:  379
Roll:  373
Roll:  373
Roll:  373
Roll:  373
Roll:  373
Roll:  373
Roll:  367
Roll:  367
Roll:  367
Roll:  367
Roll:  367
Roll:  360
Roll:  360
Roll:  360
Roll:  360
Roll:  360
Roll:  360
Roll:  353
Roll:  353
Roll:  353
Roll:  353
Roll:  353
Roll:  344
Roll:  344
Roll:  344
Roll:  344
Roll:  344
Roll:  344
Roll:  335
Roll:  335
Roll:  335
Roll:  335
Roll:  335
Roll:  335
Roll:  327
Roll:  327
Roll:  327
Roll:  327
Roll:  327
Roll:  327
Roll:  318
Roll:  318
Roll:  318
Roll:  318
Roll:  318
Roll:  310
Roll:  310
Roll:  310
Roll:  310
Roll:  310
Roll:  310
Roll:  302
Roll:  302
Roll:  302
Roll:  302
Roll:  302
Roll:  302
Roll:  293
Roll:  293
Roll:  293
Roll:  293
Roll:  286
Roll:  286
Roll:  286
Roll:  286
Roll:  286
Roll:  286
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  277
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  268
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  258
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  218
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  103
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  78
Roll:  78
Roll:  78
Roll:  78
Roll:  78
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  74
Roll:  74
Roll:  74
Roll:  74
Roll:  74
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  81
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  220
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  227
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  236
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  247
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  250
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  254
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  252
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  249
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  246
Roll:  242
Roll:  242
Roll:  242
Roll:  242
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  239
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  234
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  229
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  224
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  213
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  212
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Rol
l:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  211
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  210
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  209
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  208
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  207
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  206
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  205
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  204
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  203
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  202
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  201
Roll:  200
Roll:  200
Roll:  200
Roll:  200
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  199
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  190
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  197
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  198
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  196
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  192
Roll:  190
Roll:  190
Roll:  190
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Rol
======================================= END =======================================
l:  193
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  194
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  195
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  193
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  191
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Rol
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Vc9UMDeXxfKX2qhx5A00EogV', 'output': "\r\n=== \nimport motor_pair\r\n=== \nfrom hub import port, motion_sensor\r\n=== \n\r\n=== \n# Initialize motor pair\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \n\r\n=== \n# Start loop\r\n=== \nwhile True:\r\n=== \n   pitch, roll, _ = motion_sensor.tilt_angles()\r\n=== \n   print('Roll: ', roll)\r\n=== \n   if roll > 5:\r\n=== \n       motor_pair.move_tank(motor_pair.PAIR_1, 300, 300)\r\n=== \n   elif roll < -5:\r\n=== \n       motor_pair.move_tank(motor_pair.PAIR_1, -300, -300)\r\n=== \n   else:\r\n=== \n       motor_pair.stop(motor_pair.PAIR_1)\r\n=== \n\n-166\nRoll:  -166\nRoll:  -166\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -125\nRoll:  -125\nRoll:  -125\nR\noll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -1\n07\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  88\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  240\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  238\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  284\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  279\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  266\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  248\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  245\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  244\nRoll:  244\nRoll:  244\nRoll:  244\nRoll\n:  244\nRoll:  244\nRoll:  244\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  251\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  260\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  262\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  263\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  276\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  280\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  275\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  274\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  272\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  269\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  265\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  253\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  255\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  257\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  256\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  259\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  261\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  264\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  267\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  270\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  273\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  278\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  282\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  291\nRoll:  291\nRoll:  291\nRoll:  291\nRoll:  291\nRoll:  291\nRoll:  291\nRoll:  297\nRoll:  297\nRoll:  297\nRoll:  297\nRoll:  297\nRoll:  297\nRoll:  297\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  303\nRoll:  303\nRoll:  303\nRoll:  303\nRoll:  303\nRoll:  303\nRoll:  303\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  305\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  304\nRoll:  302\nRoll:  302\nRoll:  302\nRoll:  302\nRoll:  302\nRoll:  302\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  301\nRoll:  300\nRoll:  300\nRoll:  300\nRoll:  300\nRoll:  300\nRoll:  300\nRoll:  300\nRoll:  299\nRoll:  299\nRoll:  299\nRoll:  299\nRoll:  299\nRoll:  299\nRoll:  299\nRoll:  299\nRoll:  299\nRoll:  299\nRoll:  299\nRoll:  299\nRoll:  299\nRoll:  299\nRoll:  298\nRoll:  298\nRoll:  298\nRoll:  298\nRoll:  298\nRoll:  297\nRoll:  297\nRoll:  297\nRoll:  297\nRoll:  297\nRoll:  297\nRoll:  297\nRoll:  296\nRoll:  296\nRoll:  296\nRoll:  296\nRoll:  296\nRoll:  296\nRoll:  296\nRoll:  298\nRoll:  298\nRoll:  298\nRoll:  298\nRoll:  298\nRoll:  298\nRoll:  303\nRoll:  303\nRoll:  303\nRoll:  303\nRoll:  303\nRoll:  303\nRoll:  303\nRoll:  307\nRoll:  307\nRoll:  307\nRoll:  307\nRoll:  307\nRoll:  307\nRoll:  307\nRoll:  311\nRoll:  311\nRoll:  311\nRoll:  311\nRoll:  311\nRoll:  311\nRoll:  311\nRoll:  318\nRoll:  318\nRoll\n:  318\nRoll:  318\nRoll:  318\nRoll:  318\nRoll:  324\nRoll:  324\nRoll:  324\nRoll:  324\nRoll:  324\nRoll:  324\nRoll:  324\nRoll:  330\nRoll:  330\nRoll:  330\nRoll:  330\nRoll:  330\nRoll:  330\nRoll:  330\nRoll:  336\nRoll:  336\nRoll:  336\nRoll:  336\nRoll:  336\nRoll:  345\nRoll:  345\nRoll:  345\nRoll:  345\nRoll:  345\nRoll:  345\nRoll:  345\nRoll:  357\nRoll:  357\nRoll:  357\nRoll:  357\nRoll:  357\nRoll:  357\nRoll:  357\nRoll:  369\nRoll:  369\nRoll:  369\nRoll:  369\nRoll:  369\nRoll:  369\nRoll:  369\nRoll:  380\nRoll:  380\nRoll:  380\nRoll:  380\nRoll:  380\nRoll:  380\nRoll:  389\nRoll:  389\nRoll:  389\nRoll:  389\nRoll:  389\nRoll:  389\nRoll:  389\nRoll:  394\nRoll:  394\nRoll:  394\nRoll:  394\nRoll:  394\nRoll:  394\nRoll:  394\nRoll:  396\nRoll:  396\nRoll:  396\nRoll:  396\nRoll:  396\nRoll:  396\nRoll:  398\nRoll:  398\nRoll:  398\nRoll:  398\nRoll:  398\nRoll:  398\nRoll:  398\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  397\nRoll:  397\nRoll:  397\nRoll:  397\nRoll:  397\nRoll:  397\nRoll:  397\nRoll:  394\nRoll:  394\nRoll:  394\nRoll:  394\nRoll:  394\nRoll:  394\nRoll:  396\nRoll:  396\nRoll:  396\nRoll:  396\nRoll:  396\nRoll:  396\nRoll:  396\nRoll:  398\nRoll:  398\nRoll:  398\nRoll:  398\nRoll:  398\nRoll:  398\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  401\nRoll:  401\nRoll:  401\nRoll:  401\nRoll:  401\nRoll:  401\nRoll:  401\nRoll:  406\nRoll:  406\nRoll:  406\nRoll:  406\nRoll:  406\nRoll:  406\nRoll:  411\nRoll:  411\nRoll:  411\nRoll:  411\nRoll:  411\nRoll:  411\nRoll:  411\nRoll:  414\nRoll:  414\nRoll:  414\nRoll:  414\nRoll:  414\nRoll:  416\nRoll:  416\nRoll:  416\nRoll:  416\nRoll:  416\nRoll:  416\nRoll:  416\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  420\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  419\nRoll:  419\nRoll:  419\nRoll:  419\nRoll:  419\nRoll:  419\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  418\nRoll:  414\nRoll:  414\nRoll:  414\nRoll:  414\nRoll:  414\nRoll:  414\nRoll:  414\nRoll:  417\nRoll:  417\nRoll:  417\nRoll:  417\nRoll:  417\nRoll:  417\nRoll:  421\nRoll:  421\nRoll:  421\nRoll:  421\nRoll:  421\nRoll:  421\nRoll:  421\nRoll:  425\nRoll:  425\nRoll:  425\nRoll:  425\nRoll:  425\nRoll:  425\nRoll:  427\nRoll:  427\nRoll:  427\nRoll:  427\nRoll:  427\nRoll:  427\nRoll:  427\nRoll:  430\nRoll:  430\nRoll:  430\nRoll:  430\nRoll:  430\nRoll:  430\nRoll:  430\nRoll:  430\nRoll:  430\nRoll:  430\nRoll:  430\nRoll:  429\nRoll:  429\nRoll:  429\nRoll:  429\nRoll:  429\nRoll:  429\nRoll:  429\nRoll:  428\nRoll:  428\nRoll:  428\nRoll:  428\nRoll:  428\nRoll:  428\nRoll:  429\nRoll:  429\nRoll:  429\nRoll:  429\nRoll:  429\nRoll:  429\nRoll:  429\nRoll:  434\nRoll:  434\nRoll:  434\nRoll:  434\nRoll:  434\nRoll:  434\nRoll:  441\nRoll:  441\nRoll:  441\nRoll:  441\nRoll:  441\nRoll:  441\nRoll:  441\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  443\nRoll:  443\nRoll:  443\nRoll:  443\nRoll:  443\nRoll:  443\nRoll:  445\nRoll:  445\nRoll:  445\nRoll:  445\nRoll:  445\nRoll:  445\nRoll:  449\nRoll:  449\nRoll:  449\nRoll:  449\nRoll:  449\nRoll:  449\nRoll:  450\nRoll:  450\nRoll:  450\nRoll:  450\nRoll:  450\nRoll:  450\nRoll:  453\nRoll:  453\nRoll:  453\nRoll:  453\nRoll:  453\nRoll:  453\nRoll:  453\nRoll:  454\nRoll:  454\nRoll:  454\nRoll:  454\nRoll:  454\nRoll:  454\nRoll:  456\nRoll:  456\nRoll:  456\nRoll:  456\nRoll:  456\nRoll:  456\nRoll:  460\nRoll:  460\nRoll:  460\nRoll:  460\nRoll:  460\nRoll:  460\nRoll:  460\nRoll:  463\nRoll:  463\nRoll:  463\nRoll:  463\nRoll:  463\nRoll:  463\nRoll:  464\nRoll:  464\nRoll:  464\nRoll:  464\nRoll:  464\nRoll:  464\nRoll:  465\nRoll:  465\nRoll:  465\nRoll:  465\nRoll:  465\nRoll:  465\nRoll:  465\nRoll:  469\nRoll:  469\nRoll:  469\nRoll:  469\nRoll:  469\nRoll:  472\nRoll:  472\nRoll:  472\nRoll:  472\nRoll:  472\nRoll:  472\nRoll:  474\nRoll:  474\nRoll:  474\nRoll:  474\nRoll:  474\nRoll:  474\nRoll:  474\nRoll:  475\nRoll:  475\nRoll:  475\nRoll:  475\nRoll:  475\nRoll:  475\nRoll:  479\nRoll:  479\nRoll:  479\nRoll:  479\nRoll:  479\nRoll:  479\nRoll:  483\nRoll:  483\nRoll:  483\nRoll:  483\nRoll:  483\nRoll:  483\nRoll:  483\nRoll:  487\nRoll:  487\nRoll:  487\nRoll:  487\nRoll:  487\nRoll:  487\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  492\nRoll:  492\nRoll:  492\nRoll:  492\nRoll:  492\nRoll:  492\nRoll:  496\nRoll:  496\nRoll:  496\nRoll:  496\nRoll:  496\nRoll:  498\nRoll:  498\nRoll:  498\nRoll:  498\nRoll:  498\nRoll:  498\nRoll:  498\nRoll:  500\nRoll:  500\nRoll:  500\nRoll:  500\nRoll:  500\nRoll:  500\nRoll:  503\nRoll:  503\nRoll:  503\nRoll:  503\nRoll:  503\nRoll:  503\nRoll:  505\nRoll:  505\nRoll:  505\nRoll:  505\nRoll:  505\nRoll:  505\nRoll:  505\nRoll:  509\nRoll:  509\nRoll:  509\nRoll:  509\nRoll:  509\nRoll:  509\nRoll:  512\nRoll:  512\nRoll:  512\nRoll:  512\nRoll:  512\nRoll:  512\nRoll:  514\nRoll:  514\nRoll:  514\nRoll:  514\nRoll:  514\nRoll:  514\nRoll:  518\nRoll:  518\nRoll:  518\nRoll:  518\nRoll:  518\nRoll:  518\nRoll:  518\nRoll:  520\nRoll:  520\nRoll:  520\nRoll:  520\nRoll:  521\nRoll:  521\nRoll:  521\nRoll:  521\nRoll:  521\nRoll:  521\nRoll:  521\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  526\nRoll:  526\nRoll:  526\nRoll:  526\nRoll:  526\nRoll:  526\nRoll:  529\nRoll:  529\nRoll:  529\nRoll:  529\nRoll:  529\nRoll:  529\nRoll:  529\nRoll:  529\nRoll:  529\nRoll:  529\nRoll:  529\nRoll:  529\nRoll:  529\nRoll:  531\nRoll:  531\nRoll:  531\nRoll:  531\nRoll:  531\nRoll:  531\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  537\nRoll:  537\nRoll:  537\nRoll:  537\nRoll:  537\nRoll:  537\nRoll:  537\nRoll:  539\nRoll:  539\nRoll:  539\nRoll:  539\nRoll:  539\nRoll:  539\nRoll:  540\nRoll:  540\nRoll:  540\nRoll:  540\nRoll:  540\nRoll:  540\nRoll:  542\nRoll:  542\nRoll:  542\nRoll:  542\nRoll:  542\nRoll:  542\nRoll:  544\nRoll:  544\nRoll:  544\nRoll:  544\nRoll:  544\nRoll:  544\nRoll:  545\nRoll:  545\nRoll:  545\nRoll:  545\nRoll:  545\nRoll:  545\nRoll:  546\nRoll:  546\nRoll:  546\nRoll:  546\nRoll:  546\nRoll:  547\nRoll:  547\nRoll:  547\nRoll:  547\nRoll:  547\nRoll:  547\nRoll:  547\nRoll:  548\nRoll:  548\nRoll:  548\nRoll:  548\nRoll:  548\nRoll:  548\nRoll:  547\nRoll:  547\nRoll:  547\nRoll:  547\nRoll:  547\nRoll:  547\nRoll:  546\nRoll:  546\nRoll:  546\nRoll:  546\nRoll:  546\nRoll:  546\nRoll:  544\nRoll:  544\nRoll:  544\nRoll:  544\nRoll:  544\nRoll:  544\nRoll:  541\nRoll:  541\nRoll:  541\nRoll:  541\nRoll:  541\nRoll:  541\nRoll:  537\nRoll:  537\nRoll:  537\nRoll:  537\nRoll:  537\nRoll:  537\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  534\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  532\nRoll:  531\nRoll:  531\nRoll:  531\nRoll:  531\nRoll:  530\nRoll:  530\nRoll:  530\nRoll:  530\nRoll:  530\nRoll:  530\nRoll:  528\nRoll:  528\nRoll:  528\nRoll:  528\nRoll:  528\nRoll:  528\nRoll:  528\nRoll:  527\nRoll:  527\nRoll:  527\nRoll:  527\nRoll:  527\nRoll:  526\nRoll:  526\nRoll:  526\nRoll:  526\nRoll:  526\nRoll:  526\nRoll:  526\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  524\nRoll:  522\nRoll:  522\nRoll:  522\nRoll:  522\nRoll:  522\nRoll:  522\nRoll:  519\nRoll:  519\nRoll:  519\nRoll:  519\nRoll:  519\nRoll:  519\nRoll:  516\nRoll:  516\nRoll:  516\nRoll:  516\nRoll:  516\nRoll:  516\nRoll:  513\nRoll:  513\nRoll:  513\nRoll:  513\nRoll:  513\nRoll:  511\nRoll:  511\nRoll:  511\nRoll:  511\nRoll:  511\nRoll:  511\nRoll:  508\nRoll:  508\nRoll:  508\nRoll:  508\nRoll:  508\nRoll:  508\nRoll:  506\nRoll:  506\nRoll:  506\nRoll:  506\nRoll:  506\nRoll:  506\nRoll:  504\nRoll:  504\nRoll:  504\nRoll:  504\nRoll:  504\nRoll:  504\nRoll:  502\nRoll:  502\nRoll:  502\nRoll:  502\nRoll:  502\nRoll:  502\nRoll:  500\nRoll:  500\nRoll:  500\nRoll:  500\nRoll:  500\nRoll:  500\nRoll:  498\nRoll:  498\nRoll:  498\nRoll:  498\nRoll:  498\nRoll:  498\nRoll:  496\nRoll:  496\nRoll:  496\nRoll:  496\nRoll:  496\nRoll:  496\nRoll:  493\nRoll:  493\nRoll:  493\nRoll:  493\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  490\nRoll:  488\nRoll:  488\nRoll:  488\nRoll:  488\nRoll:  488\nRoll:  488\nRoll:  486\nRoll:  486\nRoll:  486\nRoll:  486\nRoll:  486\nRoll:  486\nRoll:  484\nRoll:  484\nRoll:  484\nRoll:  484\nRoll:  484\nRoll:  484\nRoll:  481\nRoll:  481\nRoll:  481\nRoll:  481\nRoll:  481\nRoll:  481\nRoll:  479\nRoll:  479\nRoll:  479\nRoll:  479\nRoll:  479\nRoll:  479\nRoll:  477\nRoll:  477\nRoll:  477\nRoll:  477\nRoll:  477\nRoll:  474\nRoll:  474\nRoll:  474\nRoll:  474\nRoll:  474\nRoll:  474\nRoll:  471\nRoll:  471\nRoll:  471\nRoll:  471\nRoll:  471\nRoll:  471\nRoll:  468\nRoll:  468\nRoll:  468\nRoll:  468\nRoll:  468\nRoll:  468\nRoll:  464\nRoll:  464\nRoll:  464\nRoll:  464\nRoll:  464\nRoll:  464\nRoll:  461\nRoll:  461\nRoll:  461\nRoll:  461\nRoll:  461\nRoll:  457\nRoll:  457\nRoll:  457\nRoll:  457\nRoll:  457\nRoll:  457\nRoll:  453\nRoll:  453\nRoll:  453\nRoll:  453\nRoll:  453\nRoll:  453\nRoll:  449\nRoll:  449\nRoll\n:  449\nRoll:  449\nRoll:  449\nRoll:  449\nRoll:  447\nRoll:  447\nRoll:  447\nRoll:  447\nRoll:  447\nRoll:  447\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  444\nRoll:  442\nRoll:  442\nRoll:  442\nRoll:  442\nRoll:  442\nRoll:  442\nRoll:  440\nRoll:  440\nRoll:  440\nRoll:  440\nRoll:  440\nRoll:  440\nRoll:  437\nRoll:  437\nRoll:  437\nRoll:  437\nRoll:  437\nRoll:  437\nRoll:  434\nRoll:  434\nRoll:  434\nRoll:  434\nRoll:  434\nRoll:  434\nRoll:  430\nRoll:  430\nRoll:  430\nRoll:  430\nRoll:  430\nRoll:  427\nRoll:  427\nRoll:  427\nRoll:  427\nRoll:  427\nRoll:  427\nRoll:  424\nRoll:  424\nRoll:  424\nRoll:  424\nRoll:  424\nRoll:  424\nRoll:  421\nRoll:  421\nRoll:  421\nRoll:  421\nRoll:  421\nRoll:  421\nRoll:  417\nRoll:  417\nRoll:  417\nRoll:  417\nRoll:  417\nRoll:  414\nRoll:  414\nRoll:  414\nRoll:  414\nRoll:  414\nRoll:  414\nRoll:  409\nRoll:  409\nRoll:  409\nRoll:  409\nRoll:  409\nRoll:  405\nRoll:  405\nRoll:  405\nRoll:  405\nRoll:  405\nRoll:  405\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  400\nRoll:  395\nRoll:  395\nRoll:  395\nRoll:  395\nRoll:  395\nRoll:  395\nRoll:  390\nRoll:  390\nRoll:  390\nRoll:  390\nRoll:  390\nRoll:  390\nRoll:  384\nRoll:  384\nRoll:  384\nRoll:  384\nRoll:  384\nRoll:  379\nRoll:  379\nRoll:  379\nRoll:  379\nRoll:  379\nRoll:  379\nRoll:  373\nRoll:  373\nRoll:  373\nRoll:  373\nRoll:  373\nRoll:  373\nRoll:  367\nRoll:  367\nRoll:  367\nRoll:  367\nRoll:  367\nRoll:  360\nRoll:  360\nRoll:  360\nRoll:  360\nRoll:  360\nRoll:  360\nRoll:  353\nRoll:  353\nRoll:  353\nRoll:  353\nRoll:  353\nRoll:  344\nRoll:  344\nRoll:  344\nRoll:  344\nRoll:  344\nRoll:  344\nRoll:  335\nRoll:  335\nRoll:  335\nRoll:  335\nRoll:  335\nRoll:  335\nRoll:  327\nRoll:  327\nRoll:  327\nRoll:  327\nRoll:  327\nRoll:  327\nRoll:  318\nRoll:  318\nRoll:  318\nRoll:  318\nRoll:  318\nRoll:  310\nRoll:  310\nRoll:  310\nRoll:  310\nRoll:  310\nRoll:  310\nRoll:  302\nRoll:  302\nRoll:  302\nRoll:  302\nRoll:  302\nRoll:  302\nRoll:  293\nRoll:  293\nRoll:  293\nRoll:  293\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  286\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  277\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  268\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  258\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  218\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  126\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  103\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  81\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  147\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  220\nRoll:  220\nRoll:  220\nRoll:  220\nRoll:  220\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  227\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  236\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  247\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  250\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  254\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  252\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  249\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  246\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  242\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  239\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  234\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  229\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  224\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  185\nRoll:  185\nRoll:  185\nRoll:  185\nRoll:  185\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  213\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  212\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRol\nl:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  211\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  210\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  209\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  208\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  207\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  206\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  205\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  204\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  203\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  202\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  201\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  200\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  199\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  193\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  195\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  197\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  198\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  196\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  194\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  192\nRoll:  190\nRoll:  190\nRoll:  190\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  191\nRoll:  191\nRol"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot react even faster with a max speed of 300?"
}
ChatGPT: Hey Human, Did the robot react even faster with a max speed of 300?
Submitting tool outputs: [{'tool_call_id': 'call_xtOOXNbXvQqMHV4JM7ZiQVOf', 'output': 'yes, try using proportional control with a max speed of 500'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "proportional control"
}
ChatGPT: I am querying documentation for proportional control
No available information on proportional control. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help.
Submitting tool outputs: [{'tool_call_id': 'call_smXV6dnjg7i8LjzHJEQDl9zS', 'output': '"No available information on proportional control. Try rephrasing the term you are querying,                                 for example changing underscores or phrasing,                                 or alternatively ask the human for help."'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Proportional gain\nKp = 3\n\n# Desired roll value\nroll_desired = 0\n\n# Start loop\nwhile True:\n    pitch, roll, _ = motion_sensor.tilt_angles()\n    print('Roll: ', roll)\n    \n    # Calculate error\n    error = roll_desired - roll\n    \n    # Apply proportional control\n    speed = Kp * error\n    \n    # Limit speed to [500]\n    speed = max(min(500, speed), -500)\n    \n    motor_pair.move_tank(motor_pair.PAIR_1, speed, speed)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Proportional gain
Kp = 3

# Desired roll value
roll_desired = 0

# Start loop
while True:
   pitch, roll, _ = motion_sensor.tilt_angles()
   print('Roll: ', roll)
   
   # Calculate error
   error = roll_desired - roll
   
   # Apply proportional control
   speed = Kp * error
   
   # Limit speed to [500]
   speed = max(min(500, speed), -500)
   
   motor_pair.move_tank(motor_pair.PAIR_1, speed, speed)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -76
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105

=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Proportional gain
=== 
Kp = 3
=== 

=== 
# Desired roll value
=== 
roll_desired = 0
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   
=== 
   # Calculate error
=== 
   error = roll_desired - roll
=== 
   
=== 
   # Apply proportional control
=== 
   speed = Kp * error
=== 
   
=== 
   # Limit speed to [500]
=== 
   speed = max(min(500, speed), -500)
=== 
   
=== 
   motor_pair.move_tank(motor_pair.PAIR_1, speed, speed)
=== 


=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Proportional gain
=== 
Kp = 3
=== 

=== 
# Desired roll value
=== 
roll_desired = 0
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   
=== 
   # Calculate error
=== 
   error = roll_desired - roll
=== 
   
=== 
   # Apply proportional control
=== 
   speed = Kp * error
=== 
   
=== 
   # Limit speed to [500]
=== 
   speed = max(min(500, speed), -500)
=== 
   
=== 
   motor_pair.move_tank(motor_pair.PAIR_1, speed, speed)
=== 

Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -110
Roll:  -110
Roll:
-110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -1
18
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -186
Roll:  -186
Roll:  -186
Roll:  -186
Roll:  -186
Roll:  -186
Roll:  -186
Roll:  -186
Roll:  -186
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -197
Roll:  -197
Roll:  -197
Roll:  -197
Roll:  -197
Roll:  -197
Roll:  -197
Roll:  -197
Roll:  -200
Roll:  -200
Roll:  -200
Roll:  -200
Roll:  -200
Roll:  -200
Roll:  -200
Roll:  -200
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -206
Roll:  -206
Roll:  -206
Roll:  -206
Roll:  -206
Roll:  -206
Roll:  -206
Roll:  -206
Roll:  -206
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -226
Roll:  -226
Roll:  -226
Roll:  -226
Roll:  -226
Roll:  -226
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -237
Roll:  -237
Roll:  -237
Roll:  -237
Roll:  -237
Roll:  -237
Roll:  -237
Roll:  -237
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -240
Roll:  -240
Roll:  -240
Roll:  -240
Roll:  -240
Roll:  -240
Roll:  -240
Roll:  -240
Roll:  -241
Roll:  -241
Roll:  -241
Roll:  -241
Roll:  -241
Roll:  -241
Roll:  -241
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -242
Roll:  -243
Roll:  -243
Roll:  -243
Roll:  -243
Roll:  -243
Roll:  -243
Roll:  -243
Roll:  -241
Roll:  -241
Roll:  -241
Roll:  -241
Roll:  -241
Roll:  -241
Roll:  -241
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -239
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -238
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll
:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -230
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -232
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -234
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -236
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -235
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -233
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -231
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -229
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -228
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -227
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -225
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -224
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -195
Roll:  -195
Roll:  -195
Roll:  -195
Roll:  -195
Roll:  -195
Roll:  -195
Roll:  -192
Roll:  -192
Roll:  -192
Roll:  -192
Roll:  -192
Roll:  -192
Roll:  -192
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -184
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -190
Roll:  -193
Roll:  -193
Roll:  -193
Roll:  -193
Roll:  -193
Roll:  -193
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -202
Roll:  -202
Roll:  -202
Roll:  -202
Roll:  -202
Roll:  -202
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -199
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -195
Roll:  -195
Roll:  -195
Roll:  -195
Roll:  -195
Roll:  -195
Roll:  -193
Roll:  -193
Roll:  -193
Roll:  -193
Roll:  -193
Roll:  -193
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -198
Roll:  -198
Roll:  -198
Roll:  -198
Roll:  -198
Roll:  -198
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -204
Roll:  -204
Roll:  -204
Roll:  -204
Roll:  -204
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -205
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -208
Roll:  -209
Roll:  -209
Roll:  -209
Roll:  -209
Roll:  -209
Roll:  -209
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -210
Roll:  -212
Roll:  -212
Roll:  -212
Roll:  -212
Roll:  -212
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -216
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -213
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -223
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -222
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -221
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -220
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -219
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -218
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -217
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -215
Roll:  -214
Roll:  -214
Roll:  -214
Roll:  -214
Roll:  -214
Roll:  -214
Roll:  -212
Roll:  -212
Roll:  -212
Roll:  -212
Roll:  -212
Roll:  -212
Roll:  -209
Roll:  -209
Roll:  -209
Roll:  -209
Roll:  -209
Roll:  -209
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -207
Roll:  -206
Roll:  -206
Roll:  -206
Roll:  -206
Roll:  -206
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -203
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -201
Roll:  -198
Roll:  -198
Roll:  -198
Roll:  -198
Roll:  -198
Roll:  -198
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -196
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -194
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -191
Roll:  -189
Roll:  -189
Roll:  -189
Roll:  -189
Roll:  -189
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -187
Roll:  -185
Roll:  -185
Roll:  -185
Roll:  -185
Roll:  -185
Roll:  -185
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -183
Roll:  -182
Roll:  -182
Roll:  -182
Roll:  -182
Roll:  -182
Roll:  -182
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -178
Roll:  -178
Roll:  -178
Roll:  -178
Roll:  -178
Roll:  -178
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:
-172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -165
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -88
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -95
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -92
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -79
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -74
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -69
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -61
Roll:  -58
Roll:  -58
Roll:  -58
Roll:  -58
Roll:  -58
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -57
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  2
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  30
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  38
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  60
Roll:  60
Roll:  60
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  61
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  64
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  68
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  69
Roll:  69
Roll:  69
Roll:  69
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  37
Roll:  37
Roll:  37
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  21
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  18
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  14
======================================= END =======================================
ll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  20
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  25
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  39
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  42
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  47
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  51
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  59
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_hsSBrjNHvnpVhXIzUPtecYFN', 'output': "\r\n=== \nimport motor_pair\r\n=== \nfrom hub import port, motion_sensor\r\n=== \n\r\n=== \n# Initialize motor pair\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \n\r\n=== \n# Proportional gain\r\n=== \nKp = 3\r\n=== \n\r\n=== \n# Desired roll value\r\n=== \nroll_desired = 0\r\n=== \n\r\n=== \n# Start loop\r\n=== \nwhile True:\r\n=== \n   pitch, roll, _ = motion_sensor.tilt_angles()\r\n=== \n   print('Roll: ', roll)\r\n=== \n   \r\n=== \n   # Calculate error\r\n=== \n   error = roll_desired - roll\r\n=== \n   \r\n=== \n   # Apply proportional control\r\n=== \n   speed = Kp * error\r\n=== \n   \r\n=== \n   # Limit speed to [500]\r\n=== \n   speed = max(min(500, speed), -500)\r\n=== \n   \r\n=== \n   motor_pair.move_tank(motor_pair.PAIR_1, speed, speed)\r\n=== \n\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -110\nRoll:  -110\nRoll:\n-110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -1\n18\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -186\nRoll:  -186\nRoll:  -186\nRoll:  -186\nRoll:  -186\nRoll:  -186\nRoll:  -186\nRoll:  -186\nRoll:  -186\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -197\nRoll:  -197\nRoll:  -197\nRoll:  -197\nRoll:  -197\nRoll:  -197\nRoll:  -197\nRoll:  -197\nRoll:  -200\nRoll:  -200\nRoll:  -200\nRoll:  -200\nRoll:  -200\nRoll:  -200\nRoll:  -200\nRoll:  -200\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -206\nRoll:  -206\nRoll:  -206\nRoll:  -206\nRoll:  -206\nRoll:  -206\nRoll:  -206\nRoll:  -206\nRoll:  -206\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -226\nRoll:  -226\nRoll:  -226\nRoll:  -226\nRoll:  -226\nRoll:  -226\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -237\nRoll:  -237\nRoll:  -237\nRoll:  -237\nRoll:  -237\nRoll:  -237\nRoll:  -237\nRoll:  -237\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -240\nRoll:  -240\nRoll:  -240\nRoll:  -240\nRoll:  -240\nRoll:  -240\nRoll:  -240\nRoll:  -240\nRoll:  -241\nRoll:  -241\nRoll:  -241\nRoll:  -241\nRoll:  -241\nRoll:  -241\nRoll:  -241\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -242\nRoll:  -243\nRoll:  -243\nRoll:  -243\nRoll:  -243\nRoll:  -243\nRoll:  -243\nRoll:  -243\nRoll:  -241\nRoll:  -241\nRoll:  -241\nRoll:  -241\nRoll:  -241\nRoll:  -241\nRoll:  -241\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -239\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -238\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll\n:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -230\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -232\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -234\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -236\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -235\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -233\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -231\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -229\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -228\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -227\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -225\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -224\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -195\nRoll:  -195\nRoll:  -195\nRoll:  -195\nRoll:  -195\nRoll:  -195\nRoll:  -195\nRoll:  -192\nRoll:  -192\nRoll:  -192\nRoll:  -192\nRoll:  -192\nRoll:  -192\nRoll:  -192\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -184\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -190\nRoll:  -193\nRoll:  -193\nRoll:  -193\nRoll:  -193\nRoll:  -193\nRoll:  -193\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -202\nRoll:  -202\nRoll:  -202\nRoll:  -202\nRoll:  -202\nRoll:  -202\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -199\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -195\nRoll:  -195\nRoll:  -195\nRoll:  -195\nRoll:  -195\nRoll:  -195\nRoll:  -193\nRoll:  -193\nRoll:  -193\nRoll:  -193\nRoll:  -193\nRoll:  -193\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -198\nRoll:  -198\nRoll:  -198\nRoll:  -198\nRoll:  -198\nRoll:  -198\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -204\nRoll:  -204\nRoll:  -204\nRoll:  -204\nRoll:  -204\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -205\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -208\nRoll:  -209\nRoll:  -209\nRoll:  -209\nRoll:  -209\nRoll:  -209\nRoll:  -209\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -210\nRoll:  -212\nRoll:  -212\nRoll:  -212\nRoll:  -212\nRoll:  -212\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -216\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -213\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -223\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -222\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -221\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -220\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -219\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -218\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -217\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -215\nRoll:  -214\nRoll:  -214\nRoll:  -214\nRoll:  -214\nRoll:  -214\nRoll:  -214\nRoll:  -212\nRoll:  -212\nRoll:  -212\nRoll:  -212\nRoll:  -212\nRoll:  -212\nRoll:  -209\nRoll:  -209\nRoll:  -209\nRoll:  -209\nRoll:  -209\nRoll:  -209\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -207\nRoll:  -206\nRoll:  -206\nRoll:  -206\nRoll:  -206\nRoll:  -206\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -203\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -201\nRoll:  -198\nRoll:  -198\nRoll:  -198\nRoll:  -198\nRoll:  -198\nRoll:  -198\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -196\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -194\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -191\nRoll:  -189\nRoll:  -189\nRoll:  -189\nRoll:  -189\nRoll:  -189\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -187\nRoll:  -185\nRoll:  -185\nRoll:  -185\nRoll:  -185\nRoll:  -185\nRoll:  -185\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -183\nRoll:  -182\nRoll:  -182\nRoll:  -182\nRoll:  -182\nRoll:  -182\nRoll:  -182\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -178\nRoll:  -178\nRoll:  -178\nRoll:  -178\nRoll:  -178\nRoll:  -178\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:\n-172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -165\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -95\nRoll:  -95\nRoll:  -95\nRoll:  -95\nRoll:  -95\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -88\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -95\nRoll:  -95\nRoll:  -95\nRoll:  -95\nRoll:  -95\nRoll:  -95\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -92\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -79\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -74\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -69\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -61\nRoll:  -58\nRoll:  -58\nRoll:  -58\nRoll:  -58\nRoll:  -58\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -57\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -44\nRoll:  -44\nRoll:  -44\nRoll:  -44\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -37\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -19\nRoll:  -19\nRoll:  -19\nRoll:  -19\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  2\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  30\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  36\nRoll:  36\nRoll:  36\nRoll:  36\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  38\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  51\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  61\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  64\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  68\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  69\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  59\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  52\nRoll:  52\nRoll:  52\nRoll:  52\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  47\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  42\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  39\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  25\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  21\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  18\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  14"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot respond smoothly to changes in tilt with the proportional control?"
}
ChatGPT: Hey Human, Did the robot respond smoothly to changes in tilt with the proportional control?
Submitting tool outputs: [{'tool_call_id': 'call_iuM9qODofPa5sqJ3eOEqgvvf', 'output': 'it looks like the motor directions are flipped'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port, motion_sensor\n\n# Initialize motor pair\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n# Proportional gain\nKp = 3\n\n# Desired roll value\nroll_desired = 0\n\n# Start loop\nwhile True:\n    pitch, roll, _ = motion_sensor.tilt_angles()\n    print('Roll: ', roll)\n    \n    # Calculate error\n    error = roll_desired - roll\n    \n    # Apply proportional control\n    speed = Kp * error\n    \n    # Limit speed to [500]\n    speed = max(min(500, speed), -500)\n    \n    # Flip motor direction\n    speed = -speed\n\n    motor_pair.move_tank(motor_pair.PAIR_1, speed, speed)",
"runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port, motion_sensor

# Initialize motor pair
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)

# Proportional gain
Kp = 3

# Desired roll value
roll_desired = 0

# Start loop
while True:
   pitch, roll, _ = motion_sensor.tilt_angles()
   print('Roll: ', roll)
   
   # Calculate error
   error = roll_desired - roll
   
   # Apply proportional control
   speed = Kp * error
   
   # Limit speed to [500]
   speed = max(min(500, speed), -500)
   
   # Flip motor direction
   speed = -speed

   motor_pair.move_tank(motor_pair.PAIR_1, speed, speed)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -37
Roll:  -35
Roll:  -35

=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Proportional gain
=== 
Kp = 3
=== 

=== 
# Desired roll value
=== 
roll_desired = 0
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   
=== 
   # Calculate error
=== 
   error = roll_desired - roll
=== 
   
=== 
   # Apply proportional control
=== 
   speed = Kp * error
=== 
   
=== 
   # Limit speed to [500]
=== 
   speed = max(min(500, speed), -500)
=== 
   
=== 
   # Flip motor direction
=== 
   speed = -speed
=== 

=== 
   motor_pair.move_tank(motor_pair.PAIR_1, speed, speed)
=== 


=== 
import motor_pair
=== 
from hub import port, motion_sensor
=== 

=== 
# Initialize motor pair
=== 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
=== 

=== 
# Proportional gain
=== 
Kp = 3
=== 

=== 
# Desired roll value
=== 
roll_desired = 0
=== 

=== 
# Start loop
=== 
while True:
=== 
   pitch, roll, _ = motion_sensor.tilt_angles()
=== 
   print('Roll: ', roll)
=== 
   
=== 
   # Calculate error
=== 
   error = roll_desired - roll
=== 
   
=== 
   # Apply proportional control
=== 
   speed = Kp * error
=== 
   
=== 
   # Limit speed to [500]
=== 
   speed = max(min(500, speed), -500)
=== 
   
=== 
   # Flip motor direction
=== 
   speed = -speed
=== 

=== 
   motor_pair.move_tank(motor_pair.PAIR_1, speed, speed)
=== 

Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -35
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -33
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -24
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  5
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  16
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  13
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  10
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  6
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -3
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -6
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -19
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -12
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -10
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -9
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -15
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -21
Ro
ll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -22
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -30
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -28
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -25
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -7
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  11
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  27
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  31
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  35
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  40
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  43
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  45
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  49
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  52
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  57
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  73
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  77
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  107
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  110
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  114
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  117
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  120
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:
183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  155
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  152
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  142
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  125
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  118
Roll:  115
Roll:  115
Roll:  115
Roll:  115
Roll:  115
Roll:  115
Roll:  115
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  106
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  99
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  96
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  92
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  89
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  85
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  80
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  76
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  72
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  65
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  60
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  56
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  34
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  29
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  26
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  22
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  15
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  8
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -2
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -14
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -17
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -20
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -29
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -34
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -39
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -41
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -43
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -45
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -46
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -48
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -52
Roll:  -55
Roll:  -55
Roll:  -55
Roll:  -55
Roll:  -55
Roll:  -55
Roll:  -55
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -59
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -71
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -75
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -78
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -119
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -122
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -180
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -179
Roll:  -178
Roll:  -178
Roll:  -178
Roll:  -178
Roll:  -178
Roll:  -178
Roll:  -178
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -177
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -167
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -163
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
R
oll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -131
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -127
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -89
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -85
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -80
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -72
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -68
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -63
Roll:  -58
Roll:  -58
Roll:  -58
Roll:  -58
Roll:  -58
Roll:  -58
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -54
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -49
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -44
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -40
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -36
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -31
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -26
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -21
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -16
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -11
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -5
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  -1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  1
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  3
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  7
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  12
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  17
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  23
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  32
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  37
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  44
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  48
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  53
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  54
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  63
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  67
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  71
Roll:  74
Roll:  74
Roll:  74
Roll:  74
Roll:  74
Roll:  74
Roll:  78
Roll:  78
Roll:  78
Roll:  78
Roll:  78
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  86
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  90
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  94
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  104
Roll:  104
Roll:  104
Roll:  104
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  111
Roll:  115
Roll:  115
Roll:  115
Roll:  115
Roll:  115
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  123
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  134
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  136
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  145
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  189
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  18
2
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  158
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  140
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  133
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  130
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  127
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  124
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  122
Roll:  119
Roll:  119
Roll:  119
Roll:  119
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  116
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  112
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  109
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  108
Roll:  104
Roll:  104
Roll:  104
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  101
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  97
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  93
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  91
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  87
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  84
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  82
Roll:  78
Roll:  78
Roll:  78
Roll:  78
Roll:  75
Roll:  75
Roll:  75
Roll:  75
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  70
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  66
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  62
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  58
Roll:  55
Roll:  55
Roll:  55
Roll:  55
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  50
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  46
Roll:  41
Roll:  41
Roll:  41
Roll:  41
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  36
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  33
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  28
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  24
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  19
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  14
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  9
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  4
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  0
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -4
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -8
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -13
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -18
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -23
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -27
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -32
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -38
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -42
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -47
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -50
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -56
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -60
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -65
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -67
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -70
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -73
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -82
Roll:  -86
Roll:  -86
Roll:  -86
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -90
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -94
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -158
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -169
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -175
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -176
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -174
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -172
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -173
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -171
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -170
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -168
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -166
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -164
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -162
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -161
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -160
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -159
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -157
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
R
oll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -152
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -146
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -139
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -124
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -117
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -113
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -112
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -110
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -107
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -105
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -103
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -102
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -96
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -98
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -99
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -101
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -109
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -111
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -114
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -116
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -121
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -125
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -128
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -130
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -156
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -155
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -154
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -153
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -151
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -150
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -149
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -148
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -147
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -145
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -134
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -133
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -136
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -142
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -144
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -143
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -140
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -141
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -138
Roll:  -137
Roll:  -137
Roll:  -137
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -135
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -132
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -129
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -126
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -123
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -120
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -118
Roll:  -115
Roll:  -115
Roll:  -115
Roll:  -112
Roll:  -112
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -108
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -106
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -104
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -100
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -97
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -93
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -91
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -87
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -84
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -83
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -81
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll:  -77
Roll
======================================= END =======================================
:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  165
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  185
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  188
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  187
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  186
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  184
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  183
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  182
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  181
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  180
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  179
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  178
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  177
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  176
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  175
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  174
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  173
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  172
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  171
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  170
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  167
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  169
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  168
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  166
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  163
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  164
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  162
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  160
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  161
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  159
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  157
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  156
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  154
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  153
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  151
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  149
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  150
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  147
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  148
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  146
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  144
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  143
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  141
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  139
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  137
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  135
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  132
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  131
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  129
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  128
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  126
Roll:  124
Roll:  124
Roll
 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Y9T2ADrNDr3zpV5qNcsrnjIO', 'output': "\r\n=== \nimport motor_pair\r\n=== \nfrom hub import port, motion_sensor\r\n=== \n\r\n=== \n# Initialize motor pair\r\n=== \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\r\n=== \n\r\n=== \n# Proportional gain\r\n=== \nKp = 3\r\n=== \n\r\n=== \n# Desired roll value\r\n=== \nroll_desired = 0\r\n=== \n\r\n=== \n# Start loop\r\n=== \nwhile True:\r\n=== \n   pitch, roll, _ = motion_sensor.tilt_angles()\r\n=== \n   print('Roll: ', roll)\r\n=== \n   \r\n=== \n   # Calculate error\r\n=== \n   error = roll_desired - roll\r\n=== \n   \r\n=== \n   # Apply proportional control\r\n=== \n   speed = Kp * error\r\n=== \n   \r\n=== \n   # Limit speed to [500]\r\n=== \n   speed = max(min(500, speed), -500)\r\n=== \n   \r\n=== \n   # Flip motor direction\r\n=== \n   speed = -speed\r\n=== \n\r\n=== \n   motor_pair.move_tank(motor_pair.PAIR_1, speed, speed)\r\n=== \n\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -35\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -33\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -24\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  5\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  16\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  13\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  10\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  6\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -3\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -6\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -19\nRoll:  -19\nRoll:  -19\nRoll:  -19\nRoll:  -19\nRoll:  -19\nRoll:  -19\nRoll:  -19\nRoll:  -19\nRoll:  -19\nRoll:  -19\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -12\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -10\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -9\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -15\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -21\nRo\nll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -22\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -30\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -28\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -25\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -7\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  11\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  27\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  31\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  35\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  40\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  43\nRoll:  43\nRoll:  43\nRoll:  43\nRoll:  43\nRoll:  43\nRoll:  43\nRoll:  43\nRoll:  43\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  45\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  49\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  52\nRoll:  52\nRoll:  52\nRoll:  52\nRoll:  52\nRoll:  52\nRoll:  52\nRoll:  52\nRoll:  52\nRoll:  52\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  57\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  73\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  77\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  107\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  110\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  114\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  117\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  120\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  161\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:\n183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  168\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  155\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  152\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  148\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  143\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  142\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  125\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  118\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  106\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  99\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  96\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  92\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  89\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  85\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  80\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  76\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  72\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  65\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  60\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  56\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  34\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  29\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  26\nRoll:  22\nRoll:  22\nRoll:  22\nRoll:  22\nRoll:  22\nRoll:  22\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  15\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  8\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -2\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -14\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -17\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -20\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -29\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -34\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -39\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -41\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -43\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -45\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -46\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -48\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -52\nRoll:  -55\nRoll:  -55\nRoll:  -55\nRoll:  -55\nRoll:  -55\nRoll:  -55\nRoll:  -55\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -59\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -71\nRoll:  -71\nRoll:  -71\nRoll:  -71\nRoll:  -71\nRoll:  -71\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -75\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -78\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -119\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -122\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -180\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -179\nRoll:  -178\nRoll:  -178\nRoll:  -178\nRoll:  -178\nRoll:  -178\nRoll:  -178\nRoll:  -178\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -177\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -167\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -163\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nR\noll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -131\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -127\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -89\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -85\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -80\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -72\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -68\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -63\nRoll:  -58\nRoll:  -58\nRoll:  -58\nRoll:  -58\nRoll:  -58\nRoll:  -58\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -54\nRoll:  -49\nRoll:  -49\nRoll:  -49\nRoll:  -49\nRoll:  -49\nRoll:  -49\nRoll:  -44\nRoll:  -44\nRoll:  -44\nRoll:  -44\nRoll:  -44\nRoll:  -44\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -40\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -36\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -31\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -26\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -21\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -16\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -11\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -5\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  -1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  1\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  3\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  7\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  12\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  17\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  23\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  32\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  37\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  44\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  48\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  53\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  54\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  63\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  67\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  71\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  74\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  86\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  90\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  94\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  111\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  115\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  123\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  134\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  136\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  139\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  145\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  150\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  154\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  157\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  159\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  163\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  173\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  189\nRoll:  189\nRoll:  189\nRoll:  189\nRoll:  189\nRoll:  189\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  187\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  188\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  185\nRoll:  185\nRoll:  185\nRoll:  185\nRoll:  185\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  186\nRoll:  185\nRoll:  185\nRoll:  185\nRoll:  185\nRoll:  185\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  184\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  183\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  182\nRoll:  18\n2\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  180\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  181\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  179\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  177\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  178\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  174\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  176\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  175\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  172\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  171\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  170\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  169\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  166\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  167\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  165\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  164\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  162\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  160\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  158\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  156\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  153\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  151\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  149\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  146\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  144\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  141\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  140\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  137\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  135\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  132\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  133\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  129\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  130\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  127\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  124\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  122\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  119\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  116\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  112\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  109\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  108\nRoll:  104\nRoll:  104\nRoll:  104\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  101\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  97\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  93\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  91\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  87\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  84\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  82\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  78\nRoll:  75\nRoll:  75\nRoll:  75\nRoll:  75\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  70\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  66\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  62\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  58\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  55\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  50\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  46\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  41\nRoll:  36\nRoll:  36\nRoll:  36\nRoll:  36\nRoll:  36\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  33\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  28\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  24\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  19\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  14\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  9\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  4\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  0\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -4\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -8\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -13\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -18\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -23\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -27\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -32\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -38\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -42\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -47\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -50\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -56\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -60\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -65\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -67\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -70\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -73\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -82\nRoll:  -82\nRoll:  -82\nRoll:  -82\nRoll:  -82\nRoll:  -82\nRoll:  -86\nRoll:  -86\nRoll:  -86\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -90\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -94\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -158\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -169\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -175\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -176\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -174\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -172\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -173\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -171\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -170\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -168\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -166\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -164\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -162\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -161\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -160\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -159\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -157\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nR\noll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -152\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -146\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -142\nRoll:  -142\nRoll:  -142\nRoll:  -142\nRoll:  -142\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -139\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -124\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -117\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -113\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -112\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -110\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -107\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -105\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -103\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -102\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -96\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -98\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -99\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -101\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -109\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -111\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -114\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -116\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -121\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -125\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -128\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -130\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -156\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -155\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -154\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -153\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -151\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -150\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -149\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -148\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -147\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -145\nRoll:  -144\nRoll:  -144\nRoll:  -144\nRoll:  -144\nRoll:  -144\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -142\nRoll:  -142\nRoll:  -142\nRoll:  -142\nRoll:  -142\nRoll:  -142\nRoll:  -142\nRoll:  -142\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -134\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -133\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -136\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -142\nRoll:  -142\nRoll:  -142\nRoll:  -142\nRoll:  -142\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -144\nRoll:  -144\nRoll:  -144\nRoll:  -144\nRoll:  -144\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -143\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -140\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -141\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -138\nRoll:  -137\nRoll:  -137\nRoll:  -137\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -135\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -132\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -129\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -126\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -123\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -120\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -118\nRoll:  -115\nRoll:  -115\nRoll:  -115\nRoll:  -112\nRoll:  -112\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -108\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -106\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -104\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -100\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -97\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -93\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -91\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -87\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -84\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -83\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -81\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll:  -77\nRoll"}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Does the robot now react appropriately to changes in tilt? Is the speed of reaction and the balance maintenance satisfactory?"
}
ChatGPT: Hey Human, Does the robot now react appropriately to changes in tilt? Is the speed of reaction and the balance maintenance satisfactory?
Submitting tool outputs: [{'tool_call_id': 'call_Q6SCS0UiSPbOj44WfajZ7BeI', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-13 12:08:55

 - Status: THREAD_ID: thread_tEVZ5nA6Q6mwllYkl2mbjgX8
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motion_sensor"
}
ChatGPT: I am querying documentation for motion_sensor
{'name': 'motion_sensor', 'description': 'a class that allows access to spike prime motion sensors', 'initialization': 'none', 'required imports': 'from hub import motion_sensor', 'function': [{'name': 'acceleration', 'syntax': 'motion_sensor.acceleration()', 'parameters': 'none', 'returns': {'name': 'a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G', 'values': '[int, int, int]'}}, {'name': 'tilt angles', 'syntax': 'motion_sensor.tilt_angles()', 'parameters': 'none', 'returns': {'name': 'a tuple containing yaw pitch and roll values as integers. Values are decidegrees', 'values': '[int, int, int]'}}, {'name': 'angular velocity', 'syntax': 'motion_sensor.angular_velocity()', 'parameters': 'none', 'returns': {'name': 'a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second', 'values': '[int, int, int]'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_hV7zLKTeAzrDfCkhTW3xn4Ct', 'output': '{"name": "motion_sensor", "description": "a class that allows access to spike prime motion sensors", "initialization": "none", "required imports": "from hub import motion_sensor", "function": [{"name": "acceleration", "syntax": "motion_sensor.acceleration()", "parameters": "none", "returns": {"name": "a tuple containing x, y & z acceleration values as integers. The values are mili G, so 1 / 1000 G", "values": "[int, int, int]"}}, {"name": "tilt angles", "syntax": "motion_sensor.tilt_angles()", "parameters": "none", "returns": {"name": "a tuple containing yaw pitch and roll values as integers. Values are decidegrees", "values": "[int, int, int]"}}, {"name": "angular velocity", "syntax": "motion_sensor.angular_velocity()", "parameters": "none", "returns": {"name": "a tuple containing x, y & z angular velocity values as integers. The values are decidegrees per second", "values": "[int, int, int]"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_wP0bhQBsUUfY1nPwH2cFetuT', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import motion_sensor, port \n import motor_pair \n\n motors = motor_pair.PAIR_1 \n motor_pair.pair(motors, port.A, port.B) \n kp = 5 \n target_angle = 0 \n \n # Proportional Control \n while True: \n     current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \n     error = target_angle - current_angle \n     correction = error * kp \n     left_speed = -correction \n     right_speed = -correction \n     motor_pair.move_tank(motors, left_speed, right_speed)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
from hub import motion_sensor, port 
import motor_pair 

motors = motor_pair.PAIR_1 
motor_pair.pair(motors, port.A, port.B) 
kp = 5 
target_angle = 0 

# Proportional Control 
while True: 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
    error = target_angle - current_angle 
    correction = error * kp 
    left_speed = -correction 
    right_speed = -correction 
    motor_pair.move_tank(motors, left_speed, right_speed)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 5 
=== 
target_angle = 0 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = -correction 
=== 
    right_speed = -correction 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 5 
=== 
target_angle = 0 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = -correction 
=== 
    right_speed = -correction 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_aSFxXWMfxXcC3qLsdTOGgKqE', 'output': '\r\n=== \nfrom hub import motion_sensor, port \r\n=== \nimport motor_pair \r\n=== \n\r\n=== \nmotors = motor_pair.PAIR_1 \r\n=== \nmotor_pair.pair(motors, port.A, port.B) \r\n=== \nkp = 5 \r\n=== \ntarget_angle = 0 \r\n=== \n\r\n=== \n# Proportional Control \r\n=== \nwhile True: \r\n=== \n    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \r\n=== \n    error = target_angle - current_angle \r\n=== \n    correction = error * kp \r\n=== \n    left_speed = -correction \r\n=== \n    right_speed = -correction \r\n=== \n    motor_pair.move_tank(motors, left_speed, right_speed)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot attempt to balance itself on the seesaw?"
}
ChatGPT: Hey Human, Did the robot attempt to balance itself on the seesaw?
Submitting tool outputs: [{'tool_call_id': 'call_Cgpk96iRx6ZKbukpgRXalPew', 'output': 'yes but it was moving too fast'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "kp = 1 \n\n # Proportional Control \n while True: \n     current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \n     error = target_angle - current_angle \n     correction = error * kp \n     left_speed = -correction \n     right_speed = -correction \n     motor_pair.move_tank(motors, left_speed, right_speed)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
kp = 1 

# Proportional Control 
while True: 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
    error = target_angle - current_angle 
    correction = error * kp 
    left_speed = -correction 
    right_speed = -correction 
    motor_pair.move_tank(motors, left_speed, right_speed)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
Traceback (most recent call last):
  File "<stdin>", line 7, in <module>
NameError: name 'motion_sensor' isn't defined
>>> 
>>> 

=== 
kp = 1 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = -correction 
=== 
    right_speed = -correction 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 


=== 
kp = 1 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = -correction 
=== 
    right_speed = -correction 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_wFHBqgHVGatZdHBoRWlIj38r', 'output': '\r\n=== \nkp = 1 \r\n=== \n\r\n=== \n# Proportional Control \r\n=== \nwhile True: \r\n=== \n    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \r\n=== \n    error = target_angle - current_angle \r\n=== \n    correction = error * kp \r\n=== \n    left_speed = -correction \r\n=== \n    right_speed = -correction \r\n=== \n    motor_pair.move_tank(motors, left_speed, right_speed)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot attempt to balance itself on the seesaw after reducing the kp value?"
}
ChatGPT: Hey Human, Did the robot attempt to balance itself on the seesaw after reducing the kp value?
Submitting tool outputs: [{'tool_call_id': 'call_oH85qyy2McTe6Ze50FadWGFx', 'output': 'nothing happened'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "kp = 2 \n\n # Proportional Control \n while True: \n     current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \n     error = target_angle - current_angle \n     correction = error * kp \n     left_speed = -correction \n     right_speed = -correction \n     motor_pair.move_tank(motors, left_speed, right_speed)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
kp = 2 

# Proportional Control 
while True: 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
    error = target_angle - current_angle 
    correction = error * kp 
    left_speed = -correction 
    right_speed = -correction 
    motor_pair.move_tank(motors, left_speed, right_speed)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
paste mode: 
Traceback (most recent call last):
  File "<stdin>", line 7, in <module>
NameError: name 'motion_sensor' isn't defined
>>> 
>>> 

=== 
kp = 2 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = -correction 
=== 
    right_speed = -correction 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 


=== 
kp = 2 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = -correction 
=== 
    right_speed = -correction 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_RClJY99Xc3WdLAXvtH4CzcU2', 'output': '\r\n=== \nkp = 2 \r\n=== \n\r\n=== \n# Proportional Control \r\n=== \nwhile True: \r\n=== \n    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \r\n=== \n    error = target_angle - current_angle \r\n=== \n    correction = error * kp \r\n=== \n    left_speed = -correction \r\n=== \n    right_speed = -correction \r\n=== \n    motor_pair.move_tank(motors, left_speed, right_speed)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot attempt to balance itself better on the seesaw after increasing the kp value to 2?"
}
ChatGPT: Hey Human, Did the robot attempt to balance itself better on the seesaw after increasing the kp value to 2?
Submitting tool outputs: [{'tool_call_id': 'call_bXcLB0zhLZfxUOed8pCLE4YS', 'output': 'i think you are forgetting imports, nothing happened again'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import motion_sensor, port \n import motor_pair \n\n motors = motor_pair.PAIR_1 \n motor_pair.pair(motors, port.A, port.B) \n kp = 2 \n target_angle = 0 \n\n # Proportional Control \n while True: \n     current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \n     error = target_angle - current_angle \n     correction = error * kp \n     left_speed = -correction \n     right_speed = -correction \n     motor_pair.move_tank(motors, left_speed, right_speed)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
from hub import motion_sensor, port 
import motor_pair 

motors = motor_pair.PAIR_1 
motor_pair.pair(motors, port.A, port.B) 
kp = 2 
target_angle = 0 

# Proportional Control 
while True: 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
    error = target_angle - current_angle 
    correction = error * kp 
    left_speed = -correction 
    right_speed = -correction 
    motor_pair.move_tank(motors, left_speed, right_speed)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 2 
=== 
target_angle = 0 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = -correction 
=== 
    right_speed = -correction 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 2 
=== 
target_angle = 0 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = -correction 
=== 
    right_speed = -correction 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_BhW37oyKQtupSiCHiNwf6PVv', 'output': '\r\n=== \nfrom hub import motion_sensor, port \r\n=== \nimport motor_pair \r\n=== \n\r\n=== \nmotors = motor_pair.PAIR_1 \r\n=== \nmotor_pair.pair(motors, port.A, port.B) \r\n=== \nkp = 2 \r\n=== \ntarget_angle = 0 \r\n=== \n\r\n=== \n# Proportional Control \r\n=== \nwhile True: \r\n=== \n    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \r\n=== \n    error = target_angle - current_angle \r\n=== \n    correction = error * kp \r\n=== \n    left_speed = -correction \r\n=== \n    right_speed = -correction \r\n=== \n    motor_pair.move_tank(motors, left_speed, right_speed)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot attempt to balance itself on the seesaw after including the necessary imports and setup?"
}
ChatGPT: Hey Human, Did the robot attempt to balance itself on the seesaw after including the necessary imports and setup?
Submitting tool outputs: [{'tool_call_id': 'call_0oxIBD09xi8GCf5BWU2kGfdZ', 'output': 'yes, try adjusting the speed and proportional constant. the robot tended to overshoot the center of the platform'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import motion_sensor, port \n import motor_pair \n\n motors = motor_pair.PAIR_1 \n motor_pair.pair(motors, port.A, port.B) \n kp = 1.5 \n target_angle = 0 \n max_speed = 100 \n\n # Proportional Control \n while True: \n     current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \n     error = target_angle - current_angle \n     correction = error * kp \n     left_speed = max(min(-correction, max_speed), -max_speed) \n     right_speed = max(min(-correction, max_speed), -max_speed) \n     motor_pair.move_tank(motors, left_speed, right_speed)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
from hub import motion_sensor, port 
import motor_pair 

motors = motor_pair.PAIR_1 
motor_pair.pair(motors, port.A, port.B) 
kp = 1.5 
target_angle = 0 
max_speed = 100 

# Proportional Control 
while True: 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
    error = target_angle - current_angle 
    correction = error * kp 
    left_speed = max(min(-correction, max_speed), -max_speed) 
    right_speed = max(min(-correction, max_speed), -max_speed) 
    motor_pair.move_tank(motors, left_speed, right_speed)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 1.5 
=== 
target_angle = 0 
=== 
max_speed = 100 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = max(min(-correction, max_speed), -max_speed) 
=== 
    right_speed = max(min(-correction, max_speed), -max_speed) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 1.5 
=== 
target_angle = 0 
=== 
max_speed = 100 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = max(min(-correction, max_speed), -max_speed) 
=== 
    right_speed = max(min(-correction, max_speed), -max_speed) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 

Traceback (most recent call last):
File "<stdin>", line 19, in <module>
TypeError: can't convert float to int
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_cjdTzrFZxyLUAqaUobfbrEFo', 'output': '\r\n=== \nfrom hub import motion_sensor, port \r\n=== \nimport motor_pair \r\n=== \n\r\n=== \nmotors = motor_pair.PAIR_1 \r\n=== \nmotor_pair.pair(motors, port.A, port.B) \r\n=== \nkp = 1.5 \r\n=== \ntarget_angle = 0 \r\n=== \nmax_speed = 100 \r\n=== \n\r\n=== \n# Proportional Control \r\n=== \nwhile True: \r\n=== \n    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \r\n=== \n    error = target_angle - current_angle \r\n=== \n    correction = error * kp \r\n=== \n    left_speed = max(min(-correction, max_speed), -max_speed) \r\n=== \n    right_speed = max(min(-correction, max_speed), -max_speed) \r\n=== \n    motor_pair.move_tank(motors, left_speed, right_speed)\r\n=== \n\nTraceback (most recent call last):\nFile "<stdin>", line 19, in <module>\nTypeError: can\'t convert float to int'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import motion_sensor, port \n import motor_pair \n\n motors = motor_pair.PAIR_1 \n motor_pair.pair(motors, port.A, port.B) \n kp = 1.5 \n target_angle = 0 \n max_speed = 100 \n\n # Proportional Control \n while True: \n     current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \n     error = target_angle - current_angle \n     correction = error * kp \n     left_speed = int(max(min(-correction, max_speed), -max_speed)) \n     right_speed = int(max(min(-correction, max_speed), -max_speed)) \n     motor_pair.move_tank(motors, left_speed, right_speed)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
from hub import motion_sensor, port 
import motor_pair 

motors = motor_pair.PAIR_1 
motor_pair.pair(motors, port.A, port.B) 
kp = 1.5 
target_angle = 0 
max_speed = 100 

# Proportional Control 
while True: 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
    error = target_angle - current_angle 
    correction = error * kp 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
    motor_pair.move_tank(motors, left_speed, right_speed)
RESETTING

>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 1.5 
=== 
target_angle = 0 
=== 
max_speed = 100 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 1.5 
=== 
target_angle = 0 
=== 
max_speed = 100 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_YwtD1yBm2qsNqHu9GrxML26v', 'output': '\r\n=== \nfrom hub import motion_sensor, port \r\n=== \nimport motor_pair \r\n=== \n\r\n=== \nmotors = motor_pair.PAIR_1 \r\n=== \nmotor_pair.pair(motors, port.A, port.B) \r\n=== \nkp = 1.5 \r\n=== \ntarget_angle = 0 \r\n=== \nmax_speed = 100 \r\n=== \n\r\n=== \n# Proportional Control \r\n=== \nwhile True: \r\n=== \n    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \r\n=== \n    error = target_angle - current_angle \r\n=== \n    correction = error * kp \r\n=== \n    left_speed = int(max(min(-correction, max_speed), -max_speed)) \r\n=== \n    right_speed = int(max(min(-correction, max_speed), -max_speed)) \r\n=== \n    motor_pair.move_tank(motors, left_speed, right_speed)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot attempt to balance itself better on the seesaw after adjusting the kp value and adding a speed limit of 100 degrees per second?"
}
ChatGPT: Hey Human, Did the robot attempt to balance itself better on the seesaw after adjusting the kp value and adding a speed limit of 100 degrees per second?
Submitting tool outputs: [{'tool_call_id': 'call_MQES7sNJyIHVoblcGcMRNQOg', 'output': 'yes, but now it is not reactive enough'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import motion_sensor, port \n import motor_pair \n\n motors = motor_pair.PAIR_1 \n motor_pair.pair(motors, port.A, port.B) \n kp = 1.75 \n target_angle = 0 \n max_speed = 200 \n\n # Proportional Control \n while True: \n     current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \n     error = target_angle - current_angle \n     correction = error * kp \n     left_speed = int(max(min(-correction, max_speed), -max_speed)) \n     right_speed = int(max(min(-correction, max_speed), -max_speed)) \n     motor_pair.move_tank(motors, left_speed, right_speed)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
from hub import motion_sensor, port 
import motor_pair 

motors = motor_pair.PAIR_1 
motor_pair.pair(motors, port.A, port.B) 
kp = 1.75 
target_angle = 0 
max_speed = 200 

# Proportional Control 
while True: 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
    error = target_angle - current_angle 
    correction = error * kp 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
    motor_pair.move_tank(motors, left_speed, right_speed)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 1.75 
=== 
target_angle = 0 
=== 
max_speed = 200 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 1.75 
=== 
target_angle = 0 
=== 
max_speed = 200 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_EHty4ky6vOk6wG04yYqSjYXJ', 'output': '\r\n=== \nfrom hub import motion_sensor, port \r\n=== \nimport motor_pair \r\n=== \n\r\n=== \nmotors = motor_pair.PAIR_1 \r\n=== \nmotor_pair.pair(motors, port.A, port.B) \r\n=== \nkp = 1.75 \r\n=== \ntarget_angle = 0 \r\n=== \nmax_speed = 200 \r\n=== \n\r\n=== \n# Proportional Control \r\n=== \nwhile True: \r\n=== \n    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \r\n=== \n    error = target_angle - current_angle \r\n=== \n    correction = error * kp \r\n=== \n    left_speed = int(max(min(-correction, max_speed), -max_speed)) \r\n=== \n    right_speed = int(max(min(-correction, max_speed), -max_speed)) \r\n=== \n    motor_pair.move_tank(motors, left_speed, right_speed)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot attempt to balance itself better on the seesaw after adjusting both the kp value and the speed limit again?"
}
ChatGPT: Hey Human, Did the robot attempt to balance itself better on the seesaw after adjusting both the kp value and the speed limit again?
Submitting tool outputs: [{'tool_call_id': 'call_o83sdhjkq4YXdbD0722ULDZN', 'output': 'yes, please try this again'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import motion_sensor, port \n import motor_pair \n\n motors = motor_pair.PAIR_1 \n motor_pair.pair(motors, port.A, port.B) \n kp = 1.75 \n target_angle = 0 \n max_speed = 200 \n\n # Proportional Control \n while True: \n     current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \n     error = target_angle - current_angle \n     correction = error * kp \n     left_speed = int(max(min(-correction, max_speed), -max_speed)) \n     right_speed = int(max(min(-correction, max_speed), -max_speed)) \n     motor_pair.move_tank(motors, left_speed, right_speed)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
from hub import motion_sensor, port 
import motor_pair 

motors = motor_pair.PAIR_1 
motor_pair.pair(motors, port.A, port.B) 
kp = 1.75 
target_angle = 0 
max_speed = 200 

# Proportional Control 
while True: 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
    error = target_angle - current_angle 
    correction = error * kp 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
    motor_pair.move_tank(motors, left_speed, right_speed)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 1.75 
=== 
target_angle = 0 
=== 
max_speed = 200 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 1.75 
=== 
target_angle = 0 
=== 
max_speed = 200 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_dLUmtNFbV2Ky4cx8rM3FFPTB', 'output': '\r\n=== \nfrom hub import motion_sensor, port \r\n=== \nimport motor_pair \r\n=== \n\r\n=== \nmotors = motor_pair.PAIR_1 \r\n=== \nmotor_pair.pair(motors, port.A, port.B) \r\n=== \nkp = 1.75 \r\n=== \ntarget_angle = 0 \r\n=== \nmax_speed = 200 \r\n=== \n\r\n=== \n# Proportional Control \r\n=== \nwhile True: \r\n=== \n    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \r\n=== \n    error = target_angle - current_angle \r\n=== \n    correction = error * kp \r\n=== \n    left_speed = int(max(min(-correction, max_speed), -max_speed)) \r\n=== \n    right_speed = int(max(min(-correction, max_speed), -max_speed)) \r\n=== \n    motor_pair.move_tank(motors, left_speed, right_speed)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Did the robot react appropriately this time around after running the same code?"
}
ChatGPT: Hey Human, Did the robot react appropriately this time around after running the same code?
Submitting tool outputs: [{'tool_call_id': 'call_oWKCkFB0BOdqQ0KSUvzQX6QB', 'output': 'yes please try this again'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import motion_sensor, port \n import motor_pair \n\n motors = motor_pair.PAIR_1 \n motor_pair.pair(motors, port.A, port.B) \n kp = 1.75 \n target_angle = 0 \n max_speed = 200 \n\n # Proportional Control \n while True: \n     current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \n     error = target_angle - current_angle \n     correction = error * kp \n     left_speed = int(max(min(-correction, max_speed), -max_speed)) \n     right_speed = int(max(min(-correction, max_speed), -max_speed)) \n     motor_pair.move_tank(motors, left_speed, right_speed)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
from hub import motion_sensor, port 
import motor_pair 

motors = motor_pair.PAIR_1 
motor_pair.pair(motors, port.A, port.B) 
kp = 1.75 
target_angle = 0 
max_speed = 200 

# Proportional Control 
while True: 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
    error = target_angle - current_angle 
    correction = error * kp 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
    motor_pair.move_tank(motors, left_speed, right_speed)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 1.75 
=== 
target_angle = 0 
=== 
max_speed = 200 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 1.75 
=== 
target_angle = 0 
=== 
max_speed = 200 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_Vl1z8DsBUfz7BuTV2lLloCSC', 'output': '\r\n=== \nfrom hub import motion_sensor, port \r\n=== \nimport motor_pair \r\n=== \n\r\n=== \nmotors = motor_pair.PAIR_1 \r\n=== \nmotor_pair.pair(motors, port.A, port.B) \r\n=== \nkp = 1.75 \r\n=== \ntarget_angle = 0 \r\n=== \nmax_speed = 200 \r\n=== \n\r\n=== \n# Proportional Control \r\n=== \nwhile True: \r\n=== \n    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \r\n=== \n    error = target_angle - current_angle \r\n=== \n    correction = error * kp \r\n=== \n    left_speed = int(max(min(-correction, max_speed), -max_speed)) \r\n=== \n    right_speed = int(max(min(-correction, max_speed), -max_speed)) \r\n=== \n    motor_pair.move_tank(motors, left_speed, right_speed)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "Was the robot's behavior consistent and correct in this attempt as well?"
}
ChatGPT: Hey Human, Was the robot's behavior consistent and correct in this attempt as well?
Submitting tool outputs: [{'tool_call_id': 'call_d6LDGQkpz5ttVw8rcQbu84ZU', 'output': 'yes, though it could be more reactive'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import motion_sensor, port \n import motor_pair \n\n motors = motor_pair.PAIR_1 \n motor_pair.pair(motors, port.A, port.B) \n kp = 2 \n target_angle = 0 \n max_speed = 200 \n\n # Proportional Control \n while True: \n     current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \n     error = target_angle - current_angle \n     correction = error * kp \n     left_speed = int(max(min(-correction, max_speed), -max_speed)) \n     right_speed = int(max(min(-correction, max_speed), -max_speed)) \n     motor_pair.move_tank(motors, left_speed, right_speed)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
from hub import motion_sensor, port 
import motor_pair 

motors = motor_pair.PAIR_1 
motor_pair.pair(motors, port.A, port.B) 
kp = 2 
target_angle = 0 
max_speed = 200 

# Proportional Control 
while True: 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
    error = target_angle - current_angle 
    correction = error * kp 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
    motor_pair.move_tank(motors, left_speed, right_speed)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 2 
=== 
target_angle = 0 
=== 
max_speed = 200 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 2 
=== 
target_angle = 0 
=== 
max_speed = 200 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_SPCw2SKWjkjYSkqP1ktRNNw4', 'output': '\r\n=== \nfrom hub import motion_sensor, port \r\n=== \nimport motor_pair \r\n=== \n\r\n=== \nmotors = motor_pair.PAIR_1 \r\n=== \nmotor_pair.pair(motors, port.A, port.B) \r\n=== \nkp = 2 \r\n=== \ntarget_angle = 0 \r\n=== \nmax_speed = 200 \r\n=== \n\r\n=== \n# Proportional Control \r\n=== \nwhile True: \r\n=== \n    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \r\n=== \n    error = target_angle - current_angle \r\n=== \n    correction = error * kp \r\n=== \n    left_speed = int(max(min(-correction, max_speed), -max_speed)) \r\n=== \n    right_speed = int(max(min(-correction, max_speed), -max_speed)) \r\n=== \n    motor_pair.move_tank(motors, left_speed, right_speed)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "After increasing the kp value to 2, did the robot react faster to balance itself on the seesaw?"
}
ChatGPT: Hey Human, After increasing the kp value to 2, did the robot react faster to balance itself on the seesaw?
Submitting tool outputs: [{'tool_call_id': 'call_oDPS4b0yCuVphi48JT6N6Q4W', 'output': 'yes, try running it again for longer'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "from hub import motion_sensor, port \n import motor_pair \n\n motors = motor_pair.PAIR_1 \n motor_pair.pair(motors, port.A, port.B) \n kp = 2 \n target_angle = 0 \n max_speed = 200 \n\n # Proportional Control \n while True: \n     current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \n     error = target_angle - current_angle \n     correction = error * kp \n     left_speed = int(max(min(-correction, max_speed), -max_speed)) \n     right_speed = int(max(min(-correction, max_speed), -max_speed)) \n     motor_pair.move_tank(motors, left_speed, right_speed)",
  "runtime": "20"
}
============================ RUNNING CODE (20 seconds) ============================
from hub import motion_sensor, port 
import motor_pair 

motors = motor_pair.PAIR_1 
motor_pair.pair(motors, port.A, port.B) 
kp = 2 
target_angle = 0 
max_speed = 200 

# Proportional Control 
while True: 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
    error = target_angle - current_angle 
    correction = error * kp 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
    motor_pair.move_tank(motors, left_speed, right_speed)
RESETTING

MicroPython v1.20.0-544-g977dc9a36 on 2023-11-22; SPIKE Prime with STM32F413
Type "help()" for more information.
>>> 
>>> 
paste mode: 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 

================================== SERIAL OUPUT ===================================
 - Status: paste mode: 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 2 
=== 
target_angle = 0 
=== 
max_speed = 200 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 


=== 
from hub import motion_sensor, port 
=== 
import motor_pair 
=== 

=== 
motors = motor_pair.PAIR_1 
=== 
motor_pair.pair(motors, port.A, port.B) 
=== 
kp = 2 
=== 
target_angle = 0 
=== 
max_speed = 200 
=== 

=== 
# Proportional Control 
=== 
while True: 
=== 
    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle 
=== 
    error = target_angle - current_angle 
=== 
    correction = error * kp 
=== 
    left_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    right_speed = int(max(min(-correction, max_speed), -max_speed)) 
=== 
    motor_pair.move_tank(motors, left_speed, right_speed)
=== 

======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_aoRRKkohe24XI88aG2Uk8Ney', 'output': '\r\n=== \nfrom hub import motion_sensor, port \r\n=== \nimport motor_pair \r\n=== \n\r\n=== \nmotors = motor_pair.PAIR_1 \r\n=== \nmotor_pair.pair(motors, port.A, port.B) \r\n=== \nkp = 2 \r\n=== \ntarget_angle = 0 \r\n=== \nmax_speed = 200 \r\n=== \n\r\n=== \n# Proportional Control \r\n=== \nwhile True: \r\n=== \n    current_angle = motion_sensor.tilt_angles()[1] # get y-axis tilt angle \r\n=== \n    error = target_angle - current_angle \r\n=== \n    correction = error * kp \r\n=== \n    left_speed = int(max(min(-correction, max_speed), -max_speed)) \r\n=== \n    right_speed = int(max(min(-correction, max_speed), -max_speed)) \r\n=== \n    motor_pair.move_tank(motors, left_speed, right_speed)\r\n=== \n'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "prompt": "After running the code for a longer time, did the robot consistently maintain its balance on the seesaw?"
}
ChatGPT: Hey Human, After running the code for a longer time, did the robot consistently maintain its balance on the seesaw?
Submitting tool outputs: [{'tool_call_id': 'call_BTb9EglBL3RlFFR4KMtr6BDL', 'output': 'yes great jo'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-16 12:03:17




PROGRAM OUTPUT FROM 2024-03-16 12:04:57




PROGRAM OUTPUT FROM 2024-03-16 12:06:28

 - Status: THREAD_ID: thread_iH7t7Nq6ppe4M50KRuF7k704
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_u2TfecYwG1KKAVQjwFIUjMG1', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)",
  "runtime": "5"
}
============================ RUNNING CODE (5 seconds) =============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
======================================= END =======================================

 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-16 12:08:43

 - Status: THREAD_ID: thread_IoblCZhfIvzA3dBXazgDthUk
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
ChatGPT: I am querying documentation for distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_SW0NPQzQNNOSM7QLffFeLuFm', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_RQrlhfG2TvbYuRe1fF1Pp3KG', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor_pair \n distance = distance_sensor.distance(port.D) \n motors = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n if distance < 100: \n     await motor_pair.move_for_time(motors, 500, 0, velocity=-100) \n elif distance > 100: \n     await motor_pair.move_for_time(motors, 500, 0, velocity=100) \n else: \n     await motor_pair.stop(motors)", 
"runtime": "2"
}
============================ RUNNING CODE (2 seconds) =============================
import distance_sensor 
from hub import port 
import motor_pair 
distance = distance_sensor.distance(port.D) 
motors = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
if distance < 100: 
    await motor_pair.move_for_time(motors, 500, 0, velocity=-100) 
elif distance > 100: 
    await motor_pair.move_for_time(motors, 500, 0, velocity=100) 
else: 
    await motor_pair.stop(motors)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_jhGrOAc4MjHGRC1bncYsMmPF', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move backwards if the distance was less than 100 and forwards if the distance was greater than 100?"
}
ChatGPT: Hey Human, Did the robot move backwards if the distance was less than 100 and forwards if the distance was greater than 100?
Submitting tool outputs: [{'tool_call_id': 'call_gq2DBAV93E2v4XoE4RXnQrZ3', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import port \n import motor_pair \n motors = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     distance = distance_sensor.distance(port.D) \n     if distance < 100: \n         await motor_pair.move_for_time(motors, 500, 0, velocity=-100) \n     elif distance > 100: \n         await motor_pair.move_for_time(motors, 500, 0, velocity=100) \n     else: \n         await motor_pair.stop(motors)", 
"runtime": "5"
}
============================ RUNNING CODE (5 seconds) =============================
import distance_sensor 
from hub import port 
import motor_pair 
motors = motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
    distance = distance_sensor.distance(port.D) 
    if distance < 100: 
        await motor_pair.move_for_time(motors, 500, 0, velocity=-100) 
    elif distance > 100: 
        await motor_pair.move_for_time(motors, 500, 0, velocity=100) 
    else: 
        await motor_pair.stop(motors)
RESETTING
 - Status: yes
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ljxMhstaZ6fTcKSgVE3Q2lpI', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot continually move backwards when the distance was below 100 and forwards when it was over 100?"
}
ChatGPT: Hey Human, Did the robot continually move backwards when the distance was below 100 and forwards when it was over 100?
Submitting tool outputs: [{'tool_call_id': 'call_fe030ilAKRgdmCSsQlMQIY0b', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-16 12:33:17

 - Status: THREAD_ID: thread_pZG2M0W6lUGySPy8RL0hceCo
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_5tw27tcgeXDqEypE2T5bRspt', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
  "code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    motor_pair.move(motor_pair.PAIR_1, 0)",
  "runtime": "10"
}
============================ RUNNING CODE (10 seconds) ============================
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-16 12:38:27

 - Status: THREAD_ID: thread_zz311buAIC3R0yp3xe4qS6W7
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_K9HW4aakTvzFAxF8BQjq9H83', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \nfrom hub import port \nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \nwhile True: \n    motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "5"
}
============================ RUNNING CODE (5 seconds) =============================
import motor_pair 
from hub import port 
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 
while True: 
   motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: paste mode: 
================================== SERIAL OUPUT ===================================
 - Status: paste mode: 

 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_TERzq2NCcSRcdaHH9HfKIGBX', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move forward continuously?"
}
ChatGPT: Hey Human, Did the robot move forward continuously?
Submitting tool outputs: [{'tool_call_id': 'call_LwKYcMQHGtmDxx8OeyqAvTpM', 'output': 'yea'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-16 12:57:29

 - Status: THREAD_ID: thread_XlY7LVwj2fMG0tVQWZfk8U6y
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_6GNW1oR0fNukIS2065owDlr3', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair \n from hub import port \n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n while True: \n     motor_pair.move(motor_pair.PAIR_1, 0)", 
"runtime": "5"
}
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-16 12:58:55

 - Status: THREAD_ID: thread_aCOnfDaTTxzp3DjccBeXCRzy
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_purrrBOfewJPW1nG8CFSGEKi', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import motor_pair\nfrom hub import port\nmotor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\nwhile True:\n    motor_pair.move(motor_pair.PAIR_1, 0)",
"runtime": "1"
}
============================ RUNNING CODE (1 seconds) =============================
import motor_pair
from hub import port
motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)
while True:
   motor_pair.move(motor_pair.PAIR_1, 0)
RESETTING
 - Status: 
 - Status: Paste mode start: 
================================== SERIAL OUPUT ===================================
 - Status: Paste mode end: 

 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_ORIoqMrCG38DEDhT6VvLIktR', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot move?"
}
ChatGPT: Hey Human, Did the robot move?
Submitting tool outputs: [{'tool_call_id': 'call_OF25pb4uHBeQPuK5rh2O3Euu', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-16 13:10:40

 - Status: THREAD_ID: thread_U0dsRwunhSHBom8ng9ot4kri
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "color_sensor"
}
ChatGPT: I am querying documentation for color_sensor
{'name': 'color_sensor', 'description': 'a class that allows access to spike prime color sensors', 'initialization': 'none', 'required imports': 'import color_sensor \n from hub import port \n import color', 'function': [{'name': 'color', 'syntax': 'color_sensor.color(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the color sensed by the color sensor', 'values': 'color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE'}}, {'name': 'reflection', 'syntax': 'color_sensor.reflection(port.A)', 'initialization': 'none', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which color sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the intensity of light sensed by the color sensor', 'values': 'integer 1:100'}}], 'example': "if color_sensor.color(port.A) is color.RED:\r\nprint('Red detected')"}
Submitting tool outputs: [{'tool_call_id': 'call_bxLS9nIP9zs9wg4RfOb2uqZ1', 'output': '{"name": "color_sensor", "description": "a class that allows access to spike prime color sensors", "initialization": "none", "required imports": "import color_sensor \\n from hub import port \\n import color", "function": [{"name": "color", "syntax": "color_sensor.color(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the color sensed by the color sensor", "values": "color.RED,color.GREEN,color.BLUE,color.MAGENTA,color.YELLOW,color.ORANGE,color.AZURE,color.BLACK,color.WHITE"}}, {"name": "reflection", "syntax": "color_sensor.reflection(port.A)", "initialization": "none", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which color sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the intensity of light sensed by the color sensor", "values": "integer 1:100"}}], "example": "if color_sensor.color(port.A) is color.RED:\\r\\nprint(\'Red detected\')"}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "motor_pair"
}
ChatGPT: I am querying documentation for motor_pair
{'name': 'motor_pair', 'description': 'a class that allows controlling two spike prime motors together', 'initialization': 'motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)', 'required imports': 'import motor_pair \n from hub import port', 'function': [{'name': 'move motor pair for degrees', 'syntax': 'motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'async': 'await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)', 'parameters': {'parameter': [{'name': 'motor pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'degrees', 'description': 'Degrees for which the motor pair should turn.', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}}, {'name': 'move motor pair for time', 'syntax': 'motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'async': 'await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'time', 'description': 'Duration for which motors should turn in milliseconds (1000 = 1 second)', 'values': 'any integer'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Move a motor pair at a constant speed until a new command is given', 'syntax': 'motor_pair.move(motor_pair.PAIR_1, 0)', 'async': 'await motor_pair.move(motor_pair.PAIR_1, 0)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'steering', 'description': 'How much the motor pair should alter motor speeds to turn', 'values': 'an integer -100:100'}, {'name': 'velocity', 'description': 'Speed at which the motors should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Perform a tank move on a motor pair at a constant speed until a new command is given.', 'syntax': 'motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'async': 'await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}, {'name': 'left velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'an integer'}, {'name': 'right velocity', 'description': 'Speed at which the right motor should run in degrees per second.', 'values': 'any integer'}]}, {'name': 'Stop a motor pair.', 'syntax': 'motor_pair.stop(motor_pair.PAIR_1)', 'async': 'await motor_pair.stop(motor_pair.PAIR_1)', 'parameters': [{'name': 'motor Pair', 'description': 'Specification of which motor pair to move', 'values': 'motor_pair.PAIR_1, motor_pair.PAIR_2'}]}]}
Submitting tool outputs: [{'tool_call_id': 'call_BDHvWbOLeoMH97uQ41rUlaNN', 'output': '{"name": "motor_pair", "description": "a class that allows controlling two spike prime motors together", "initialization": "motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)", "required imports": "import motor_pair \\n from hub import port", "function": [{"name": "move motor pair for degrees", "syntax": "motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "async": "await motor_pair.move_for_degrees(motor_pair.PAIR_1, 90, 0, velocity=200)", "parameters": {"parameter": [{"name": "motor pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "degrees", "description": "Degrees for which the motor pair should turn.", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}}, {"name": "move motor pair for time", "syntax": "motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "async": "await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=200)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "time", "description": "Duration for which motors should turn in milliseconds (1000 = 1 second)", "values": "any integer"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Move a motor pair at a constant speed until a new command is given", "syntax": "motor_pair.move(motor_pair.PAIR_1, 0)", "async": "await motor_pair.move(motor_pair.PAIR_1, 0)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "steering", "description": "How much the motor pair should alter motor speeds to turn", "values": "an integer -100:100"}, {"name": "velocity", "description": "Speed at which the motors should run in degrees per second.", "values": "any integer"}]}, {"name": "Perform a tank move on a motor pair at a constant speed until a new command is given.", "syntax": "motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "async": "await motor_pair.move_tank(motor_pair.PAIR_1, 1000, 1000)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}, {"name": "left velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "an integer"}, {"name": "right velocity", "description": "Speed at which the right motor should run in degrees per second.", "values": "any integer"}]}, {"name": "Stop a motor pair.", "syntax": "motor_pair.stop(motor_pair.PAIR_1)", "async": "await motor_pair.stop(motor_pair.PAIR_1)", "parameters": [{"name": "motor Pair", "description": "Specification of which motor pair to move", "values": "motor_pair.PAIR_1, motor_pair.PAIR_2"}]}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import color_sensor \n from hub import port \n import motor_pair \n import color \n import time \n\n motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) \n\n while True: \n     if color_sensor.color(port.C) is color.BLUE: \n         motor_pair.move(motor_pair.PAIR_1, 0) \n     else: \n         motor_pair.stop(motor_pair.PAIR_1) \n     time.sleep(0.1)",
"runtime": "10"
}
=========================== RUNNING CODE (10 second(s)) ===========================
import color_sensor 
from hub import port 
import motor_pair 
import color 
import time 

motor_pair.pair(motor_pair.PAIR_1, port.A, port.B) 

while True: 
    if color_sensor.color(port.C) is color.BLUE: 
        motor_pair.move(motor_pair.PAIR_1, 0) 
    else: 
        motor_pair.stop(motor_pair.PAIR_1) 
    time.sleep(0.1)
RESETTING
 - Status: 
 - Status: Paste mode start: 
================================== SERIAL OUPUT ===================================
 - Status: Paste mode end: 

 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_4KMSWQr2v96NQ4ekLNctInGs', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the robot follow the line correctly?"
}
ChatGPT: Hey Human, Did the robot follow the line correctly?
Submitting tool outputs: [{'tool_call_id': 'call_7yGNTRDmpy64TbMX0RuX3dgt', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
=========================== RUNNING CODE (1 second(s)) ============================
print('hello world')
RESETTING
 - Status: 
 - Status: Paste mode start: 
================================== SERIAL OUPUT ===================================
 - Status: Paste mode end: 

 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_GnoraNtSbFzUvI8BEOdFR35r', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did 'hello world' display correctly on the terminal?"
}
ChatGPT: Hey Human, Did 'hello world' display correctly on the terminal?
Submitting tool outputs: [{'tool_call_id': 'call_tOCwKrrAG5KJSCreHcyYRnzW', 'output': 'yessir'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-16 13:20:40

 - Status: THREAD_ID: thread_REFWdjBPJuzi27RrMqQp3YsJ
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "force_sensor"
}
ChatGPT: I am querying documentation for force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_Y6OXzHXjJC0DA39lc8s4BcG9', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
ChatGPT: I am querying documentation for distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_RkkeLDSoMcBXOLdqZkOJyNC6', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "sound"
}
ChatGPT: I am querying documentation for sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_Qdh7szzty2g9M77s68W2DaSp', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import force_sensor \n from hub import port, sound \n import distance_sensor \n import time \n \
while True: \n \
    if force_sensor.pressed(port.C): \n \
        distance = distance_sensor.distance(port.F) \n \
        if distance != -1 and distance < 400: \n \
            freq = (400 - distance) * 10 \n \
            sound.beep(freq=freq, duration=100, volume=100) \n \
        time.sleep(0.1) \n \
    else: \n \
        time.sleep(0.1)",
"runtime": "10"
}
 - Status: Closing



PROGRAM OUTPUT FROM 2024-03-16 13:22:50

 - Status: THREAD_ID: thread_L4KHsDmvO1VQC7j5pV2MBUAd
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "force_sensor"
}
ChatGPT: I am querying documentation for force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_4bUqFMqh5Ixs0THfdysYYQXT', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
ChatGPT: I am querying documentation for distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_N5OCrAbzVwYCM0jtVfsuCLox', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "sound"
}
ChatGPT: I am querying documentation for sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_9nSh2gmu2RQgnIfDi8iTvzy0', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "import distance_sensor \n from hub import sound, port \n import force_sensor \n while True: \n     if (force_sensor.pressed(port.C)): \n         sound.beep(freq=distance_sensor.distance(port.F)*10, volume=30)",
"runtime": "10"
}
=========================== RUNNING CODE (10 second(s)) ===========================
import distance_sensor 
from hub import sound, port 
import force_sensor 
while True: 
    if (force_sensor.pressed(port.C)): 
        sound.beep(freq=distance_sensor.distance(port.F)*10, volume=30)
RESETTING
 - Status: 
 - Status: Paste mode start: 
================================== SERIAL OUPUT ===================================
 - Status: Paste mode end: 

 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_yaGTj9Py3cOVQMzt8Z07RaKN', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Was the theremin working properly? Did it stop making sound when I pressed the force sensor?"
}
ChatGPT: Hey Human, Was the theremin working properly? Did it stop making sound when I pressed the force sensor?
Submitting tool outputs: [{'tool_call_id': 'call_55tEqSYanaA6wWlosw2Gixse', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: completed
 - Status: Closing



PROGRAM OUTPUT FROM 2024-04-10 12:33:18




PROGRAM OUTPUT FROM 2024-04-10 12:38:20




PROGRAM OUTPUT FROM 2024-04-10 12:39:02

 - Status: THREAD_ID: thread_dAIm0I5JAsLBZezqLJzsgwMy
 - Status: Creating new run
 - Status: Closing



PROGRAM OUTPUT FROM 2024-04-10 12:40:33

 - Status: THREAD_ID: thread_QS7Eultj1JJr3x1l9HbaZwk3
 - Status: Adding message
 - Status: Closing



PROGRAM OUTPUT FROM 2024-04-10 12:46:28

 - Status: THREAD_ID: thread_d4PlPSqWNnzjnLCpycylAr2U
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Closing



PROGRAM OUTPUT FROM 2024-04-10 12:49:11

 - Status: THREAD_ID: thread_KCfr23Qq3npmqNwioRoz9zUF
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action



PROGRAM OUTPUT FROM 2024-04-10 12:49:45

 - Status: THREAD_ID: thread_xURR2mVhaBS3zQxwpahnOLkO
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('Hello World')",
"runtime": "1"
}
=========================== RUNNING CODE (1 second(s)) ============================
print('Hello World')
RESETTING
 - Status: 
 - Status: Paste mode start: 
================================== SERIAL OUPUT ===================================
 - Status: Paste mode end: 

 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_hdMQLkaZa1ADms80GoKZrbml', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed



PROGRAM OUTPUT FROM 2024-04-10 13:03:57

 - Status: THREAD_ID: thread_wn3KysQpy6AFGcw2hgZY9vc0
 - Status: Adding message



PROGRAM OUTPUT FROM 2024-04-10 13:05:53

 - Status: THREAD_ID: thread_4r1J7zLmIPCQrjMSkDq1pFOV
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "print('hello world')",
"runtime": "1"
}
=========================== RUNNING CODE (1 second(s)) ============================
print('hello world')
RESETTING
 - Status: 
 - Status: Paste mode start: 
================================== SERIAL OUPUT ===================================
 - Status: Paste mode end: 

 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_79dYvnV5CQJ0QGQmyrpbJ77d', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Did the text 'hello world' print to the terminal?"
}
ChatGPT: Hey Human, Did the text 'hello world' print to the terminal?
Submitting tool outputs: [{'tool_call_id': 'call_KFEymMWFeLoth0fBrkqGvDzM', 'output': 'yes'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed



PROGRAM OUTPUT FROM 2024-04-10 13:06:31

 - Status: THREAD_ID: thread_iWuWghNXqXEqiNG7DiiVarEv
 - Status: Adding message
 - Status: Creating new run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "force_sensor"
}
ChatGPT: I am querying documentation for force_sensor
{'name': 'force_sensor', 'description': 'a class that allows access to spike prime force sensors', 'initialization': 'none', 'required imports': 'import force_sensor \n from hub import port', 'function': [{'name': 'get force', 'syntax': 'force_sensor.force(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the force measured as a decinewton', 'values': 'integer 0-100'}}, {'name': 'pressed', 'syntax': 'force_sensor.pressed(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which force sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'a binary value indicating if the sensor is pressed or not. Will return true if pressed', 'values': 'boolean'}}]}
Submitting tool outputs: [{'tool_call_id': 'call_LPEk0VnPWAO23fCkIlHKRZmA', 'output': '{"name": "force_sensor", "description": "a class that allows access to spike prime force sensors", "initialization": "none", "required imports": "import force_sensor \\n from hub import port", "function": [{"name": "get force", "syntax": "force_sensor.force(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the force measured as a decinewton", "values": "integer 0-100"}}, {"name": "pressed", "syntax": "force_sensor.pressed(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which force sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "a binary value indicating if the sensor is pressed or not. Will return true if pressed", "values": "boolean"}}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "distance_sensor"
}
ChatGPT: I am querying documentation for distance_sensor
{'name': 'distance_sensor', 'description': 'a class that allows access to spike prime distance sensors', 'initialization': 'none', 'required imports': 'import distance_sensor \n from hub import port', 'function': {'name': 'get distance', 'syntax': 'distance_sensor.distance(port.A)', 'parameters': {'parameter': {'name': 'Port', 'description': 'Port of spike prime to which distance sensor is connected', 'values': 'port.A,port.B,port.C,port.D,port.E,port.F'}}, 'returns': {'name': 'the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1', 'values': 'integer'}}}
Submitting tool outputs: [{'tool_call_id': 'call_YpgsqYeb2YWHjnyshHHRiu7a', 'output': '{"name": "distance_sensor", "description": "a class that allows access to spike prime distance sensors", "initialization": "none", "required imports": "import distance_sensor \\n from hub import port", "function": {"name": "get distance", "syntax": "distance_sensor.distance(port.A)", "parameters": {"parameter": {"name": "Port", "description": "Port of spike prime to which distance sensor is connected", "values": "port.A,port.B,port.C,port.D,port.E,port.F"}}, "returns": {"name": "the distance measured by the sensor in millimeters. If the distance sensor cannot read a valid distance it will return -1", "values": "integer"}}}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"query": "sound"
}
ChatGPT: I am querying documentation for sound
{'name': 'sound', 'description': 'a class that enables control of built in SPIKE Prime speakers', 'initialization': 'none', 'required imports': 'from hub import sound \n from hub import port', 'function': [{'name': 'beep', 'syntax': 'sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)', 'parameters': [{'name': 'freq', 'description': 'Frequency of beep', 'values': 'positive integer'}, {'name': 'duration', 'description': 'length of beep in milliseconds', 'values': 'positive integer'}, {'name': 'volume', 'description': 'volume of beep', 'values': 'integer 1:100'}], 'returns': 'none'}]}
Submitting tool outputs: [{'tool_call_id': 'call_dfzFfa4bWNT5o0U5xjGh4E3g', 'output': '{"name": "sound", "description": "a class that enables control of built in SPIKE Prime speakers", "initialization": "none", "required imports": "from hub import sound \\n from hub import port", "function": [{"name": "beep", "syntax": "sound.beep(freq: int = 440, duration: int = 500, volume: int = 100)", "parameters": [{"name": "freq", "description": "Frequency of beep", "values": "positive integer"}, {"name": "duration", "description": "length of beep in milliseconds", "values": "positive integer"}, {"name": "volume", "description": "volume of beep", "values": "integer 1:100"}], "returns": "none"}]}'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Please press the touch sensor"
}
ChatGPT: Hey Human, Please press the touch sensor
Submitting tool outputs: [{'tool_call_id': 'call_f5Aoz32BNt2AU2tf6JraAwVx', 'output': 'ok'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"code": "from hub import sound, port \n import force_sensor, distance_sensor \n while True: \n     if force_sensor.pressed(port.C): \n         sound.beep(freq=distance_sensor.distance(port.F), duration=500, volume=100)",
"runtime": "10"
}
=========================== RUNNING CODE (10 second(s)) ===========================
from hub import sound, port 
import force_sensor, distance_sensor 
while True: 
    if force_sensor.pressed(port.C): 
        sound.beep(freq=distance_sensor.distance(port.F), duration=500, volume=100)
RESETTING
 - Status: 
 - Status: Paste mode start: 
================================== SERIAL OUPUT ===================================
 - Status: Paste mode end: 

 - Status: 
======================================= END =======================================

 - Status: Program ended
Submitting tool outputs: [{'tool_call_id': 'call_EfM4jauftWPrwhC0lzCnjGmn', 'output': ''}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: requires_action
 - Status: Managing functions
{
"prompt": "Please check if a sound was produced."
}
ChatGPT: Hey Human, Please check if a sound was produced.
Submitting tool outputs: [{'tool_call_id': 'call_3iSXd3lxo0wJ6BWnKPwjgy9L', 'output': 'it was'}]
 - Status: Done submitting outputs
 - Status: Using existing run
 - Status: Run in progress
 - Status: Status: completed